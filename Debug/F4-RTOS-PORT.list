
F4-RTOS-PORT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800863c  0800863c  000200ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008644  08008644  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008644  08008644  00018644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008648  08008648  00018648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0800864c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  200000ec  08008738  000200ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08008738  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d475  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003070  00000000  00000000  0003d591  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001788  00000000  00000000  00040608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001650  00000000  00000000  00041d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bf9a  00000000  00000000  000433e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a807  00000000  00000000  0006f37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010c0f7  00000000  00000000  00089b81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00195c78  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000067e0  00000000  00000000  00195ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008588 	.word	0x08008588

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000f0 	.word	0x200000f0
 80001ec:	08008588 	.word	0x08008588

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <FRAM_DMA_Init>:
#include "ext_fram_dma.h"

uint8_t completed_tx;
uint8_t completed_rx;

void FRAM_DMA_Init(){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000594:	4819      	ldr	r0, [pc, #100]	; (80005fc <FRAM_DMA_Init+0x74>)
 8000596:	f002 ffd7 	bl	8003548 <HAL_GPIO_WritePin>
    uint8_t buf[2];
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 800059a:	2200      	movs	r2, #0
 800059c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a0:	4816      	ldr	r0, [pc, #88]	; (80005fc <FRAM_DMA_Init+0x74>)
 80005a2:	f002 ffd1 	bl	8003548 <HAL_GPIO_WritePin>
    buf[0] = 0x06; //CMD_WREN
 80005a6:	2306      	movs	r3, #6
 80005a8:	713b      	strb	r3, [r7, #4]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Transmit(&hspi1, buf, 1, HAL_MAX_DELAY);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Transmit(&hspi2, buf, 1, HAL_MAX_DELAY);
 80005aa:	1d39      	adds	r1, r7, #4
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005b0:	2201      	movs	r2, #1
 80005b2:	4813      	ldr	r0, [pc, #76]	; (8000600 <FRAM_DMA_Init+0x78>)
 80005b4:	f005 fb5f 	bl	8005c76 <HAL_SPI_Transmit>
    #endif

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80005b8:	2201      	movs	r2, #1
 80005ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005be:	480f      	ldr	r0, [pc, #60]	; (80005fc <FRAM_DMA_Init+0x74>)
 80005c0:	f002 ffc2 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ca:	480c      	ldr	r0, [pc, #48]	; (80005fc <FRAM_DMA_Init+0x74>)
 80005cc:	f002 ffbc 	bl	8003548 <HAL_GPIO_WritePin>
    buf[0] = 0x01; //CMD_WRSR
 80005d0:	2301      	movs	r3, #1
 80005d2:	713b      	strb	r3, [r7, #4]
    buf[1] = 0xc0;
 80005d4:	23c0      	movs	r3, #192	; 0xc0
 80005d6:	717b      	strb	r3, [r7, #5]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Transmit(&hspi1, buf, 2, HAL_MAX_DELAY);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Transmit(&hspi2, buf, 2, HAL_MAX_DELAY);
 80005d8:	1d39      	adds	r1, r7, #4
 80005da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005de:	2202      	movs	r2, #2
 80005e0:	4807      	ldr	r0, [pc, #28]	; (8000600 <FRAM_DMA_Init+0x78>)
 80005e2:	f005 fb48 	bl	8005c76 <HAL_SPI_Transmit>
    #endif

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005ec:	4803      	ldr	r0, [pc, #12]	; (80005fc <FRAM_DMA_Init+0x74>)
 80005ee:	f002 ffab 	bl	8003548 <HAL_GPIO_WritePin>

}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	48001800 	.word	0x48001800
 8000600:	20000174 	.word	0x20000174

08000604 <FRAM_DMA_Read>:

void FRAM_DMA_Read(uint32_t addr, uint8_t *dst, unsigned long len){
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
    uint8_t buf[4];
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000616:	4818      	ldr	r0, [pc, #96]	; (8000678 <FRAM_DMA_Read+0x74>)
 8000618:	f002 ff96 	bl	8003548 <HAL_GPIO_WritePin>
    buf[0] = 0x03; //CMD_READ;
 800061c:	2303      	movs	r3, #3
 800061e:	753b      	strb	r3, [r7, #20]
    buf[1] = (addr & 0xFF0000U) >> 16;
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	0c1b      	lsrs	r3, r3, #16
 8000624:	b2db      	uxtb	r3, r3
 8000626:	757b      	strb	r3, [r7, #21]
    buf[2] = (addr & 0x00FF00U) >> 8;
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	0a1b      	lsrs	r3, r3, #8
 800062c:	b2db      	uxtb	r3, r3
 800062e:	75bb      	strb	r3, [r7, #22]
    buf[3] = (addr & 0x0000FFU);
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	75fb      	strb	r3, [r7, #23]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Transmit(&hspi1, buf, 4, HAL_MAX_DELAY);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Transmit(&hspi2, buf, 4, HAL_MAX_DELAY);
 8000636:	f107 0114 	add.w	r1, r7, #20
 800063a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800063e:	2204      	movs	r2, #4
 8000640:	480e      	ldr	r0, [pc, #56]	; (800067c <FRAM_DMA_Read+0x78>)
 8000642:	f005 fb18 	bl	8005c76 <HAL_SPI_Transmit>
    #endif
    completed_rx = 0;
 8000646:	4b0e      	ldr	r3, [pc, #56]	; (8000680 <FRAM_DMA_Read+0x7c>)
 8000648:	2200      	movs	r2, #0
 800064a:	701a      	strb	r2, [r3, #0]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Receive_DMA(&hspi1, dst, len);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Receive_DMA(&hspi2, dst, len);
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	b29b      	uxth	r3, r3
 8000650:	461a      	mov	r2, r3
 8000652:	68b9      	ldr	r1, [r7, #8]
 8000654:	4809      	ldr	r0, [pc, #36]	; (800067c <FRAM_DMA_Read+0x78>)
 8000656:	f005 fd71 	bl	800613c <HAL_SPI_Receive_DMA>
    #endif
    while(completed_rx == 0){;}
 800065a:	bf00      	nop
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <FRAM_DMA_Read+0x7c>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d0fb      	beq.n	800065c <FRAM_DMA_Read+0x58>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000664:	2201      	movs	r2, #1
 8000666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800066a:	4803      	ldr	r0, [pc, #12]	; (8000678 <FRAM_DMA_Read+0x74>)
 800066c:	f002 ff6c 	bl	8003548 <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	3718      	adds	r7, #24
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	48001800 	.word	0x48001800
 800067c:	20000174 	.word	0x20000174
 8000680:	20000170 	.word	0x20000170

08000684 <FRAM_DMA_Write>:

void FRAM_DMA_Write(uint32_t addr, uint8_t *src, unsigned long len){
 8000684:	b580      	push	{r7, lr}
 8000686:	b086      	sub	sp, #24
 8000688:	af00      	add	r7, sp, #0
 800068a:	60f8      	str	r0, [r7, #12]
 800068c:	60b9      	str	r1, [r7, #8]
 800068e:	607a      	str	r2, [r7, #4]
    uint8_t buf[4];
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8000690:	2200      	movs	r2, #0
 8000692:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000696:	4823      	ldr	r0, [pc, #140]	; (8000724 <FRAM_DMA_Write+0xa0>)
 8000698:	f002 ff56 	bl	8003548 <HAL_GPIO_WritePin>
    buf[0] = 0x06; //CMD_WREN
 800069c:	2306      	movs	r3, #6
 800069e:	753b      	strb	r3, [r7, #20]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Transmit(&hspi1, buf, 1, HAL_MAX_DELAY);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Transmit(&hspi2, buf, 1, HAL_MAX_DELAY);
 80006a0:	f107 0114 	add.w	r1, r7, #20
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006a8:	2201      	movs	r2, #1
 80006aa:	481f      	ldr	r0, [pc, #124]	; (8000728 <FRAM_DMA_Write+0xa4>)
 80006ac:	f005 fae3 	bl	8005c76 <HAL_SPI_Transmit>
    #endif

    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b6:	481b      	ldr	r0, [pc, #108]	; (8000724 <FRAM_DMA_Write+0xa0>)
 80006b8:	f002 ff46 	bl	8003548 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <FRAM_DMA_Write+0xa0>)
 80006c4:	f002 ff40 	bl	8003548 <HAL_GPIO_WritePin>

    buf[0] = 0x02; //CMD_WRITE;
 80006c8:	2302      	movs	r3, #2
 80006ca:	753b      	strb	r3, [r7, #20]
    buf[1] = (addr & 0xFF0000U) >> 16;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	b2db      	uxtb	r3, r3
 80006d2:	757b      	strb	r3, [r7, #21]
    buf[2] = (addr & 0x00FF00U) >> 8;
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	0a1b      	lsrs	r3, r3, #8
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	75bb      	strb	r3, [r7, #22]
    buf[3] = (addr & 0x0000FFU);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	75fb      	strb	r3, [r7, #23]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Transmit(&hspi1, buf, 4, HAL_MAX_DELAY);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Transmit(&hspi2, buf, 4, HAL_MAX_DELAY);
 80006e2:	f107 0114 	add.w	r1, r7, #20
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ea:	2204      	movs	r2, #4
 80006ec:	480e      	ldr	r0, [pc, #56]	; (8000728 <FRAM_DMA_Write+0xa4>)
 80006ee:	f005 fac2 	bl	8005c76 <HAL_SPI_Transmit>
    #endif

    completed_tx = 0;
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <FRAM_DMA_Write+0xa8>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	701a      	strb	r2, [r3, #0]
    #if (USE_SPI_1 == 1)
    HAL_SPI_Transmit_DMA(&hspi1, src, len);
    #endif
    #if (USE_SPI_2 == 1)
    HAL_SPI_Transmit_DMA(&hspi2, src, len);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	461a      	mov	r2, r3
 80006fe:	68b9      	ldr	r1, [r7, #8]
 8000700:	4809      	ldr	r0, [pc, #36]	; (8000728 <FRAM_DMA_Write+0xa4>)
 8000702:	f005 fc27 	bl	8005f54 <HAL_SPI_Transmit_DMA>
    #endif

    while(completed_tx == 0){;}
 8000706:	bf00      	nop
 8000708:	4b08      	ldr	r3, [pc, #32]	; (800072c <FRAM_DMA_Write+0xa8>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d0fb      	beq.n	8000708 <FRAM_DMA_Write+0x84>
    HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_SET);
 8000710:	2201      	movs	r2, #1
 8000712:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000716:	4803      	ldr	r0, [pc, #12]	; (8000724 <FRAM_DMA_Write+0xa0>)
 8000718:	f002 ff16 	bl	8003548 <HAL_GPIO_WritePin>
}
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	48001800 	.word	0x48001800
 8000728:	20000174 	.word	0x20000174
 800072c:	20000171 	.word	0x20000171

08000730 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000730:	b480      	push	{r7}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
    completed_tx = 1;
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <HAL_SPI_TxCpltCallback+0x1c>)
 800073a:	2201      	movs	r2, #1
 800073c:	701a      	strb	r2, [r3, #0]
}
 800073e:	bf00      	nop
 8000740:	370c      	adds	r7, #12
 8000742:	46bd      	mov	sp, r7
 8000744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop
 800074c:	20000171 	.word	0x20000171

08000750 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
    completed_rx = 1;
 8000758:	4b04      	ldr	r3, [pc, #16]	; (800076c <HAL_SPI_RxCpltCallback+0x1c>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
}
 800075e:	bf00      	nop
 8000760:	370c      	adds	r7, #12
 8000762:	46bd      	mov	sp, r7
 8000764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000768:	4770      	bx	lr
 800076a:	bf00      	nop
 800076c:	20000170 	.word	0x20000170

08000770 <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 8000770:	b5b0      	push	{r4, r5, r7, lr}
 8000772:	b090      	sub	sp, #64	; 0x40
 8000774:	af04      	add	r7, sp, #16
  HAL_Init();
 8000776:	f002 f8fa 	bl	800296e <HAL_Init>
  SystemClock_Config();
 800077a:	f000 f867 	bl	800084c <SystemClock_Config>
  MX_GPIO_Init();
 800077e:	f000 f94b 	bl	8000a18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000782:	f000 f923 	bl	80009cc <MX_DMA_Init>
  MX_SPI2_Init();
 8000786:	f000 f8b3 	bl	80008f0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800078a:	f000 f8ef 	bl	800096c <MX_USART2_UART_Init>

  FRAM_DMA_Init();
 800078e:	f7ff fefb 	bl	8000588 <FRAM_DMA_Init>
  BSP_IO_Init();
 8000792:	f001 fdbf 	bl	8002314 <BSP_IO_Init>
  BSP_IO_ConfigPin(IO1_PIN_4, IO_MODE_OUTPUT);
 8000796:	2101      	movs	r1, #1
 8000798:	2010      	movs	r0, #16
 800079a:	f001 fdff 	bl	800239c <BSP_IO_ConfigPin>

  uint8_t fram_seg[] = {1, 2, 3, 4, 5};
 800079e:	4a27      	ldr	r2, [pc, #156]	; (800083c <main+0xcc>)
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007a8:	6018      	str	r0, [r3, #0]
 80007aa:	3304      	adds	r3, #4
 80007ac:	7019      	strb	r1, [r3, #0]
  uint8_t local_seg[5];
  char print_buf[21];

  FRAM_DMA_Write(0x00000, fram_seg, sizeof(fram_seg));
 80007ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b2:	2205      	movs	r2, #5
 80007b4:	4619      	mov	r1, r3
 80007b6:	2000      	movs	r0, #0
 80007b8:	f7ff ff64 	bl	8000684 <FRAM_DMA_Write>
  FRAM_DMA_Read(0x00000, local_seg, sizeof(local_seg));
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	2205      	movs	r2, #5
 80007c2:	4619      	mov	r1, r3
 80007c4:	2000      	movs	r0, #0
 80007c6:	f7ff ff1d 	bl	8000604 <FRAM_DMA_Read>
  while (1){
	  sprintf(print_buf, "\n\r[restart]\n\r%d%d%d%d%d", local_seg[0], local_seg[1], local_seg[2], local_seg[3], local_seg[4]);
 80007ca:	7f3b      	ldrb	r3, [r7, #28]
 80007cc:	461c      	mov	r4, r3
 80007ce:	7f7b      	ldrb	r3, [r7, #29]
 80007d0:	461d      	mov	r5, r3
 80007d2:	7fbb      	ldrb	r3, [r7, #30]
 80007d4:	7ffa      	ldrb	r2, [r7, #31]
 80007d6:	f897 1020 	ldrb.w	r1, [r7, #32]
 80007da:	1d38      	adds	r0, r7, #4
 80007dc:	9102      	str	r1, [sp, #8]
 80007de:	9201      	str	r2, [sp, #4]
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	462b      	mov	r3, r5
 80007e4:	4622      	mov	r2, r4
 80007e6:	4916      	ldr	r1, [pc, #88]	; (8000840 <main+0xd0>)
 80007e8:	f007 faa0 	bl	8007d2c <siprintf>
	  HAL_UART_Transmit(&huart2, print_buf, sizeof(print_buf)-1, HAL_MAX_DELAY);
 80007ec:	1d39      	adds	r1, r7, #4
 80007ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007f2:	2214      	movs	r2, #20
 80007f4:	4813      	ldr	r0, [pc, #76]	; (8000844 <main+0xd4>)
 80007f6:	f006 fd99 	bl	800732c <HAL_UART_Transmit>

	  for(int i = 0; i < sizeof(fram_seg); i++){
 80007fa:	2300      	movs	r3, #0
 80007fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007fe:	e019      	b.n	8000834 <main+0xc4>
		  if(fram_seg[i] == local_seg[i]){
 8000800:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	4413      	add	r3, r2
 8000808:	781a      	ldrb	r2, [r3, #0]
 800080a:	f107 011c 	add.w	r1, r7, #28
 800080e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000810:	440b      	add	r3, r1
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	429a      	cmp	r2, r3
 8000816:	d107      	bne.n	8000828 <main+0xb8>
//			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
			  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000818:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081c:	480a      	ldr	r0, [pc, #40]	; (8000848 <main+0xd8>)
 800081e:	f002 feab 	bl	8003578 <HAL_GPIO_TogglePin>
			  BSP_IO_TogglePin(IO1_PIN_4);
 8000822:	2010      	movs	r0, #16
 8000824:	f001 fdf2 	bl	800240c <BSP_IO_TogglePin>
		  }
		  HAL_Delay(100);
 8000828:	2064      	movs	r0, #100	; 0x64
 800082a:	f002 f8d9 	bl	80029e0 <HAL_Delay>
	  for(int i = 0; i < sizeof(fram_seg); i++){
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	3301      	adds	r3, #1
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000836:	2b04      	cmp	r3, #4
 8000838:	d9e2      	bls.n	8000800 <main+0x90>
	  sprintf(print_buf, "\n\r[restart]\n\r%d%d%d%d%d", local_seg[0], local_seg[1], local_seg[2], local_seg[3], local_seg[4]);
 800083a:	e7c6      	b.n	80007ca <main+0x5a>
 800083c:	080085b8 	.word	0x080085b8
 8000840:	080085a0 	.word	0x080085a0
 8000844:	20000220 	.word	0x20000220
 8000848:	48000400 	.word	0x48000400

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b096      	sub	sp, #88	; 0x58
 8000850:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2244      	movs	r2, #68	; 0x44
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f007 fa5e 	bl	8007d1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000860:	463b      	mov	r3, r7
 8000862:	2200      	movs	r2, #0
 8000864:	601a      	str	r2, [r3, #0]
 8000866:	605a      	str	r2, [r3, #4]
 8000868:	609a      	str	r2, [r3, #8]
 800086a:	60da      	str	r2, [r3, #12]
 800086c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800086e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000872:	f003 fdbf 	bl	80043f4 <HAL_PWREx_ControlVoltageScaling>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800087c:	f000 f9c8 	bl	8000c10 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000880:	2310      	movs	r3, #16
 8000882:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000884:	2301      	movs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 800088c:	2390      	movs	r3, #144	; 0x90
 800088e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000890:	2302      	movs	r3, #2
 8000892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000894:	2301      	movs	r3, #1
 8000896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 8000898:	2305      	movs	r3, #5
 800089a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 71;
 800089c:	2347      	movs	r3, #71	; 0x47
 800089e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008a0:	2302      	movs	r3, #2
 80008a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008a4:	2302      	movs	r3, #2
 80008a6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV6;
 80008a8:	2306      	movs	r3, #6
 80008aa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4618      	mov	r0, r3
 80008b2:	f003 fe05 	bl	80044c0 <HAL_RCC_OscConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80008bc:	f000 f9a8 	bl	8000c10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c0:	230f      	movs	r3, #15
 80008c2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008c4:	2303      	movs	r3, #3
 80008c6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 80008c8:	2390      	movs	r3, #144	; 0x90
 80008ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008cc:	2300      	movs	r3, #0
 80008ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008d0:	2300      	movs	r3, #0
 80008d2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d4:	463b      	mov	r3, r7
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f004 fa09 	bl	8004cf0 <HAL_RCC_ClockConfig>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80008e4:	f000 f994 	bl	8000c10 <Error_Handler>
  }
}
 80008e8:	bf00      	nop
 80008ea:	3758      	adds	r7, #88	; 0x58
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_SPI2_Init+0x74>)
 80008f6:	4a1c      	ldr	r2, [pc, #112]	; (8000968 <MX_SPI2_Init+0x78>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_SPI2_Init+0x74>)
 80008fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000900:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000902:	4b18      	ldr	r3, [pc, #96]	; (8000964 <MX_SPI2_Init+0x74>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_SPI2_Init+0x74>)
 800090a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800090e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_SPI2_Init+0x74>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_SPI2_Init+0x74>)
 8000918:	2200      	movs	r2, #0
 800091a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_SPI2_Init+0x74>)
 800091e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000922:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000924:	4b0f      	ldr	r3, [pc, #60]	; (8000964 <MX_SPI2_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_SPI2_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_SPI2_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_SPI2_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_SPI2_Init+0x74>)
 800093e:	2207      	movs	r2, #7
 8000940:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_SPI2_Init+0x74>)
 8000944:	2200      	movs	r2, #0
 8000946:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_SPI2_Init+0x74>)
 800094a:	2208      	movs	r2, #8
 800094c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_SPI2_Init+0x74>)
 8000950:	f005 f8ee 	bl	8005b30 <HAL_SPI_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800095a:	f000 f959 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000174 	.word	0x20000174
 8000968:	40003800 	.word	0x40003800

0800096c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000970:	4b14      	ldr	r3, [pc, #80]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000972:	4a15      	ldr	r2, [pc, #84]	; (80009c8 <MX_USART2_UART_Init+0x5c>)
 8000974:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000976:	4b13      	ldr	r3, [pc, #76]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000978:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800097c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097e:	4b11      	ldr	r3, [pc, #68]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000984:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800098a:	4b0e      	ldr	r3, [pc, #56]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000990:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000992:	220c      	movs	r2, #12
 8000994:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000996:	4b0b      	ldr	r3, [pc, #44]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800099c:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 800099e:	2200      	movs	r2, #0
 80009a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009a2:	4b08      	ldr	r3, [pc, #32]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a8:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009ae:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_USART2_UART_Init+0x58>)
 80009b0:	f006 fc6e 	bl	8007290 <HAL_UART_Init>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009ba:	f000 f929 	bl	8000c10 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000220 	.word	0x20000220
 80009c8:	40004400 	.word	0x40004400

080009cc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <MX_DMA_Init+0x48>)
 80009d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <MX_DMA_Init+0x48>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6493      	str	r3, [r2, #72]	; 0x48
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <MX_DMA_Init+0x48>)
 80009e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	200e      	movs	r0, #14
 80009f0:	f002 f8f6 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009f4:	200e      	movs	r0, #14
 80009f6:	f002 f90f 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2100      	movs	r1, #0
 80009fe:	200f      	movs	r0, #15
 8000a00:	f002 f8ee 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000a04:	200f      	movs	r0, #15
 8000a06:	f002 f907 	bl	8002c18 <HAL_NVIC_EnableIRQ>

}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40021000 	.word	0x40021000

08000a18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08c      	sub	sp, #48	; 0x30
 8000a1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
 8000a2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a2e:	4b69      	ldr	r3, [pc, #420]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	4a68      	ldr	r2, [pc, #416]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3a:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a42:	61bb      	str	r3, [r7, #24]
 8000a44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a46:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	4a62      	ldr	r2, [pc, #392]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a4c:	f043 0304 	orr.w	r3, r3, #4
 8000a50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a52:	4b60      	ldr	r3, [pc, #384]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	f003 0304 	and.w	r3, r3, #4
 8000a5a:	617b      	str	r3, [r7, #20]
 8000a5c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a5e:	4b5d      	ldr	r3, [pc, #372]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	4a5c      	ldr	r2, [pc, #368]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6a:	4b5a      	ldr	r3, [pc, #360]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8000a76:	f003 fd13 	bl	80044a0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b56      	ldr	r3, [pc, #344]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	4a55      	ldr	r2, [pc, #340]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a80:	f043 0308 	orr.w	r3, r3, #8
 8000a84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a86:	4b53      	ldr	r3, [pc, #332]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	f003 0308 	and.w	r3, r3, #8
 8000a8e:	60fb      	str	r3, [r7, #12]
 8000a90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a92:	4b50      	ldr	r3, [pc, #320]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	4a4f      	ldr	r2, [pc, #316]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000a98:	f043 0301 	orr.w	r3, r3, #1
 8000a9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9e:	4b4d      	ldr	r3, [pc, #308]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	f003 0301 	and.w	r3, r3, #1
 8000aa6:	60bb      	str	r3, [r7, #8]
 8000aa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aaa:	4b4a      	ldr	r3, [pc, #296]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	4a49      	ldr	r2, [pc, #292]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000ab0:	f043 0320 	orr.w	r3, r3, #32
 8000ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab6:	4b47      	ldr	r3, [pc, #284]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	f003 0320 	and.w	r3, r3, #32
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b44      	ldr	r3, [pc, #272]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a43      	ldr	r2, [pc, #268]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b41      	ldr	r3, [pc, #260]	; (8000bd4 <MX_GPIO_Init+0x1bc>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0302 	and.w	r3, r3, #2
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_11, GPIO_PIN_RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ae0:	483d      	ldr	r0, [pc, #244]	; (8000bd8 <MX_GPIO_Init+0x1c0>)
 8000ae2:	f002 fd31 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aee:	f002 fd2b 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000af2:	2201      	movs	r2, #1
 8000af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af8:	4838      	ldr	r0, [pc, #224]	; (8000bdc <MX_GPIO_Init+0x1c4>)
 8000afa:	f002 fd25 	bl	8003548 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI10 PI9 PI8 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8000afe:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4832      	ldr	r0, [pc, #200]	; (8000be0 <MX_GPIO_Init+0x1c8>)
 8000b16:	f002 fa93 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b20:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b26:	2302      	movs	r3, #2
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b2a:	f107 031c 	add.w	r3, r7, #28
 8000b2e:	4619      	mov	r1, r3
 8000b30:	482c      	ldr	r0, [pc, #176]	; (8000be4 <MX_GPIO_Init+0x1cc>)
 8000b32:	f002 fa85 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4822      	ldr	r0, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0x1c0>)
 8000b50:	f002 fa76 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b54:	2320      	movs	r3, #32
 8000b56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b60:	2300      	movs	r3, #0
 8000b62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b64:	f107 031c 	add.w	r3, r7, #28
 8000b68:	4619      	mov	r1, r3
 8000b6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6e:	f002 fa67 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000b82:	f107 031c 	add.w	r3, r7, #28
 8000b86:	4619      	mov	r1, r3
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <MX_GPIO_Init+0x1d0>)
 8000b8a:	f002 fa59 	bl	8003040 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b94:	2301      	movs	r3, #1
 8000b96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	480d      	ldr	r0, [pc, #52]	; (8000bdc <MX_GPIO_Init+0x1c4>)
 8000ba8:	f002 fa4a 	bl	8003040 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2100      	movs	r1, #0
 8000bb0:	2017      	movs	r0, #23
 8000bb2:	f002 f815 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bb6:	2017      	movs	r0, #23
 8000bb8:	f002 f82e 	bl	8002c18 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	2028      	movs	r0, #40	; 0x28
 8000bc2:	f002 f80d 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000bc6:	2028      	movs	r0, #40	; 0x28
 8000bc8:	f002 f826 	bl	8002c18 <HAL_NVIC_EnableIRQ>

}
 8000bcc:	bf00      	nop
 8000bce:	3730      	adds	r7, #48	; 0x30
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48001800 	.word	0x48001800
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	48002000 	.word	0x48002000
 8000be4:	48000800 	.word	0x48000800
 8000be8:	48001400 	.word	0x48001400

08000bec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d101      	bne.n	8000c02 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bfe:	f001 fecf 	bl	80029a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40012c00 	.word	0x40012c00

08000c10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c14:	b672      	cpsid	i
}
 8000c16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c18:	e7fe      	b.n	8000c18 <Error_Handler+0x8>
	...

08000c1c <mfxstm32l152_Init>:
  * @brief  Initialize the mfxstm32l152 and configure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Init(uint16_t DeviceAddr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;
  uint8_t empty;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000c26:	88fb      	ldrh	r3, [r7, #6]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f000 ffd1 	bl	8001bd0 <mfxstm32l152_GetInstance>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	73fb      	strb	r3, [r7, #15]

  /* To prevent double initialization */
  if(instance == 0xFF)
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
 8000c34:	2bff      	cmp	r3, #255	; 0xff
 8000c36:	d10e      	bne.n	8000c56 <mfxstm32l152_Init+0x3a>
  {
    /* Look for empty instance */
    empty = mfxstm32l152_GetInstance(0);
 8000c38:	2000      	movs	r0, #0
 8000c3a:	f000 ffc9 	bl	8001bd0 <mfxstm32l152_GetInstance>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	73bb      	strb	r3, [r7, #14]

    if(empty < MFXSTM32L152_MAX_INSTANCE)
 8000c42:	7bbb      	ldrb	r3, [r7, #14]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d806      	bhi.n	8000c56 <mfxstm32l152_Init+0x3a>
    {
      /* Register the current device instance */
      mfxstm32l152[empty] = DeviceAddr;
 8000c48:	7bbb      	ldrb	r3, [r7, #14]
 8000c4a:	88fa      	ldrh	r2, [r7, #6]
 8000c4c:	b2d1      	uxtb	r1, r2
 8000c4e:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <mfxstm32l152_Init+0x58>)
 8000c50:	54d1      	strb	r1, [r2, r3]

      /* Initialize IO BUS layer */
      MFX_IO_Init();
 8000c52:	f001 fa5f 	bl	8002114 <MFX_IO_Init>
    }
  }

  mfxstm32l152_SetIrqOutPinPolarity(DeviceAddr, MFXSTM32L152_OUT_PIN_POLARITY_HIGH);
 8000c56:	88fb      	ldrh	r3, [r7, #6]
 8000c58:	2102      	movs	r1, #2
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f000 f8db 	bl	8000e16 <mfxstm32l152_SetIrqOutPinPolarity>
  mfxstm32l152_SetIrqOutPinType(DeviceAddr, MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL);
 8000c60:	88fb      	ldrh	r3, [r7, #6]
 8000c62:	2101      	movs	r1, #1
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f8fc 	bl	8000e62 <mfxstm32l152_SetIrqOutPinType>
}
 8000c6a:	bf00      	nop
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000108 	.word	0x20000108

08000c78 <mfxstm32l152_DeInit>:
  * @brief  DeInitialize the mfxstm32l152 and unconfigure the needed hardware resources
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_DeInit(uint16_t DeviceAddr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* release existing instance */
  instance = mfxstm32l152_ReleaseInstance(DeviceAddr);
 8000c82:	88fb      	ldrh	r3, [r7, #6]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 ffc3 	bl	8001c10 <mfxstm32l152_ReleaseInstance>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	73fb      	strb	r3, [r7, #15]

  /* De-Init only if instance was previously registered */
  if(instance != 0xFF)
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2bff      	cmp	r3, #255	; 0xff
 8000c92:	d001      	beq.n	8000c98 <mfxstm32l152_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    MFX_IO_DeInit();
 8000c94:	f001 fa4e 	bl	8002134 <MFX_IO_DeInit>
  }
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <mfxstm32l152_Reset>:
  * @brief  Reset the mfxstm32l152 by Software.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Reset(uint16_t DeviceAddr)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
  /* Soft Reset */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_SWRST);
 8000caa:	88fb      	ldrh	r3, [r7, #6]
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	2140      	movs	r1, #64	; 0x40
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fae1 	bl	8002278 <MFX_IO_Write>

  /* Wait for a delay to ensure registers erasing */
  MFX_IO_Delay(10);
 8000cb6:	200a      	movs	r0, #10
 8000cb8:	f001 fb20 	bl	80022fc <MFX_IO_Delay>
}
 8000cbc:	bf00      	nop
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}

08000cc4 <mfxstm32l152_LowPower>:
  * @brief  Put mfxstm32l152 Device in Low Power standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_LowPower(uint16_t DeviceAddr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  /* Enter standby mode */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, MFXSTM32L152_STANDBY);
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	2240      	movs	r2, #64	; 0x40
 8000cd2:	2140      	movs	r1, #64	; 0x40
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	f001 facf 	bl	8002278 <MFX_IO_Write>

  /* enable wakeup pin */
  MFX_IO_EnableWakeupPin();
 8000cda:	f001 fa95 	bl	8002208 <MFX_IO_EnableWakeupPin>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <mfxstm32l152_WakeUp>:
  * @brief  WakeUp mfxstm32l152 from standby mode
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void  mfxstm32l152_WakeUp(uint16_t DeviceAddr)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	80fb      	strh	r3, [r7, #6]
  uint8_t instance;

  /* Check if device instance already exists */
  instance = mfxstm32l152_GetInstance(DeviceAddr);
 8000cf0:	88fb      	ldrh	r3, [r7, #6]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 ff6c 	bl	8001bd0 <mfxstm32l152_GetInstance>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]

  /* if instance does not exist, first initialize pins*/
  if(instance == 0xFF)
 8000cfc:	7bfb      	ldrb	r3, [r7, #15]
 8000cfe:	2bff      	cmp	r3, #255	; 0xff
 8000d00:	d101      	bne.n	8000d06 <mfxstm32l152_WakeUp+0x20>
  {
    /* enable wakeup pin */
    MFX_IO_EnableWakeupPin();
 8000d02:	f001 fa81 	bl	8002208 <MFX_IO_EnableWakeupPin>
  }

  /* toggle wakeup pin */
  MFX_IO_Wakeup();
 8000d06:	f001 faa3 	bl	8002250 <MFX_IO_Wakeup>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}

08000d12 <mfxstm32l152_ReadID>:
  * @brief  Read the MFXSTM32L152 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval The Device ID (two bytes).
  */
uint16_t mfxstm32l152_ReadID(uint16_t DeviceAddr)
{
 8000d12:	b580      	push	{r7, lr}
 8000d14:	b084      	sub	sp, #16
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	4603      	mov	r3, r0
 8000d1a:	80fb      	strh	r3, [r7, #6]
  uint8_t id;

  /* Wait for a delay to ensure the state of registers */
  MFX_IO_Delay(1);
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	f001 faed 	bl	80022fc <MFX_IO_Delay>

  /* Initialize IO BUS layer */
  MFX_IO_Init();
 8000d22:	f001 f9f7 	bl	8002114 <MFX_IO_Init>

  id = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_ID);
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f001 fab8 	bl	80022a0 <MFX_IO_Read>
 8000d30:	4603      	mov	r3, r0
 8000d32:	73fb      	strb	r3, [r7, #15]

  /* Return the device ID value */
  return (id);
 8000d34:	7bfb      	ldrb	r3, [r7, #15]
 8000d36:	b29b      	uxth	r3, r3
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3710      	adds	r7, #16
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bd80      	pop	{r7, pc}

08000d40 <mfxstm32l152_EnableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_EnableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	460a      	mov	r2, r1
 8000d4a:	80fb      	strh	r3, [r7, #6]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	2142      	movs	r1, #66	; 0x42
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 faa1 	bl	80022a0 <MFX_IO_Read>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp |= Source;
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	797b      	ldrb	r3, [r7, #5]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000d6a:	7bfa      	ldrb	r2, [r7, #15]
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	2142      	movs	r1, #66	; 0x42
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 fa81 	bl	8002278 <MFX_IO_Write>
}
 8000d76:	bf00      	nop
 8000d78:	3710      	adds	r7, #16
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <mfxstm32l152_DisableITSource>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval None
  */
void mfxstm32l152_DisableITSource(uint16_t DeviceAddr, uint8_t Source)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b084      	sub	sp, #16
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	460a      	mov	r2, r1
 8000d88:	80fb      	strh	r3, [r7, #6]
 8000d8a:	4613      	mov	r3, r2
 8000d8c:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	73fb      	strb	r3, [r7, #15]

  /* Get the current value of the INT_EN register */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN);
 8000d92:	88fb      	ldrh	r3, [r7, #6]
 8000d94:	2142      	movs	r1, #66	; 0x42
 8000d96:	4618      	mov	r0, r3
 8000d98:	f001 fa82 	bl	80022a0 <MFX_IO_Read>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	73fb      	strb	r3, [r7, #15]

  /* Set the interrupts to be Enabled */
  tmp &= ~Source;
 8000da0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000da4:	43db      	mvns	r3, r3
 8000da6:	b25a      	sxtb	r2, r3
 8000da8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dac:	4013      	ands	r3, r2
 8000dae:	b25b      	sxtb	r3, r3
 8000db0:	73fb      	strb	r3, [r7, #15]

  /* Set the register */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_SRC_EN, tmp);
 8000db2:	7bfa      	ldrb	r2, [r7, #15]
 8000db4:	88fb      	ldrh	r3, [r7, #6]
 8000db6:	2142      	movs	r1, #66	; 0x42
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fa5d 	bl	8002278 <MFX_IO_Write>
}
 8000dbe:	bf00      	nop
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <mfxstm32l152_GlobalITStatus>:
  *   @arg  MFXSTM32L152_IRQ_TS_FULL : Touch Screen FIFO Full
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  * @retval The value of the checked Global interrupt source status.
  */
uint8_t mfxstm32l152_GlobalITStatus(uint16_t DeviceAddr, uint8_t Source)
{
 8000dc6:	b580      	push	{r7, lr}
 8000dc8:	b082      	sub	sp, #8
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	4603      	mov	r3, r0
 8000dce:	460a      	mov	r2, r1
 8000dd0:	80fb      	strh	r3, [r7, #6]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	717b      	strb	r3, [r7, #5]
  /* Return the global IT source status (pending or not)*/
  return((MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_PENDING) & Source));
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2108      	movs	r1, #8
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 fa60 	bl	80022a0 <MFX_IO_Read>
 8000de0:	4603      	mov	r3, r0
 8000de2:	461a      	mov	r2, r3
 8000de4:	797b      	ldrb	r3, [r7, #5]
 8000de6:	4013      	ands	r3, r2
 8000de8:	b2db      	uxtb	r3, r3
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <mfxstm32l152_ClearGlobalIT>:
  *   @arg  MFXSTM32L152_IRQ_TS_OVF : Touch Screen FIFO Overflow
  *  /\/\ IMPORTANT NOTE /\/\ must not use MFXSTM32L152_IRQ_GPIO as argument, see IRQ_GPI_ACK1 and IRQ_GPI_ACK2 registers
  * @retval None
  */
void mfxstm32l152_ClearGlobalIT(uint16_t DeviceAddr, uint8_t Source)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b082      	sub	sp, #8
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	4603      	mov	r3, r0
 8000dfa:	460a      	mov	r2, r1
 8000dfc:	80fb      	strh	r3, [r7, #6]
 8000dfe:	4613      	mov	r3, r2
 8000e00:	717b      	strb	r3, [r7, #5]
  /* Write 1 to the bits that have to be cleared */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_ACK, Source);
 8000e02:	797a      	ldrb	r2, [r7, #5]
 8000e04:	88fb      	ldrh	r3, [r7, #6]
 8000e06:	2144      	movs	r1, #68	; 0x44
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f001 fa35 	bl	8002278 <MFX_IO_Write>
}
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <mfxstm32l152_SetIrqOutPinPolarity>:
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_LOW: Interrupt output line is active Low edge
  *   @arg  MFXSTM32L152_OUT_PIN_POLARITY_HIGH: Interrupt line output is active High edge
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinPolarity(uint16_t DeviceAddr, uint8_t Polarity)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	460a      	mov	r2, r1
 8000e20:	80fb      	strh	r3, [r7, #6]
 8000e22:	4613      	mov	r3, r2
 8000e24:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000e26:	2300      	movs	r3, #0
 8000e28:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000e2a:	88fb      	ldrh	r3, [r7, #6]
 8000e2c:	2141      	movs	r1, #65	; 0x41
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f001 fa36 	bl	80022a0 <MFX_IO_Read>
 8000e34:	4603      	mov	r3, r0
 8000e36:	73fb      	strb	r3, [r7, #15]

  /* Mask the polarity bits */
  tmp &= ~(uint8_t)0x02;
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	f023 0302 	bic.w	r3, r3, #2
 8000e3e:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Polarity;
 8000e40:	7bfa      	ldrb	r2, [r7, #15]
 8000e42:	797b      	ldrb	r3, [r7, #5]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000e48:	7bfa      	ldrb	r2, [r7, #15]
 8000e4a:	88fb      	ldrh	r3, [r7, #6]
 8000e4c:	2141      	movs	r1, #65	; 0x41
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f001 fa12 	bl	8002278 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000e54:	2001      	movs	r0, #1
 8000e56:	f001 fa51 	bl	80022fc <MFX_IO_Delay>

}
 8000e5a:	bf00      	nop
 8000e5c:	3710      	adds	r7, #16
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <mfxstm32l152_SetIrqOutPinType>:
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_OPENDRAIN: Open Drain output Interrupt line
  *   @arg  MFXSTM32L152_OUT_PIN_TYPE_PUSHPULL: Push Pull output Interrupt line
  * @retval None
  */
void mfxstm32l152_SetIrqOutPinType(uint16_t DeviceAddr, uint8_t Type)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b084      	sub	sp, #16
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	4603      	mov	r3, r0
 8000e6a:	460a      	mov	r2, r1
 8000e6c:	80fb      	strh	r3, [r7, #6]
 8000e6e:	4613      	mov	r3, r2
 8000e70:	717b      	strb	r3, [r7, #5]
  uint8_t tmp = 0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  tmp = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT);
 8000e76:	88fb      	ldrh	r3, [r7, #6]
 8000e78:	2141      	movs	r1, #65	; 0x41
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f001 fa10 	bl	80022a0 <MFX_IO_Read>
 8000e80:	4603      	mov	r3, r0
 8000e82:	73fb      	strb	r3, [r7, #15]

  /* Mask the type bits */
  tmp &= ~(uint8_t)0x01;
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	73fb      	strb	r3, [r7, #15]

  /* Modify the Interrupt Output line configuration */
  tmp |= Type;
 8000e8c:	7bfa      	ldrb	r2, [r7, #15]
 8000e8e:	797b      	ldrb	r3, [r7, #5]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	73fb      	strb	r3, [r7, #15]

  /* Set the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_MFX_IRQ_OUT, tmp);
 8000e94:	7bfa      	ldrb	r2, [r7, #15]
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	2141      	movs	r1, #65	; 0x41
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f001 f9ec 	bl	8002278 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f001 fa2b 	bl	80022fc <MFX_IO_Delay>

}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <mfxstm32l152_IO_Start>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  AF_en: 0 to disable, else enabled.
  * @retval None
  */
void mfxstm32l152_IO_Start(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b084      	sub	sp, #16
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	6039      	str	r1, [r7, #0]
 8000eb8:	80fb      	strh	r3, [r7, #6]
  uint8_t mode;

  /* Get the current register value */
  mode = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2140      	movs	r1, #64	; 0x40
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 f9ee 	bl	80022a0 <MFX_IO_Read>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	73fb      	strb	r3, [r7, #15]

  /* Set the IO Functionalities to be Enabled */
  mode |= MFXSTM32L152_GPIO_EN;
 8000ec8:	7bfb      	ldrb	r3, [r7, #15]
 8000eca:	f043 0301 	orr.w	r3, r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
  /* if IDD or TS are enabled no matter the value this bit GPIO are not available for those pins */
  /*  however the MFX will waste some cycles to to handle these potential GPIO (pooling, etc) */
  /* so if IDD and TS are both active it is better to let ALTERNATE off (0) */
  /* if however IDD or TS are not connected then set it on gives more GPIOs availability */
  /* remind that AGPIO are less efficient then normal GPIO (They use pooling rather then EXTI */
  if (IO_Pin > 0xFFFF)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ed6:	d304      	bcc.n	8000ee2 <mfxstm32l152_IO_Start+0x34>
  {
    mode |= MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e003      	b.n	8000eea <mfxstm32l152_IO_Start+0x3c>
  }
  else
  {
    mode &= ~MFXSTM32L152_ALTERNATE_GPIO_EN;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
 8000ee4:	f023 0308 	bic.w	r3, r3, #8
 8000ee8:	73fb      	strb	r3, [r7, #15]
  }

  /* Write the new register value */
  MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 8000eea:	7bfa      	ldrb	r2, [r7, #15]
 8000eec:	88fb      	ldrh	r3, [r7, #6]
 8000eee:	2140      	movs	r1, #64	; 0x40
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f001 f9c1 	bl	8002278 <MFX_IO_Write>

  /* Wait for 1 ms for MFX to change IRQ_out pin config, before activate it */
  MFX_IO_Delay(1);
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f001 fa00 	bl	80022fc <MFX_IO_Delay>
}
 8000efc:	bf00      	nop
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <mfxstm32l152_IO_Config>:
  *   @arg  IO_MODE_IT_LOW_LEVEL_PD
  *   @arg  IO_MODE_IT_HIGH_LEVEL_PD
  * @retval None
  */
uint8_t mfxstm32l152_IO_Config(uint16_t DeviceAddr, uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	6039      	str	r1, [r7, #0]
 8000f0e:	80fb      	strh	r3, [r7, #6]
 8000f10:	4613      	mov	r3, r2
 8000f12:	717b      	strb	r3, [r7, #5]
  uint8_t error_code = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	73fb      	strb	r3, [r7, #15]

  /* Configure IO pin according to selected IO mode */
  switch(IO_Mode)
 8000f18:	797b      	ldrb	r3, [r7, #5]
 8000f1a:	2b17      	cmp	r3, #23
 8000f1c:	f200 82d4 	bhi.w	80014c8 <mfxstm32l152_IO_Config+0x5c4>
 8000f20:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <mfxstm32l152_IO_Config+0x24>)
 8000f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f26:	bf00      	nop
 8000f28:	08000fb9 	.word	0x08000fb9
 8000f2c:	08001049 	.word	0x08001049
 8000f30:	08001109 	.word	0x08001109
 8000f34:	080011f9 	.word	0x080011f9
 8000f38:	080012e9 	.word	0x080012e9
 8000f3c:	080013d9 	.word	0x080013d9
 8000f40:	08000f89 	.word	0x08000f89
 8000f44:	08000f89 	.word	0x08000f89
 8000f48:	08000fe9 	.word	0x08000fe9
 8000f4c:	08001019 	.word	0x08001019
 8000f50:	080014c9 	.word	0x080014c9
 8000f54:	080010d9 	.word	0x080010d9
 8000f58:	080010a9 	.word	0x080010a9
 8000f5c:	080014c9 	.word	0x080014c9
 8000f60:	08001079 	.word	0x08001079
 8000f64:	08001049 	.word	0x08001049
 8000f68:	08001159 	.word	0x08001159
 8000f6c:	080011a9 	.word	0x080011a9
 8000f70:	08001249 	.word	0x08001249
 8000f74:	08001299 	.word	0x08001299
 8000f78:	08001339 	.word	0x08001339
 8000f7c:	08001389 	.word	0x08001389
 8000f80:	08001429 	.word	0x08001429
 8000f84:	08001479 	.word	0x08001479
  {
  case IO_MODE_OFF: /* Off or analog mode */
  case IO_MODE_ANALOG: /* Off or analog mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f000 fb67 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000f92:	88fb      	ldrh	r3, [r7, #6]
 8000f94:	2200      	movs	r2, #0
 8000f96:	6839      	ldr	r1, [r7, #0]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 fa9d 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000f9e:	88f8      	ldrh	r0, [r7, #6]
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	2164      	movs	r1, #100	; 0x64
 8000fa6:	f000 fe57 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8000faa:	88f8      	ldrh	r0, [r7, #6]
 8000fac:	2300      	movs	r3, #0
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	2168      	movs	r1, #104	; 0x68
 8000fb2:	f000 fe51 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 8000fb6:	e28a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000fb8:	88fb      	ldrh	r3, [r7, #6]
 8000fba:	6839      	ldr	r1, [r7, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 fb4f 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000fc2:	88fb      	ldrh	r3, [r7, #6]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6839      	ldr	r1, [r7, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f000 fa85 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 8000fce:	88f8      	ldrh	r0, [r7, #6]
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	683a      	ldr	r2, [r7, #0]
 8000fd4:	2164      	movs	r1, #100	; 0x64
 8000fd6:	f000 fe3f 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	683a      	ldr	r2, [r7, #0]
 8000fe0:	2168      	movs	r1, #104	; 0x68
 8000fe2:	f000 fe39 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 8000fe6:	e272      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PU: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6839      	ldr	r1, [r7, #0]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f000 fb37 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8000ff2:	88fb      	ldrh	r3, [r7, #6]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	6839      	ldr	r1, [r7, #0]
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f000 fa6d 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 8000ffe:	88f8      	ldrh	r0, [r7, #6]
 8001000:	2301      	movs	r3, #1
 8001002:	683a      	ldr	r2, [r7, #0]
 8001004:	2164      	movs	r1, #100	; 0x64
 8001006:	f000 fe27 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800100a:	88f8      	ldrh	r0, [r7, #6]
 800100c:	2301      	movs	r3, #1
 800100e:	683a      	ldr	r2, [r7, #0]
 8001010:	2168      	movs	r1, #104	; 0x68
 8001012:	f000 fe21 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 8001016:	e25a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_INPUT_PD: /* Input mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	6839      	ldr	r1, [r7, #0]
 800101c:	4618      	mov	r0, r3
 800101e:	f000 fb1f 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001022:	88fb      	ldrh	r3, [r7, #6]
 8001024:	2200      	movs	r2, #0
 8001026:	6839      	ldr	r1, [r7, #0]
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fa55 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800102e:	88f8      	ldrh	r0, [r7, #6]
 8001030:	2301      	movs	r3, #1
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	2164      	movs	r1, #100	; 0x64
 8001036:	f000 fe0f 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800103a:	88f8      	ldrh	r0, [r7, #6]
 800103c:	2300      	movs	r3, #0
 800103e:	683a      	ldr	r2, [r7, #0]
 8001040:	2168      	movs	r1, #104	; 0x68
 8001042:	f000 fe09 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 8001046:	e242      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT: /* Output mode */
  case IO_MODE_OUTPUT_PP_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001048:	88fb      	ldrh	r3, [r7, #6]
 800104a:	6839      	ldr	r1, [r7, #0]
 800104c:	4618      	mov	r0, r3
 800104e:	f000 fb07 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001052:	88fb      	ldrh	r3, [r7, #6]
 8001054:	2201      	movs	r2, #1
 8001056:	6839      	ldr	r1, [r7, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f000 fa3d 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800105e:	88f8      	ldrh	r0, [r7, #6]
 8001060:	2300      	movs	r3, #0
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	2164      	movs	r1, #100	; 0x64
 8001066:	f000 fdf7 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 800106a:	88f8      	ldrh	r0, [r7, #6]
 800106c:	2300      	movs	r3, #0
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	2168      	movs	r1, #104	; 0x68
 8001072:	f000 fdf1 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 8001076:	e22a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_PP_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 8001078:	88fb      	ldrh	r3, [r7, #6]
 800107a:	6839      	ldr	r1, [r7, #0]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 faef 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 8001082:	88fb      	ldrh	r3, [r7, #6]
 8001084:	2201      	movs	r2, #1
 8001086:	6839      	ldr	r1, [r7, #0]
 8001088:	4618      	mov	r0, r3
 800108a:	f000 fa25 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_PUSH_PULL);
 800108e:	88f8      	ldrh	r0, [r7, #6]
 8001090:	2300      	movs	r3, #0
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	2164      	movs	r1, #100	; 0x64
 8001096:	f000 fddf 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 800109a:	88f8      	ldrh	r0, [r7, #6]
 800109c:	2301      	movs	r3, #1
 800109e:	683a      	ldr	r2, [r7, #0]
 80010a0:	2168      	movs	r1, #104	; 0x68
 80010a2:	f000 fdd9 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 80010a6:	e212      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PD: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	6839      	ldr	r1, [r7, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fad7 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	2201      	movs	r2, #1
 80010b6:	6839      	ldr	r1, [r7, #0]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fa0d 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80010be:	88f8      	ldrh	r0, [r7, #6]
 80010c0:	2301      	movs	r3, #1
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	2164      	movs	r1, #100	; 0x64
 80010c6:	f000 fdc7 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80010ca:	88f8      	ldrh	r0, [r7, #6]
 80010cc:	2300      	movs	r3, #0
 80010ce:	683a      	ldr	r2, [r7, #0]
 80010d0:	2168      	movs	r1, #104	; 0x68
 80010d2:	f000 fdc1 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 80010d6:	e1fa      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_OUTPUT_OD_PU: /* Output mode */
    mfxstm32l152_IO_DisablePinIT(DeviceAddr, IO_Pin); /* first disable IT */
 80010d8:	88fb      	ldrh	r3, [r7, #6]
 80010da:	6839      	ldr	r1, [r7, #0]
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 fabf 	bl	8001660 <mfxstm32l152_IO_DisablePinIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_OUT);
 80010e2:	88fb      	ldrh	r3, [r7, #6]
 80010e4:	2201      	movs	r2, #1
 80010e6:	6839      	ldr	r1, [r7, #0]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f000 f9f5 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPO_OPEN_DRAIN);
 80010ee:	88f8      	ldrh	r0, [r7, #6]
 80010f0:	2301      	movs	r3, #1
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	2164      	movs	r1, #100	; 0x64
 80010f6:	f000 fdaf 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80010fa:	88f8      	ldrh	r0, [r7, #6]
 80010fc:	2301      	movs	r3, #1
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	2168      	movs	r1, #104	; 0x68
 8001102:	f000 fda9 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    break;
 8001106:	e1e2      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fa7a 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001110:	88fb      	ldrh	r3, [r7, #6]
 8001112:	2200      	movs	r2, #0
 8001114:	6839      	ldr	r1, [r7, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f000 f9de 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800111c:	88f8      	ldrh	r0, [r7, #6]
 800111e:	2300      	movs	r3, #0
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	2164      	movs	r1, #100	; 0x64
 8001124:	f000 fd98 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001128:	88f8      	ldrh	r0, [r7, #6]
 800112a:	2301      	movs	r3, #1
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	2168      	movs	r1, #104	; 0x68
 8001130:	f000 fd92 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001134:	88fb      	ldrh	r3, [r7, #6]
 8001136:	2201      	movs	r2, #1
 8001138:	6839      	ldr	r1, [r7, #0]
 800113a:	4618      	mov	r0, r3
 800113c:	f000 f9de 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001140:	88fb      	ldrh	r3, [r7, #6]
 8001142:	2201      	movs	r2, #1
 8001144:	6839      	ldr	r1, [r7, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f9ed 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin); /* last to do: enable IT */
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	6839      	ldr	r1, [r7, #0]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fa75 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001156:	e1ba      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PU: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	4618      	mov	r0, r3
 800115c:	f000 fa52 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	2200      	movs	r2, #0
 8001164:	6839      	ldr	r1, [r7, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f000 f9b6 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800116c:	88f8      	ldrh	r0, [r7, #6]
 800116e:	2301      	movs	r3, #1
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	2164      	movs	r1, #100	; 0x64
 8001174:	f000 fd70 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001178:	88f8      	ldrh	r0, [r7, #6]
 800117a:	2301      	movs	r3, #1
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	2168      	movs	r1, #104	; 0x68
 8001180:	f000 fd6a 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001184:	88fb      	ldrh	r3, [r7, #6]
 8001186:	2201      	movs	r2, #1
 8001188:	6839      	ldr	r1, [r7, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f000 f9b6 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	2201      	movs	r2, #1
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f9c5 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800119c:	88fb      	ldrh	r3, [r7, #6]
 800119e:	6839      	ldr	r1, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 fa4d 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 80011a6:	e192      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_RISING_EDGE_PD: /* Interrupt rising edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80011a8:	88fb      	ldrh	r3, [r7, #6]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fa2a 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2200      	movs	r2, #0
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 f98e 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80011bc:	88f8      	ldrh	r0, [r7, #6]
 80011be:	2301      	movs	r3, #1
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	2164      	movs	r1, #100	; 0x64
 80011c4:	f000 fd48 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80011c8:	88f8      	ldrh	r0, [r7, #6]
 80011ca:	2300      	movs	r3, #0
 80011cc:	683a      	ldr	r2, [r7, #0]
 80011ce:	2168      	movs	r1, #104	; 0x68
 80011d0:	f000 fd42 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	2201      	movs	r2, #1
 80011d8:	6839      	ldr	r1, [r7, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f000 f98e 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	2201      	movs	r2, #1
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f99d 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80011ec:	88fb      	ldrh	r3, [r7, #6]
 80011ee:	6839      	ldr	r1, [r7, #0]
 80011f0:	4618      	mov	r0, r3
 80011f2:	f000 fa25 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 80011f6:	e16a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80011f8:	88fb      	ldrh	r3, [r7, #6]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f000 fa02 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	2200      	movs	r2, #0
 8001204:	6839      	ldr	r1, [r7, #0]
 8001206:	4618      	mov	r0, r3
 8001208:	f000 f966 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 800120c:	88f8      	ldrh	r0, [r7, #6]
 800120e:	2300      	movs	r3, #0
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	2164      	movs	r1, #100	; 0x64
 8001214:	f000 fd20 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001218:	88f8      	ldrh	r0, [r7, #6]
 800121a:	2301      	movs	r3, #1
 800121c:	683a      	ldr	r2, [r7, #0]
 800121e:	2168      	movs	r1, #104	; 0x68
 8001220:	f000 fd1a 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001224:	88fb      	ldrh	r3, [r7, #6]
 8001226:	2201      	movs	r2, #1
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f966 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001230:	88fb      	ldrh	r3, [r7, #6]
 8001232:	2200      	movs	r2, #0
 8001234:	6839      	ldr	r1, [r7, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f000 f975 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800123c:	88fb      	ldrh	r3, [r7, #6]
 800123e:	6839      	ldr	r1, [r7, #0]
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f9fd 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001246:	e142      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PU: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001248:	88fb      	ldrh	r3, [r7, #6]
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f9da 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	2200      	movs	r2, #0
 8001254:	6839      	ldr	r1, [r7, #0]
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f93e 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800125c:	88f8      	ldrh	r0, [r7, #6]
 800125e:	2301      	movs	r3, #1
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	2164      	movs	r1, #100	; 0x64
 8001264:	f000 fcf8 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001268:	88f8      	ldrh	r0, [r7, #6]
 800126a:	2301      	movs	r3, #1
 800126c:	683a      	ldr	r2, [r7, #0]
 800126e:	2168      	movs	r1, #104	; 0x68
 8001270:	f000 fcf2 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 8001274:	88fb      	ldrh	r3, [r7, #6]
 8001276:	2201      	movs	r2, #1
 8001278:	6839      	ldr	r1, [r7, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f93e 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001280:	88fb      	ldrh	r3, [r7, #6]
 8001282:	2200      	movs	r2, #0
 8001284:	6839      	ldr	r1, [r7, #0]
 8001286:	4618      	mov	r0, r3
 8001288:	f000 f94d 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	6839      	ldr	r1, [r7, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f000 f9d5 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001296:	e11a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_FALLING_EDGE_PD: /* Interrupt falling edge mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f9b2 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80012a0:	88fb      	ldrh	r3, [r7, #6]
 80012a2:	2200      	movs	r2, #0
 80012a4:	6839      	ldr	r1, [r7, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f916 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 80012ac:	88f8      	ldrh	r0, [r7, #6]
 80012ae:	2301      	movs	r3, #1
 80012b0:	683a      	ldr	r2, [r7, #0]
 80012b2:	2164      	movs	r1, #100	; 0x64
 80012b4:	f000 fcd0 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80012b8:	88f8      	ldrh	r0, [r7, #6]
 80012ba:	2300      	movs	r3, #0
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	2168      	movs	r1, #104	; 0x68
 80012c0:	f000 fcca 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_EDGE);
 80012c4:	88fb      	ldrh	r3, [r7, #6]
 80012c6:	2201      	movs	r2, #1
 80012c8:	6839      	ldr	r1, [r7, #0]
 80012ca:	4618      	mov	r0, r3
 80012cc:	f000 f916 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80012d0:	88fb      	ldrh	r3, [r7, #6]
 80012d2:	2200      	movs	r2, #0
 80012d4:	6839      	ldr	r1, [r7, #0]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f000 f925 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80012dc:	88fb      	ldrh	r3, [r7, #6]
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f000 f9ad 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 80012e6:	e0f2      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80012e8:	88fb      	ldrh	r3, [r7, #6]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 f98a 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	2200      	movs	r2, #0
 80012f4:	6839      	ldr	r1, [r7, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f8ee 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80012fc:	88f8      	ldrh	r0, [r7, #6]
 80012fe:	2300      	movs	r3, #0
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	2164      	movs	r1, #100	; 0x64
 8001304:	f000 fca8 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001308:	88f8      	ldrh	r0, [r7, #6]
 800130a:	2301      	movs	r3, #1
 800130c:	683a      	ldr	r2, [r7, #0]
 800130e:	2168      	movs	r1, #104	; 0x68
 8001310:	f000 fca2 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001314:	88fb      	ldrh	r3, [r7, #6]
 8001316:	2200      	movs	r2, #0
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f8ee 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	2200      	movs	r2, #0
 8001324:	6839      	ldr	r1, [r7, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f8fd 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800132c:	88fb      	ldrh	r3, [r7, #6]
 800132e:	6839      	ldr	r1, [r7, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f000 f985 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001336:	e0ca      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PU: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001338:	88fb      	ldrh	r3, [r7, #6]
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f962 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001340:	88fb      	ldrh	r3, [r7, #6]
 8001342:	2200      	movs	r2, #0
 8001344:	6839      	ldr	r1, [r7, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 f8c6 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800134c:	88f8      	ldrh	r0, [r7, #6]
 800134e:	2301      	movs	r3, #1
 8001350:	683a      	ldr	r2, [r7, #0]
 8001352:	2164      	movs	r1, #100	; 0x64
 8001354:	f000 fc80 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001358:	88f8      	ldrh	r0, [r7, #6]
 800135a:	2301      	movs	r3, #1
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	2168      	movs	r1, #104	; 0x68
 8001360:	f000 fc7a 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001364:	88fb      	ldrh	r3, [r7, #6]
 8001366:	2200      	movs	r2, #0
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f8c6 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 8001370:	88fb      	ldrh	r3, [r7, #6]
 8001372:	2200      	movs	r2, #0
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f8d5 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800137c:	88fb      	ldrh	r3, [r7, #6]
 800137e:	6839      	ldr	r1, [r7, #0]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 f95d 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001386:	e0a2      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_LOW_LEVEL_PD: /* Low level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	4618      	mov	r0, r3
 800138c:	f000 f93a 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001390:	88fb      	ldrh	r3, [r7, #6]
 8001392:	2200      	movs	r2, #0
 8001394:	6839      	ldr	r1, [r7, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f000 f89e 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800139c:	88f8      	ldrh	r0, [r7, #6]
 800139e:	2301      	movs	r3, #1
 80013a0:	683a      	ldr	r2, [r7, #0]
 80013a2:	2164      	movs	r1, #100	; 0x64
 80013a4:	f000 fc58 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 80013a8:	88f8      	ldrh	r0, [r7, #6]
 80013aa:	2300      	movs	r3, #0
 80013ac:	683a      	ldr	r2, [r7, #0]
 80013ae:	2168      	movs	r1, #104	; 0x68
 80013b0:	f000 fc52 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	2200      	movs	r2, #0
 80013b8:	6839      	ldr	r1, [r7, #0]
 80013ba:	4618      	mov	r0, r3
 80013bc:	f000 f89e 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_LLFE);
 80013c0:	88fb      	ldrh	r3, [r7, #6]
 80013c2:	2200      	movs	r2, #0
 80013c4:	6839      	ldr	r1, [r7, #0]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f8ad 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	6839      	ldr	r1, [r7, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f000 f935 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 80013d6:	e07a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 80013d8:	88fb      	ldrh	r3, [r7, #6]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 f912 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 80013e0:	88fb      	ldrh	r3, [r7, #6]
 80013e2:	2200      	movs	r2, #0
 80013e4:	6839      	ldr	r1, [r7, #0]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f876 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITHOUT_PULL_RESISTOR);
 80013ec:	88f8      	ldrh	r0, [r7, #6]
 80013ee:	2300      	movs	r3, #0
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	2164      	movs	r1, #100	; 0x64
 80013f4:	f000 fc30 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 80013f8:	88f8      	ldrh	r0, [r7, #6]
 80013fa:	2301      	movs	r3, #1
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	2168      	movs	r1, #104	; 0x68
 8001400:	f000 fc2a 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001404:	88fb      	ldrh	r3, [r7, #6]
 8001406:	2200      	movs	r2, #0
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f876 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	2201      	movs	r2, #1
 8001414:	6839      	ldr	r1, [r7, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f000 f885 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800141c:	88fb      	ldrh	r3, [r7, #6]
 800141e:	6839      	ldr	r1, [r7, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f000 f90d 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001426:	e052      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PU: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f8ea 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	2200      	movs	r2, #0
 8001434:	6839      	ldr	r1, [r7, #0]
 8001436:	4618      	mov	r0, r3
 8001438:	f000 f84e 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800143c:	88f8      	ldrh	r0, [r7, #6]
 800143e:	2301      	movs	r3, #1
 8001440:	683a      	ldr	r2, [r7, #0]
 8001442:	2164      	movs	r1, #100	; 0x64
 8001444:	f000 fc08 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_UP);
 8001448:	88f8      	ldrh	r0, [r7, #6]
 800144a:	2301      	movs	r3, #1
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	2168      	movs	r1, #104	; 0x68
 8001450:	f000 fc02 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	2200      	movs	r2, #0
 8001458:	6839      	ldr	r1, [r7, #0]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 f84e 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 8001460:	88fb      	ldrh	r3, [r7, #6]
 8001462:	2201      	movs	r2, #1
 8001464:	6839      	ldr	r1, [r7, #0]
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f85d 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 800146c:	88fb      	ldrh	r3, [r7, #6]
 800146e:	6839      	ldr	r1, [r7, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f8e5 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 8001476:	e02a      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  case IO_MODE_IT_HIGH_LEVEL_PD: /* High level interrupt mode */
    mfxstm32l152_IO_EnableIT(DeviceAddr);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	4618      	mov	r0, r3
 800147c:	f000 f8c2 	bl	8001604 <mfxstm32l152_IO_EnableIT>
    mfxstm32l152_IO_InitPin(DeviceAddr, IO_Pin, MFXSTM32L152_GPIO_DIR_IN);
 8001480:	88fb      	ldrh	r3, [r7, #6]
 8001482:	2200      	movs	r2, #0
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f000 f826 	bl	80014d8 <mfxstm32l152_IO_InitPin>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_TYPE1, IO_Pin, MFXSTM32L152_GPI_WITH_PULL_RESISTOR);
 800148c:	88f8      	ldrh	r0, [r7, #6]
 800148e:	2301      	movs	r3, #1
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	2164      	movs	r1, #100	; 0x64
 8001494:	f000 fbe0 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_PUPD1, IO_Pin, MFXSTM32L152_GPIO_PULL_DOWN);
 8001498:	88f8      	ldrh	r0, [r7, #6]
 800149a:	2300      	movs	r3, #0
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	2168      	movs	r1, #104	; 0x68
 80014a0:	f000 fbda 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
    mfxstm32l152_IO_SetIrqEvtMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_EVT_LEVEL);
 80014a4:	88fb      	ldrh	r3, [r7, #6]
 80014a6:	2200      	movs	r2, #0
 80014a8:	6839      	ldr	r1, [r7, #0]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f826 	bl	80014fc <mfxstm32l152_IO_SetIrqEvtMode>
    mfxstm32l152_IO_SetIrqTypeMode(DeviceAddr, IO_Pin, MFXSTM32L152_IRQ_GPI_TYPE_HLRE);
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	2201      	movs	r2, #1
 80014b4:	6839      	ldr	r1, [r7, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f000 f835 	bl	8001526 <mfxstm32l152_IO_SetIrqTypeMode>
    mfxstm32l152_IO_EnablePinIT(DeviceAddr, IO_Pin);  /* last to do: enable IT */
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f8bd 	bl	8001640 <mfxstm32l152_IO_EnablePinIT>
    break;
 80014c6:	e002      	b.n	80014ce <mfxstm32l152_IO_Config+0x5ca>

  default:
    error_code = (uint8_t) IO_Mode;
 80014c8:	797b      	ldrb	r3, [r7, #5]
 80014ca:	73fb      	strb	r3, [r7, #15]
    break;
 80014cc:	bf00      	nop
  }

  return error_code;
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3710      	adds	r7, #16
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <mfxstm32l152_IO_InitPin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @param  Direction: could be MFXSTM32L152_GPIO_DIR_IN or MFXSTM32L152_GPIO_DIR_OUT.
  * @retval None
  */
void mfxstm32l152_IO_InitPin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Direction)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	6039      	str	r1, [r7, #0]
 80014e2:	80fb      	strh	r3, [r7, #6]
 80014e4:	4613      	mov	r3, r2
 80014e6:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_DIR1, IO_Pin, Direction);
 80014e8:	797b      	ldrb	r3, [r7, #5]
 80014ea:	88f8      	ldrh	r0, [r7, #6]
 80014ec:	683a      	ldr	r2, [r7, #0]
 80014ee:	2160      	movs	r1, #96	; 0x60
 80014f0:	f000 fbb2 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}

080014fc <mfxstm32l152_IO_SetIrqEvtMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_LEVEL: Interrupt line is active in level model
  *   @arg  MFXSTM32L152_IRQ_GPI_EVT_EDGE: Interrupt line is active in edge model
  * @retval None
  */
void mfxstm32l152_IO_SetIrqEvtMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Evt)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	6039      	str	r1, [r7, #0]
 8001506:	80fb      	strh	r3, [r7, #6]
 8001508:	4613      	mov	r3, r2
 800150a:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_EVT1, IO_Pin, Evt);
 800150c:	797b      	ldrb	r3, [r7, #5]
 800150e:	88f8      	ldrh	r0, [r7, #6]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	214c      	movs	r1, #76	; 0x4c
 8001514:	f000 fba0 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001518:	2001      	movs	r0, #1
 800151a:	f000 feef 	bl	80022fc <MFX_IO_Delay>
}
 800151e:	bf00      	nop
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}

08001526 <mfxstm32l152_IO_SetIrqTypeMode>:
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_LLFE: Interrupt line is active in Low Level or Falling Edge
  *   @arg  MFXSTM32L152_IRQ_GPI_TYPE_HLRE: Interrupt line is active in High Level or Rising Edge
  * @retval None
  */
void mfxstm32l152_IO_SetIrqTypeMode(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t Type)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	4603      	mov	r3, r0
 800152e:	6039      	str	r1, [r7, #0]
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	4613      	mov	r3, r2
 8001534:	717b      	strb	r3, [r7, #5]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_TYPE1, IO_Pin, Type);
 8001536:	797b      	ldrb	r3, [r7, #5]
 8001538:	88f8      	ldrh	r0, [r7, #6]
 800153a:	683a      	ldr	r2, [r7, #0]
 800153c:	2150      	movs	r1, #80	; 0x50
 800153e:	f000 fb8b 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
  MFX_IO_Delay(1);
 8001542:	2001      	movs	r0, #1
 8001544:	f000 feda 	bl	80022fc <MFX_IO_Delay>
}
 8001548:	bf00      	nop
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <mfxstm32l152_IO_WritePin>:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @param PinState: The new IO pin state.
  * @retval None
  */
void mfxstm32l152_IO_WritePin(uint16_t DeviceAddr, uint32_t IO_Pin, uint8_t PinState)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
 8001556:	4603      	mov	r3, r0
 8001558:	6039      	str	r1, [r7, #0]
 800155a:	80fb      	strh	r3, [r7, #6]
 800155c:	4613      	mov	r3, r2
 800155e:	717b      	strb	r3, [r7, #5]
  /* Apply the bit value to the selected pin */
  if (PinState != 0)
 8001560:	797b      	ldrb	r3, [r7, #5]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d006      	beq.n	8001574 <mfxstm32l152_IO_WritePin+0x24>
  {
    /* Set the SET register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_SET1, IO_Pin, 1);
 8001566:	88f8      	ldrh	r0, [r7, #6]
 8001568:	2301      	movs	r3, #1
 800156a:	683a      	ldr	r2, [r7, #0]
 800156c:	216c      	movs	r1, #108	; 0x6c
 800156e:	f000 fb73 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
  else
  {
    /* Set the CLEAR register */
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
  }
}
 8001572:	e005      	b.n	8001580 <mfxstm32l152_IO_WritePin+0x30>
	mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_GPO_CLR1, IO_Pin, 1);
 8001574:	88f8      	ldrh	r0, [r7, #6]
 8001576:	2301      	movs	r3, #1
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	2170      	movs	r1, #112	; 0x70
 800157c:	f000 fb6c 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
}
 8001580:	bf00      	nop
 8001582:	3708      	adds	r7, #8
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}

08001588 <mfxstm32l152_IO_ReadPin>:
  *         of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval IO pin(s) state.
  */
uint32_t mfxstm32l152_IO_ReadPin(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	6039      	str	r1, [r7, #0]
 8001592:	80fb      	strh	r3, [r7, #6]
  uint32_t  tmp1 = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	617b      	str	r3, [r7, #20]
  uint32_t  tmp2 = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
  uint32_t  tmp3 = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]

  if(IO_Pin & 0x000000FF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <mfxstm32l152_IO_ReadPin+0x2e>
  {
    tmp1 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE1);
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	2110      	movs	r1, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f000 fe77 	bl	80022a0 <MFX_IO_Read>
 80015b2:	4603      	mov	r3, r0
 80015b4:	617b      	str	r3, [r7, #20]
  }
  if(IO_Pin & 0x0000FF00)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d006      	beq.n	80015ce <mfxstm32l152_IO_ReadPin+0x46>
  {
    tmp2 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE2);
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	2111      	movs	r1, #17
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fe6b 	bl	80022a0 <MFX_IO_Read>
 80015ca:	4603      	mov	r3, r0
 80015cc:	613b      	str	r3, [r7, #16]
  }
  if(IO_Pin & 0x00FF0000)
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d006      	beq.n	80015e6 <mfxstm32l152_IO_ReadPin+0x5e>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_GPIO_STATE3);
 80015d8:	88fb      	ldrh	r3, [r7, #6]
 80015da:	2112      	movs	r1, #18
 80015dc:	4618      	mov	r0, r3
 80015de:	f000 fe5f 	bl	80022a0 <MFX_IO_Read>
 80015e2:	4603      	mov	r3, r0
 80015e4:	60fb      	str	r3, [r7, #12]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	021a      	lsls	r2, r3, #8
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	441a      	add	r2, r3
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	041b      	lsls	r3, r3, #16
 80015f2:	4413      	add	r3, r2
 80015f4:	60fb      	str	r3, [r7, #12]

  return(tmp3 & IO_Pin);
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	4013      	ands	r3, r2
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <mfxstm32l152_IO_EnableIT>:
  * @brief  Enable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_EnableIT(uint16_t DeviceAddr)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 800160e:	f000 fdcd 	bl	80021ac <MFX_IO_ITConfig>

  /* Enable global IO IT source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 8001612:	88fb      	ldrh	r3, [r7, #6]
 8001614:	2101      	movs	r1, #1
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fb92 	bl	8000d40 <mfxstm32l152_EnableITSource>
}
 800161c:	bf00      	nop
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}

08001624 <mfxstm32l152_IO_DisableIT>:
  * @brief  Disable the global IO interrupt source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IO_DisableIT(uint16_t DeviceAddr)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	80fb      	strh	r3, [r7, #6]
  /* Disable global IO IT source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_GPIO);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	2101      	movs	r1, #1
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff fba3 	bl	8000d7e <mfxstm32l152_DisableITSource>
}
 8001638:	bf00      	nop
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <mfxstm32l152_IO_EnablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_EnablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	6039      	str	r1, [r7, #0]
 800164a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 1);
 800164c:	88f8      	ldrh	r0, [r7, #6]
 800164e:	2301      	movs	r3, #1
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	2148      	movs	r1, #72	; 0x48
 8001654:	f000 fb00 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
}
 8001658:	bf00      	nop
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <mfxstm32l152_IO_DisablePinIT>:
  *         combination of the following values:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_DisablePinIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	4603      	mov	r3, r0
 8001668:	6039      	str	r1, [r7, #0]
 800166a:	80fb      	strh	r3, [r7, #6]
  mfxstm32l152_reg24_setPinValue(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_SRC1, IO_Pin, 0);
 800166c:	88f8      	ldrh	r0, [r7, #6]
 800166e:	2300      	movs	r3, #0
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	2148      	movs	r1, #72	; 0x48
 8001674:	f000 faf0 	bl	8001c58 <mfxstm32l152_reg24_setPinValue>
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}

08001680 <mfxstm32l152_IO_ITStatus>:
  * @param  IO_Pin: The IO interrupt to be checked could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x Where x can be from 0 to 23.
  * @retval Status of the checked IO pin(s).
  */
uint32_t mfxstm32l152_IO_ITStatus(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	6039      	str	r1, [r7, #0]
 800168a:	80fb      	strh	r3, [r7, #6]
  /* Get the Interrupt status */
  uint8_t   tmp1 = 0;
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
  uint16_t  tmp2 = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	81bb      	strh	r3, [r7, #12]
  uint32_t  tmp3 = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	60bb      	str	r3, [r7, #8]

  if(IO_Pin & 0xFF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b00      	cmp	r3, #0
 800169e:	d006      	beq.n	80016ae <mfxstm32l152_IO_ITStatus+0x2e>
  {
    tmp1 = MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING1);
 80016a0:	88fb      	ldrh	r3, [r7, #6]
 80016a2:	210c      	movs	r1, #12
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fdfb 	bl	80022a0 <MFX_IO_Read>
 80016aa:	4603      	mov	r3, r0
 80016ac:	73fb      	strb	r3, [r7, #15]
  }
  if(IO_Pin & 0xFFFF00)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80016b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d006      	beq.n	80016ca <mfxstm32l152_IO_ITStatus+0x4a>
  {
    tmp2 = (uint16_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING2);
 80016bc:	88fb      	ldrh	r3, [r7, #6]
 80016be:	210d      	movs	r1, #13
 80016c0:	4618      	mov	r0, r3
 80016c2:	f000 fded 	bl	80022a0 <MFX_IO_Read>
 80016c6:	4603      	mov	r3, r0
 80016c8:	81bb      	strh	r3, [r7, #12]
  }
  if(IO_Pin & 0xFFFF0000)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	0c1b      	lsrs	r3, r3, #16
 80016ce:	041b      	lsls	r3, r3, #16
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d006      	beq.n	80016e2 <mfxstm32l152_IO_ITStatus+0x62>
  {
    tmp3 = (uint32_t) MFX_IO_Read(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_PENDING3);
 80016d4:	88fb      	ldrh	r3, [r7, #6]
 80016d6:	210e      	movs	r1, #14
 80016d8:	4618      	mov	r0, r3
 80016da:	f000 fde1 	bl	80022a0 <MFX_IO_Read>
 80016de:	4603      	mov	r3, r0
 80016e0:	60bb      	str	r3, [r7, #8]
  }

  tmp3 = tmp1 + (tmp2 << 8) + (tmp3 << 16);
 80016e2:	7bfa      	ldrb	r2, [r7, #15]
 80016e4:	89bb      	ldrh	r3, [r7, #12]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	4413      	add	r3, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	041b      	lsls	r3, r3, #16
 80016f0:	4413      	add	r3, r2
 80016f2:	60bb      	str	r3, [r7, #8]

  return(tmp3 & IO_Pin);
 80016f4:	68ba      	ldr	r2, [r7, #8]
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	4013      	ands	r3, r2
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <mfxstm32l152_IO_ClearIT>:
  * @param  IO_Pin: the IO interrupt to be cleared, could be:
  *   @arg  MFXSTM32L152_GPIO_PIN_x: Where x can be from 0 to 23.
  * @retval None
  */
void mfxstm32l152_IO_ClearIT(uint16_t DeviceAddr, uint32_t IO_Pin)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b084      	sub	sp, #16
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	6039      	str	r1, [r7, #0]
 800170c:	80fb      	strh	r3, [r7, #6]
  /* Clear the IO IT pending bit(s) by acknowledging */
  /* it cleans automatically also the Global IRQ_GPIO */
  /* normally this function is called under interrupt */
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = IO_Pin & 0x0000ff;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	73fb      	strb	r3, [r7, #15]
  pin_8_15  = IO_Pin >> 8;
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	0a1b      	lsrs	r3, r3, #8
 8001716:	73bb      	strb	r3, [r7, #14]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = IO_Pin >> 16;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	0c1b      	lsrs	r3, r3, #16
 800171c:	737b      	strb	r3, [r7, #13]

  if (pin_0_7)
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d005      	beq.n	8001730 <mfxstm32l152_IO_ClearIT+0x2e>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK1, pin_0_7);
 8001724:	7bfa      	ldrb	r2, [r7, #15]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	2154      	movs	r1, #84	; 0x54
 800172a:	4618      	mov	r0, r3
 800172c:	f000 fda4 	bl	8002278 <MFX_IO_Write>
  }
  if (pin_8_15)
 8001730:	7bbb      	ldrb	r3, [r7, #14]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <mfxstm32l152_IO_ClearIT+0x40>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK2, pin_8_15);
 8001736:	7bba      	ldrb	r2, [r7, #14]
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	2155      	movs	r1, #85	; 0x55
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fd9b 	bl	8002278 <MFX_IO_Write>
  }
  if (pin_16_23)
 8001742:	7b7b      	ldrb	r3, [r7, #13]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d005      	beq.n	8001754 <mfxstm32l152_IO_ClearIT+0x52>
  {
    MFX_IO_Write(DeviceAddr, MFXSTM32L152_REG_ADR_IRQ_GPI_ACK3, pin_16_23);
 8001748:	7b7a      	ldrb	r2, [r7, #13]
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	2156      	movs	r1, #86	; 0x56
 800174e:	4618      	mov	r0, r3
 8001750:	f000 fd92 	bl	8002278 <MFX_IO_Write>
  }
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <mfxstm32l152_IDD_Start>:
  * @brief  Launch IDD current measurement
  * @param  DeviceAddr: Device address on communication Bus
  * @retval None.
  */
void mfxstm32l152_IDD_Start(uint16_t DeviceAddr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	4603      	mov	r3, r0
 8001764:	80fb      	strh	r3, [r7, #6]
  uint8_t mode = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	73fb      	strb	r3, [r7, #15]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL);
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	b2db      	uxtb	r3, r3
 800176e:	b29b      	uxth	r3, r3
 8001770:	2180      	movs	r1, #128	; 0x80
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fd94 	bl	80022a0 <MFX_IO_Read>
 8001778:	4603      	mov	r3, r0
 800177a:	73fb      	strb	r3, [r7, #15]

  /* Set the Functionalities to be enabled */
  mode |= MFXSTM32L152_IDD_CTRL_REQ;
 800177c:	7bfb      	ldrb	r3, [r7, #15]
 800177e:	f043 0301 	orr.w	r3, r3, #1
 8001782:	73fb      	strb	r3, [r7, #15]

  /* Start measurement campaign */
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, mode);
 8001784:	88fb      	ldrh	r3, [r7, #6]
 8001786:	b2db      	uxtb	r3, r3
 8001788:	b29b      	uxth	r3, r3
 800178a:	7bfa      	ldrb	r2, [r7, #15]
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fd72 	bl	8002278 <MFX_IO_Write>
}
 8001794:	bf00      	nop
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <mfxstm32l152_IDD_Config>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @param  MfxIddConfig: Parameters depending on hardware config.
  * @retval None
  */
void mfxstm32l152_IDD_Config(uint16_t DeviceAddr, IDD_ConfigTypeDef MfxIddConfig)
{
 800179c:	b084      	sub	sp, #16
 800179e:	b590      	push	{r4, r7, lr}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	4604      	mov	r4, r0
 80017a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80017aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80017ae:	4623      	mov	r3, r4
 80017b0:	80fb      	strh	r3, [r7, #6]
  uint8_t value = 0;
 80017b2:	2300      	movs	r3, #0
 80017b4:	73fb      	strb	r3, [r7, #15]
  uint8_t mode = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	73bb      	strb	r3, [r7, #14]

  /* Get the current register value */
  mode = MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL);
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	b29b      	uxth	r3, r3
 80017c0:	2140      	movs	r1, #64	; 0x40
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fd6c 	bl	80022a0 <MFX_IO_Read>
 80017c8:	4603      	mov	r3, r0
 80017ca:	73bb      	strb	r3, [r7, #14]

  if((mode & MFXSTM32L152_IDD_EN) != MFXSTM32L152_IDD_EN)
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	f003 0304 	and.w	r3, r3, #4
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10b      	bne.n	80017ee <mfxstm32l152_IDD_Config+0x52>
  {
    /* Set the Functionalities to be enabled */
    mode |= MFXSTM32L152_IDD_EN;
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	73bb      	strb	r3, [r7, #14]

    /* Set the new register value */
    MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_SYS_CTRL, mode);
 80017de:	88fb      	ldrh	r3, [r7, #6]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	7bba      	ldrb	r2, [r7, #14]
 80017e6:	2140      	movs	r1, #64	; 0x40
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fd45 	bl	8002278 <MFX_IO_Write>
  }

  /* Control register setting: number of shunts */
  value =  ((MfxIddConfig.ShuntNbUsed << 1) & MFXSTM32L152_IDD_CTRL_SHUNT_NB);
 80017ee:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 80017f2:	005b      	lsls	r3, r3, #1
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	f003 030e 	and.w	r3, r3, #14
 80017fa:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.VrefMeasurement & MFXSTM32L152_IDD_CTRL_VREF_DIS);
 80017fc:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001800:	b25b      	sxtb	r3, r3
 8001802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001806:	b25a      	sxtb	r2, r3
 8001808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800180c:	4313      	orrs	r3, r2
 800180e:	b25b      	sxtb	r3, r3
 8001810:	73fb      	strb	r3, [r7, #15]
  value |= (MfxIddConfig.Calibration & MFXSTM32L152_IDD_CTRL_CAL_DIS);
 8001812:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001816:	b25b      	sxtb	r3, r3
 8001818:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800181c:	b25a      	sxtb	r2, r3
 800181e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001822:	4313      	orrs	r3, r2
 8001824:	b25b      	sxtb	r3, r3
 8001826:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_CTRL, value);
 8001828:	88fb      	ldrh	r3, [r7, #6]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	b29b      	uxth	r3, r3
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	2180      	movs	r1, #128	; 0x80
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fd20 	bl	8002278 <MFX_IO_Write>

  /* Idd pre delay configuration: unit and value*/
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001838:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800183c:	b25b      	sxtb	r3, r3
 800183e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001842:	b25a      	sxtb	r2, r3
          (MfxIddConfig.PreDelayValue & MFXSTM32L152_IDD_PREDELAY_VALUE);
 8001844:	f897 3041 	ldrb.w	r3, [r7, #65]	; 0x41
 8001848:	b25b      	sxtb	r3, r3
 800184a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800184e:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.PreDelayUnit & MFXSTM32L152_IDD_PREDELAY_UNIT) |
 8001850:	4313      	orrs	r3, r2
 8001852:	b25b      	sxtb	r3, r3
 8001854:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_PRE_DELAY, value);
 8001856:	88fb      	ldrh	r3, [r7, #6]
 8001858:	b2db      	uxtb	r3, r3
 800185a:	b29b      	uxth	r3, r3
 800185c:	7bfa      	ldrb	r2, [r7, #15]
 800185e:	2181      	movs	r1, #129	; 0x81
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fd09 	bl	8002278 <MFX_IO_Write>

  /* Shunt 0 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt0Value >> 8);
 8001866:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	b29b      	uxth	r3, r3
 800186c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_MSB, value);
 800186e:	88fb      	ldrh	r3, [r7, #6]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	b29b      	uxth	r3, r3
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	2182      	movs	r1, #130	; 0x82
 8001878:	4618      	mov	r0, r3
 800187a:	f000 fcfd 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt0Value);
 800187e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001880:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT0_LSB, value);
 8001882:	88fb      	ldrh	r3, [r7, #6]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	b29b      	uxth	r3, r3
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	2183      	movs	r1, #131	; 0x83
 800188c:	4618      	mov	r0, r3
 800188e:	f000 fcf3 	bl	8002278 <MFX_IO_Write>

  /* Shunt 1 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt1Value >> 8);
 8001892:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	b29b      	uxth	r3, r3
 8001898:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_MSB, value);
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	b2db      	uxtb	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	2184      	movs	r1, #132	; 0x84
 80018a4:	4618      	mov	r0, r3
 80018a6:	f000 fce7 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt1Value);
 80018aa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80018ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT1_LSB, value);
 80018ae:	88fb      	ldrh	r3, [r7, #6]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	2185      	movs	r1, #133	; 0x85
 80018b8:	4618      	mov	r0, r3
 80018ba:	f000 fcdd 	bl	8002278 <MFX_IO_Write>

  /* Shunt 2 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt2Value >> 8);
 80018be:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018c0:	0a1b      	lsrs	r3, r3, #8
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_MSB, value);
 80018c6:	88fb      	ldrh	r3, [r7, #6]
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	7bfa      	ldrb	r2, [r7, #15]
 80018ce:	2186      	movs	r1, #134	; 0x86
 80018d0:	4618      	mov	r0, r3
 80018d2:	f000 fcd1 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt2Value);
 80018d6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80018d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT2_LSB, value);
 80018da:	88fb      	ldrh	r3, [r7, #6]
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	b29b      	uxth	r3, r3
 80018e0:	7bfa      	ldrb	r2, [r7, #15]
 80018e2:	2187      	movs	r1, #135	; 0x87
 80018e4:	4618      	mov	r0, r3
 80018e6:	f000 fcc7 	bl	8002278 <MFX_IO_Write>

  /* Shunt 3 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt3Value >> 8);
 80018ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_MSB, value);
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	7bfa      	ldrb	r2, [r7, #15]
 80018fa:	2188      	movs	r1, #136	; 0x88
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fcbb 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt3Value);
 8001902:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001904:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT3_LSB, value);
 8001906:	88fb      	ldrh	r3, [r7, #6]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	b29b      	uxth	r3, r3
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	2189      	movs	r1, #137	; 0x89
 8001910:	4618      	mov	r0, r3
 8001912:	f000 fcb1 	bl	8002278 <MFX_IO_Write>

  /* Shunt 4 register value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.Shunt4Value >> 8);
 8001916:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001918:	0a1b      	lsrs	r3, r3, #8
 800191a:	b29b      	uxth	r3, r3
 800191c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_MSB, value);
 800191e:	88fb      	ldrh	r3, [r7, #6]
 8001920:	b2db      	uxtb	r3, r3
 8001922:	b29b      	uxth	r3, r3
 8001924:	7bfa      	ldrb	r2, [r7, #15]
 8001926:	218a      	movs	r1, #138	; 0x8a
 8001928:	4618      	mov	r0, r3
 800192a:	f000 fca5 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.Shunt4Value);
 800192e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001930:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNT4_LSB, value);
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	b29b      	uxth	r3, r3
 8001938:	7bfa      	ldrb	r2, [r7, #15]
 800193a:	218b      	movs	r1, #139	; 0x8b
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fc9b 	bl	8002278 <MFX_IO_Write>

  /* Shunt 0 stabilization delay */
  value = MfxIddConfig.Shunt0StabDelay;
 8001942:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001944:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH0_STABILIZATION, value);
 8001946:	88fb      	ldrh	r3, [r7, #6]
 8001948:	b2db      	uxtb	r3, r3
 800194a:	b29b      	uxth	r3, r3
 800194c:	7bfa      	ldrb	r2, [r7, #15]
 800194e:	2190      	movs	r1, #144	; 0x90
 8001950:	4618      	mov	r0, r3
 8001952:	f000 fc91 	bl	8002278 <MFX_IO_Write>

  /* Shunt 1 stabilization delay */
  value = MfxIddConfig.Shunt1StabDelay;
 8001956:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001958:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH1_STABILIZATION, value);
 800195a:	88fb      	ldrh	r3, [r7, #6]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	b29b      	uxth	r3, r3
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	2191      	movs	r1, #145	; 0x91
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc87 	bl	8002278 <MFX_IO_Write>

  /* Shunt 2 stabilization delay */
  value = MfxIddConfig.Shunt2StabDelay;
 800196a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800196c:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH2_STABILIZATION, value);
 800196e:	88fb      	ldrh	r3, [r7, #6]
 8001970:	b2db      	uxtb	r3, r3
 8001972:	b29b      	uxth	r3, r3
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	2192      	movs	r1, #146	; 0x92
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fc7d 	bl	8002278 <MFX_IO_Write>

  /* Shunt 3 stabilization delay */
  value = MfxIddConfig.Shunt3StabDelay;
 800197e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001980:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH3_STABILIZATION, value);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	b29b      	uxth	r3, r3
 8001988:	7bfa      	ldrb	r2, [r7, #15]
 800198a:	2193      	movs	r1, #147	; 0x93
 800198c:	4618      	mov	r0, r3
 800198e:	f000 fc73 	bl	8002278 <MFX_IO_Write>

  /* Shunt 4 stabilization delay */
  value = MfxIddConfig.Shunt4StabDelay;
 8001992:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001994:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SH4_STABILIZATION, value);
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	b2db      	uxtb	r3, r3
 800199a:	b29b      	uxth	r3, r3
 800199c:	7bfa      	ldrb	r2, [r7, #15]
 800199e:	2194      	movs	r1, #148	; 0x94
 80019a0:	4618      	mov	r0, r3
 80019a2:	f000 fc69 	bl	8002278 <MFX_IO_Write>

  /* Idd ampli gain value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.AmpliGain >> 8);
 80019a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019a8:	0a1b      	lsrs	r3, r3, #8
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_MSB, value);
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	218c      	movs	r1, #140	; 0x8c
 80019b8:	4618      	mov	r0, r3
 80019ba:	f000 fc5d 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.AmpliGain);
 80019be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019c0:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_GAIN_LSB, value);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	218d      	movs	r1, #141	; 0x8d
 80019cc:	4618      	mov	r0, r3
 80019ce:	f000 fc53 	bl	8002278 <MFX_IO_Write>

  /* Idd VDD min value: MSB then LSB */
  value = (uint8_t) (MfxIddConfig.VddMin >> 8);
 80019d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019d4:	0a1b      	lsrs	r3, r3, #8
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_MSB, value);
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	b29b      	uxth	r3, r3
 80019e0:	7bfa      	ldrb	r2, [r7, #15]
 80019e2:	218e      	movs	r1, #142	; 0x8e
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 fc47 	bl	8002278 <MFX_IO_Write>
  value = (uint8_t) (MfxIddConfig.VddMin);
 80019ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80019ec:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VDD_MIN_LSB, value);
 80019ee:	88fb      	ldrh	r3, [r7, #6]
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	7bfa      	ldrb	r2, [r7, #15]
 80019f6:	218f      	movs	r1, #143	; 0x8f
 80019f8:	4618      	mov	r0, r3
 80019fa:	f000 fc3d 	bl	8002278 <MFX_IO_Write>

  /* Idd number of measurements */
  value = MfxIddConfig.MeasureNb;
 80019fe:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8001a02:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_NBR_OF_MEAS, value);
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	b2db      	uxtb	r3, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	7bfa      	ldrb	r2, [r7, #15]
 8001a0c:	2196      	movs	r1, #150	; 0x96
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 fc32 	bl	8002278 <MFX_IO_Write>

  /* Idd delta delay configuration: unit and value */
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001a14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001a18:	b25b      	sxtb	r3, r3
 8001a1a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a1e:	b25a      	sxtb	r2, r3
          (MfxIddConfig.DeltaDelayValue & MFXSTM32L152_IDD_DELTADELAY_VALUE);
 8001a20:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001a2a:	b25b      	sxtb	r3, r3
  value = (MfxIddConfig.DeltaDelayUnit & MFXSTM32L152_IDD_DELTADELAY_UNIT) |
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_MEAS_DELTA_DELAY, value);
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	7bfa      	ldrb	r2, [r7, #15]
 8001a3a:	2197      	movs	r1, #151	; 0x97
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f000 fc1b 	bl	8002278 <MFX_IO_Write>

  /* Idd number of shut on board */
  value = MfxIddConfig.ShuntNbOnBoard;
 8001a42:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a46:	73fb      	strb	r3, [r7, #15]
  MFX_IO_Write((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_SHUNTS_ON_BOARD, value);
 8001a48:	88fb      	ldrh	r3, [r7, #6]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	b29b      	uxth	r3, r3
 8001a4e:	7bfa      	ldrb	r2, [r7, #15]
 8001a50:	2198      	movs	r1, #152	; 0x98
 8001a52:	4618      	mov	r0, r3
 8001a54:	f000 fc10 	bl	8002278 <MFX_IO_Write>
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a62:	b004      	add	sp, #16
 8001a64:	4770      	bx	lr

08001a66 <mfxstm32l152_IDD_GetValue>:
  * @param  DeviceAddr: Device address on communication Bus
  * @param  ReadValue: Pointer on value to be read
  * @retval Idd value in 10 nA.
  */
void mfxstm32l152_IDD_GetValue(uint16_t DeviceAddr, uint32_t *ReadValue)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	6039      	str	r1, [r7, #0]
 8001a70:	80fb      	strh	r3, [r7, #6]
  uint8_t  data[3];

  MFX_IO_ReadMultiple((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_IDD_VALUE_MSB, data, sizeof(data)) ;
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	b298      	uxth	r0, r3
 8001a78:	f107 020c 	add.w	r2, r7, #12
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	2114      	movs	r1, #20
 8001a80:	f000 fc22 	bl	80022c8 <MFX_IO_ReadMultiple>

  /* Recompose Idd current value */
  *ReadValue = (data[0] << 16) | (data[1] << 8) | data[2];
 8001a84:	7b3b      	ldrb	r3, [r7, #12]
 8001a86:	041a      	lsls	r2, r3, #16
 8001a88:	7b7b      	ldrb	r3, [r7, #13]
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	7bba      	ldrb	r2, [r7, #14]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	461a      	mov	r2, r3
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	601a      	str	r2, [r3, #0]

}
 8001a98:	bf00      	nop
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}

08001aa0 <mfxstm32l152_IDD_EnableIT>:
  * @brief  Configure mfx to enable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_EnableIT(uint16_t DeviceAddr)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001aaa:	f000 fb7f 	bl	80021ac <MFX_IO_ITConfig>

  /* Enable global IDD interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	2102      	movs	r1, #2
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff f944 	bl	8000d40 <mfxstm32l152_EnableITSource>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <mfxstm32l152_IDD_ClearIT>:
  * @brief  Clear Idd global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_IDD_ClearIT(uint16_t DeviceAddr)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
  /* Clear the global IDD interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001aca:	88fb      	ldrh	r3, [r7, #6]
 8001acc:	2102      	movs	r1, #2
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff f98f 	bl	8000df2 <mfxstm32l152_ClearGlobalIT>
}
 8001ad4:	bf00      	nop
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <mfxstm32l152_IDD_GetITStatus>:
  * @brief  get Idd interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval IDD interrupts status
  */
uint8_t mfxstm32l152_IDD_GetITStatus(uint16_t DeviceAddr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	80fb      	strh	r3, [r7, #6]
  /* Return IDD interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_IDD));
 8001ae6:	88fb      	ldrh	r3, [r7, #6]
 8001ae8:	2102      	movs	r1, #2
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f96b 	bl	8000dc6 <mfxstm32l152_GlobalITStatus>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <mfxstm32l152_IDD_DisableIT>:
  * @brief  disable Idd interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_IDD_DisableIT(uint16_t DeviceAddr)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	4603      	mov	r3, r0
 8001b02:	80fb      	strh	r3, [r7, #6]
  /* Disable global IDD interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_IDD);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	2102      	movs	r1, #2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f7ff f938 	bl	8000d7e <mfxstm32l152_DisableITSource>
}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <mfxstm32l152_Error_ReadSrc>:
  * @brief  Read Error Source.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadSrc(uint16_t DeviceAddr)
{
 8001b16:	b580      	push	{r7, lr}
 8001b18:	b082      	sub	sp, #8
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	80fb      	strh	r3, [r7, #6]
  /* Get the current source register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_SRC));
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	2103      	movs	r1, #3
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fbb9 	bl	80022a0 <MFX_IO_Read>
 8001b2e:	4603      	mov	r3, r0
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3708      	adds	r7, #8
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}

08001b38 <mfxstm32l152_Error_ReadMsg>:
  * @brief  Read Error Message
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error message code with error source
  */
uint8_t mfxstm32l152_Error_ReadMsg(uint16_t DeviceAddr)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* Get the current message register value */
  return(MFX_IO_Read((uint8_t) DeviceAddr, MFXSTM32L152_REG_ADR_ERROR_MSG));
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	2104      	movs	r1, #4
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 fba8 	bl	80022a0 <MFX_IO_Read>
 8001b50:	4603      	mov	r3, r0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <mfxstm32l152_Error_EnableIT>:
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */

void mfxstm32l152_Error_EnableIT(uint16_t DeviceAddr)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	4603      	mov	r3, r0
 8001b62:	80fb      	strh	r3, [r7, #6]
  MFX_IO_ITConfig();
 8001b64:	f000 fb22 	bl	80021ac <MFX_IO_ITConfig>

  /* Enable global Error interrupt source */
  mfxstm32l152_EnableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	2104      	movs	r1, #4
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff f8e7 	bl	8000d40 <mfxstm32l152_EnableITSource>
}
 8001b72:	bf00      	nop
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <mfxstm32l152_Error_ClearIT>:
  * @brief  Clear Error global interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None
  */
void mfxstm32l152_Error_ClearIT(uint16_t DeviceAddr)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b082      	sub	sp, #8
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	4603      	mov	r3, r0
 8001b82:	80fb      	strh	r3, [r7, #6]
  /* Clear the global Error interrupt source */
  mfxstm32l152_ClearGlobalIT(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	2104      	movs	r1, #4
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff f932 	bl	8000df2 <mfxstm32l152_ClearGlobalIT>
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <mfxstm32l152_Error_GetITStatus>:
  * @brief  get Error interrupt status
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Error interrupts status
  */
uint8_t mfxstm32l152_Error_GetITStatus(uint16_t DeviceAddr)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	80fb      	strh	r3, [r7, #6]
  /* Return Error interrupt status */
  return(mfxstm32l152_GlobalITStatus(DeviceAddr, MFXSTM32L152_IRQ_ERROR));
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	2104      	movs	r1, #4
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff f90e 	bl	8000dc6 <mfxstm32l152_GlobalITStatus>
 8001baa:	4603      	mov	r3, r0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3708      	adds	r7, #8
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}

08001bb4 <mfxstm32l152_Error_DisableIT>:
  * @brief  disable Error interrupt
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval None.
  */
void mfxstm32l152_Error_DisableIT(uint16_t DeviceAddr)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
  /* Disable global Error interrupt source */
  mfxstm32l152_DisableITSource(DeviceAddr, MFXSTM32L152_IRQ_ERROR);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	2104      	movs	r1, #4
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff f8db 	bl	8000d7e <mfxstm32l152_DisableITSource>
}
 8001bc8:	bf00      	nop
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <mfxstm32l152_GetInstance>:
  *         and return its index
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of the device instance if registered, 0xFF if not.
  */
static uint8_t mfxstm32l152_GetInstance(uint16_t DeviceAddr)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e00b      	b.n	8001bf8 <mfxstm32l152_GetInstance+0x28>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001be0:	7bfb      	ldrb	r3, [r7, #15]
 8001be2:	4a0a      	ldr	r2, [pc, #40]	; (8001c0c <mfxstm32l152_GetInstance+0x3c>)
 8001be4:	5cd3      	ldrb	r3, [r2, r3]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	88fa      	ldrh	r2, [r7, #6]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d101      	bne.n	8001bf2 <mfxstm32l152_GetInstance+0x22>
    {
      return idx;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	e006      	b.n	8001c00 <mfxstm32l152_GetInstance+0x30>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	73fb      	strb	r3, [r7, #15]
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d9f0      	bls.n	8001be0 <mfxstm32l152_GetInstance+0x10>
    }
  }

  return 0xFF;
 8001bfe:	23ff      	movs	r3, #255	; 0xff
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3714      	adds	r7, #20
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	20000108 	.word	0x20000108

08001c10 <mfxstm32l152_ReleaseInstance>:
  * @brief  Release registered device instance
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Index of released device instance, 0xFF if not.
  */
static uint8_t mfxstm32l152_ReleaseInstance(uint16_t DeviceAddr)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	80fb      	strh	r3, [r7, #6]
  uint8_t idx;

  /* Check for all the registered instances */
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	73fb      	strb	r3, [r7, #15]
 8001c1e:	e00f      	b.n	8001c40 <mfxstm32l152_ReleaseInstance+0x30>
  {
    if(mfxstm32l152[idx] == DeviceAddr)
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	4a0c      	ldr	r2, [pc, #48]	; (8001c54 <mfxstm32l152_ReleaseInstance+0x44>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	88fa      	ldrh	r2, [r7, #6]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d105      	bne.n	8001c3a <mfxstm32l152_ReleaseInstance+0x2a>
    {
      mfxstm32l152[idx] = 0;
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	4a08      	ldr	r2, [pc, #32]	; (8001c54 <mfxstm32l152_ReleaseInstance+0x44>)
 8001c32:	2100      	movs	r1, #0
 8001c34:	54d1      	strb	r1, [r2, r3]
      return idx;
 8001c36:	7bfb      	ldrb	r3, [r7, #15]
 8001c38:	e006      	b.n	8001c48 <mfxstm32l152_ReleaseInstance+0x38>
  for(idx = 0; idx < MFXSTM32L152_MAX_INSTANCE ; idx ++)
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	7bfb      	ldrb	r3, [r7, #15]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d9ec      	bls.n	8001c20 <mfxstm32l152_ReleaseInstance+0x10>
    }
  }
  return 0xFF;
 8001c46:	23ff      	movs	r3, #255	; 0xff
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr
 8001c54:	20000108 	.word	0x20000108

08001c58 <mfxstm32l152_reg24_setPinValue>:
  * @param  PinPosition: Pin [0:23]
  * @param  PinValue: 0/1
  * @retval None
  */
void mfxstm32l152_reg24_setPinValue(uint16_t DeviceAddr, uint8_t RegisterAddr, uint32_t PinPosition, uint8_t PinValue )
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	603a      	str	r2, [r7, #0]
 8001c60:	461a      	mov	r2, r3
 8001c62:	4603      	mov	r3, r0
 8001c64:	80fb      	strh	r3, [r7, #6]
 8001c66:	460b      	mov	r3, r1
 8001c68:	717b      	strb	r3, [r7, #5]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	713b      	strb	r3, [r7, #4]
  uint8_t tmp = 0;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
  uint8_t pin_0_7, pin_8_15, pin_16_23;

  pin_0_7   = PinPosition & 0x0000ff;
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	73bb      	strb	r3, [r7, #14]
  pin_8_15  = PinPosition >> 8;
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	0a1b      	lsrs	r3, r3, #8
 8001c7a:	737b      	strb	r3, [r7, #13]
  pin_8_15   = pin_8_15 & 0x00ff;
  pin_16_23 = PinPosition >> 16;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	0c1b      	lsrs	r3, r3, #16
 8001c80:	733b      	strb	r3, [r7, #12]

  if (pin_0_7)
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01e      	beq.n	8001cc6 <mfxstm32l152_reg24_setPinValue+0x6e>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr);
 8001c88:	797a      	ldrb	r2, [r7, #5]
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	4611      	mov	r1, r2
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f000 fb06 	bl	80022a0 <MFX_IO_Read>
 8001c94:	4603      	mov	r3, r0
 8001c96:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001c98:	793b      	ldrb	r3, [r7, #4]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d004      	beq.n	8001ca8 <mfxstm32l152_reg24_setPinValue+0x50>
    {
      tmp |= (uint8_t)pin_0_7;
 8001c9e:	7bfa      	ldrb	r2, [r7, #15]
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	73fb      	strb	r3, [r7, #15]
 8001ca6:	e008      	b.n	8001cba <mfxstm32l152_reg24_setPinValue+0x62>
    }
    else
    {
      tmp &= ~(uint8_t)pin_0_7;
 8001ca8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001cac:	43db      	mvns	r3, r3
 8001cae:	b25a      	sxtb	r2, r3
 8001cb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	b25b      	sxtb	r3, r3
 8001cb8:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr, tmp);
 8001cba:	7bfa      	ldrb	r2, [r7, #15]
 8001cbc:	7979      	ldrb	r1, [r7, #5]
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fad9 	bl	8002278 <MFX_IO_Write>
  }

  if (pin_8_15)
 8001cc6:	7b7b      	ldrb	r3, [r7, #13]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d022      	beq.n	8001d12 <mfxstm32l152_reg24_setPinValue+0xba>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+1);
 8001ccc:	797b      	ldrb	r3, [r7, #5]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	b2da      	uxtb	r2, r3
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f000 fae2 	bl	80022a0 <MFX_IO_Read>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001ce0:	793b      	ldrb	r3, [r7, #4]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d004      	beq.n	8001cf0 <mfxstm32l152_reg24_setPinValue+0x98>
    {
      tmp |= (uint8_t)pin_8_15;
 8001ce6:	7bfa      	ldrb	r2, [r7, #15]
 8001ce8:	7b7b      	ldrb	r3, [r7, #13]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	e008      	b.n	8001d02 <mfxstm32l152_reg24_setPinValue+0xaa>
    }
    else
    {
      tmp &= ~(uint8_t)pin_8_15;
 8001cf0:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	b25b      	sxtb	r3, r3
 8001d00:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+1, tmp);
 8001d02:	797b      	ldrb	r3, [r7, #5]
 8001d04:	3301      	adds	r3, #1
 8001d06:	b2d9      	uxtb	r1, r3
 8001d08:	7bfa      	ldrb	r2, [r7, #15]
 8001d0a:	88fb      	ldrh	r3, [r7, #6]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 fab3 	bl	8002278 <MFX_IO_Write>
  }

  if (pin_16_23)
 8001d12:	7b3b      	ldrb	r3, [r7, #12]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d022      	beq.n	8001d5e <mfxstm32l152_reg24_setPinValue+0x106>
  {
    /* Get the current register value */
    tmp = MFX_IO_Read(DeviceAddr, RegisterAddr+2);
 8001d18:	797b      	ldrb	r3, [r7, #5]
 8001d1a:	3302      	adds	r3, #2
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	88fb      	ldrh	r3, [r7, #6]
 8001d20:	4611      	mov	r1, r2
 8001d22:	4618      	mov	r0, r3
 8001d24:	f000 fabc 	bl	80022a0 <MFX_IO_Read>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	73fb      	strb	r3, [r7, #15]

    /* Set the selected pin direction */
    if (PinValue != 0)
 8001d2c:	793b      	ldrb	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <mfxstm32l152_reg24_setPinValue+0xe4>
    {
      tmp |= (uint8_t)pin_16_23;
 8001d32:	7bfa      	ldrb	r2, [r7, #15]
 8001d34:	7b3b      	ldrb	r3, [r7, #12]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	e008      	b.n	8001d4e <mfxstm32l152_reg24_setPinValue+0xf6>
    }
    else
    {
      tmp &= ~(uint8_t)pin_16_23;
 8001d3c:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	b25a      	sxtb	r2, r3
 8001d44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	b25b      	sxtb	r3, r3
 8001d4c:	73fb      	strb	r3, [r7, #15]
    }

    /* Set the new register value */
    MFX_IO_Write(DeviceAddr, RegisterAddr+2, tmp);
 8001d4e:	797b      	ldrb	r3, [r7, #5]
 8001d50:	3302      	adds	r3, #2
 8001d52:	b2d9      	uxtb	r1, r3
 8001d54:	7bfa      	ldrb	r2, [r7, #15]
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f000 fa8d 	bl	8002278 <MFX_IO_Write>
  }
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <BSP_ErrorHandler>:
/**
  * @}
  */

__weak void BSP_ErrorHandler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  while (1);
 8001d6a:	e7fe      	b.n	8001d6a <BSP_ErrorHandler+0x4>

08001d6c <I2C2_Init>:
/**
  * @brief Discovery I2C2 Bus initialization
  * @retval None
  */
void I2C2_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) == HAL_I2C_STATE_RESET)
 8001d70:	4812      	ldr	r0, [pc, #72]	; (8001dbc <I2C2_Init+0x50>)
 8001d72:	f002 f87c 	bl	8003e6e <HAL_I2C_GetState>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d11d      	bne.n	8001db8 <I2C2_Init+0x4c>
  {
    I2c2Handle.Instance              = DISCOVERY_I2C2;
 8001d7c:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <I2C2_Init+0x50>)
 8001d7e:	4a10      	ldr	r2, [pc, #64]	; (8001dc0 <I2C2_Init+0x54>)
 8001d80:	601a      	str	r2, [r3, #0]
    I2c2Handle.Init.Timing           = DISCOVERY_I2C2_TIMING;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <I2C2_Init+0x50>)
 8001d84:	4a0f      	ldr	r2, [pc, #60]	; (8001dc4 <I2C2_Init+0x58>)
 8001d86:	605a      	str	r2, [r3, #4]
    I2c2Handle.Init.OwnAddress1      = 0x70;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <I2C2_Init+0x50>)
 8001d8a:	2270      	movs	r2, #112	; 0x70
 8001d8c:	609a      	str	r2, [r3, #8]
    I2c2Handle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <I2C2_Init+0x50>)
 8001d90:	2201      	movs	r2, #1
 8001d92:	60da      	str	r2, [r3, #12]
    I2c2Handle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <I2C2_Init+0x50>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]
    I2c2Handle.Init.OwnAddress2      = 0xFF;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <I2C2_Init+0x50>)
 8001d9c:	22ff      	movs	r2, #255	; 0xff
 8001d9e:	615a      	str	r2, [r3, #20]
    I2c2Handle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <I2C2_Init+0x50>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
    I2c2Handle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8001da6:	4b05      	ldr	r3, [pc, #20]	; (8001dbc <I2C2_Init+0x50>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2C2_MspInit(&I2c2Handle);
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <I2C2_Init+0x50>)
 8001dae:	f000 f80b 	bl	8001dc8 <I2C2_MspInit>
    HAL_I2C_Init(&I2c2Handle);
 8001db2:	4802      	ldr	r0, [pc, #8]	; (8001dbc <I2C2_Init+0x50>)
 8001db4:	f001 fc53 	bl	800365e <HAL_I2C_Init>
  }
}
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	2000010c 	.word	0x2000010c
 8001dc0:	40005800 	.word	0x40005800
 8001dc4:	40403e5d 	.word	0x40403e5d

08001dc8 <I2C2_MspInit>:
  * @brief Discovery I2C2 MSP Initialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspInit(I2C_HandleTypeDef *hi2c)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b0ae      	sub	sp, #184	; 0xb8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStructure;
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;

  if (hi2c->Instance == DISCOVERY_I2C2)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a37      	ldr	r2, [pc, #220]	; (8001eb4 <I2C2_MspInit+0xec>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d168      	bne.n	8001eac <I2C2_MspInit+0xe4>
  {
    /*##-1- Configure the Discovery I2C2 clock source. The clock is derived from the SYSCLK #*/
    RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	61bb      	str	r3, [r7, #24]
    RCC_PeriphCLKInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_SYSCLK;
 8001dde:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001de2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 8001de4:	f107 0318 	add.w	r3, r7, #24
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 f9d7 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>

    /*##-2- Configure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001dee:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df2:	4a31      	ldr	r2, [pc, #196]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001df4:	f043 0302 	orr.w	r3, r3, #2
 8001df8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dfa:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697b      	ldr	r3, [r7, #20]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a2b      	ldr	r2, [pc, #172]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b29      	ldr	r3, [pc, #164]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e1a:	613b      	str	r3, [r7, #16]
 8001e1c:	693b      	ldr	r3, [r7, #16]

    /* Configure I2C Rx/Tx as alternate function  */
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SCL_PIN;
 8001e1e:	2310      	movs	r3, #16
 8001e20:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStructure.Mode      = GPIO_MODE_AF_OD;
 8001e24:	2312      	movs	r3, #18
 8001e26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStructure.Pull      = /*GPIO_NOPULL*/ GPIO_PULLUP;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStructure.Speed     = /*GPIO_SPEED_MEDIUM*/ GPIO_SPEED_FREQ_VERY_HIGH;
 8001e30:	2303      	movs	r3, #3
 8001e32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStructure.Alternate = DISCOVERY_I2C2_SCL_SDA_AF;
 8001e36:	2304      	movs	r3, #4
 8001e38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(DISCOVERY_I2C2_SCL_GPIO_PORT, &GPIO_InitStructure);
 8001e3c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e40:	4619      	mov	r1, r3
 8001e42:	481e      	ldr	r0, [pc, #120]	; (8001ebc <I2C2_MspInit+0xf4>)
 8001e44:	f001 f8fc 	bl	8003040 <HAL_GPIO_Init>
    GPIO_InitStructure.Pin       = DISCOVERY_I2C2_SDA_PIN;
 8001e48:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(DISCOVERY_I2C2_SDA_GPIO_PORT, &GPIO_InitStructure);
 8001e50:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001e54:	4619      	mov	r1, r3
 8001e56:	481a      	ldr	r0, [pc, #104]	; (8001ec0 <I2C2_MspInit+0xf8>)
 8001e58:	f001 f8f2 	bl	8003040 <HAL_GPIO_Init>

    /*##-3- Configure the Discovery I2C2 peripheral #############################*/
    /* Enable Discovery_I2C2 clock */
    DISCOVERY_I2C2_CLK_ENABLE();
 8001e5c:	4b16      	ldr	r3, [pc, #88]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e60:	4a15      	ldr	r2, [pc, #84]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e62:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e66:	6593      	str	r3, [r2, #88]	; 0x58
 8001e68:	4b13      	ldr	r3, [pc, #76]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]

    /* Force and release the I2C Peripheral Clock Reset */
    DISCOVERY_I2C2_FORCE_RESET();
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e78:	4a0f      	ldr	r2, [pc, #60]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e7e:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	4a0c      	ldr	r2, [pc, #48]	; (8001eb8 <I2C2_MspInit+0xf0>)
 8001e86:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e8a:	6393      	str	r3, [r2, #56]	; 0x38

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_EV_IRQn, 0x00, 0);
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	2100      	movs	r1, #0
 8001e90:	2021      	movs	r0, #33	; 0x21
 8001e92:	f000 fea5 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001e96:	2021      	movs	r0, #33	; 0x21
 8001e98:	f000 febe 	bl	8002c18 <HAL_NVIC_EnableIRQ>

    /* Enable and set Discovery I2C2 Interrupt to the highest priority */
    HAL_NVIC_SetPriority(DISCOVERY_I2C2_ER_IRQn, 0x00, 0);
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2022      	movs	r0, #34	; 0x22
 8001ea2:	f000 fe9d 	bl	8002be0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001ea6:	2022      	movs	r0, #34	; 0x22
 8001ea8:	f000 feb6 	bl	8002c18 <HAL_NVIC_EnableIRQ>
  }
}
 8001eac:	bf00      	nop
 8001eae:	37b8      	adds	r7, #184	; 0xb8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40005800 	.word	0x40005800
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	48001c00 	.word	0x48001c00
 8001ec0:	48000400 	.word	0x48000400

08001ec4 <I2C2_DeInit>:
/**
  * @brief Discovery I2C2 Bus Deinitialization
  * @retval None
  */
void I2C2_DeInit(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	af00      	add	r7, sp, #0
  if (HAL_I2C_GetState(&I2c2Handle) != HAL_I2C_STATE_RESET)
 8001ec8:	4806      	ldr	r0, [pc, #24]	; (8001ee4 <I2C2_DeInit+0x20>)
 8001eca:	f001 ffd0 	bl	8003e6e <HAL_I2C_GetState>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <I2C2_DeInit+0x1c>
  {
    /* DeInit the I2C */
    HAL_I2C_DeInit(&I2c2Handle);
 8001ed4:	4803      	ldr	r0, [pc, #12]	; (8001ee4 <I2C2_DeInit+0x20>)
 8001ed6:	f001 fc51 	bl	800377c <HAL_I2C_DeInit>
    I2C2_MspDeInit(&I2c2Handle);
 8001eda:	4802      	ldr	r0, [pc, #8]	; (8001ee4 <I2C2_DeInit+0x20>)
 8001edc:	f000 f804 	bl	8001ee8 <I2C2_MspDeInit>
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	2000010c 	.word	0x2000010c

08001ee8 <I2C2_MspDeInit>:
  * @brief Discovery I2C2 MSP DeInitialization
  * @param hi2c: I2C2 handle
  * @retval None
  */
static void I2C2_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if (hi2c->Instance == DISCOVERY_I2C2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a1f      	ldr	r2, [pc, #124]	; (8001f74 <I2C2_MspDeInit+0x8c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d138      	bne.n	8001f6c <I2C2_MspDeInit+0x84>
  {
    /*##-1- Unconfigure the GPIOs ################################################*/
    /* Enable GPIO clock */
    DISCOVERY_I2C2_SDA_GPIO_CLK_ENABLE();
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001efe:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f06:	4b1c      	ldr	r3, [pc, #112]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_I2C2_SCL_GPIO_CLK_ENABLE();
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f1e:	4b16      	ldr	r3, [pc, #88]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f26:	60bb      	str	r3, [r7, #8]
 8001f28:	68bb      	ldr	r3, [r7, #8]

    /* Configure I2C Rx/Tx as alternate function  */
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SCL_GPIO_PORT, DISCOVERY_I2C2_SCL_PIN);
 8001f2a:	2110      	movs	r1, #16
 8001f2c:	4813      	ldr	r0, [pc, #76]	; (8001f7c <I2C2_MspDeInit+0x94>)
 8001f2e:	f001 fa19 	bl	8003364 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(DISCOVERY_I2C2_SDA_GPIO_PORT,  DISCOVERY_I2C2_SDA_PIN);
 8001f32:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f36:	4812      	ldr	r0, [pc, #72]	; (8001f80 <I2C2_MspDeInit+0x98>)
 8001f38:	f001 fa14 	bl	8003364 <HAL_GPIO_DeInit>

    /*##-2- Unconfigure the Discovery I2C2 peripheral ############################*/
    /* Force and release I2C Peripheral */
    DISCOVERY_I2C2_FORCE_RESET();
 8001f3c:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f40:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f46:	6393      	str	r3, [r2, #56]	; 0x38
    DISCOVERY_I2C2_RELEASE_RESET();
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f4e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f52:	6393      	str	r3, [r2, #56]	; 0x38

    /* Disable Discovery I2C2 clock */
    DISCOVERY_I2C2_CLK_DISABLE();
 8001f54:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f58:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <I2C2_MspDeInit+0x90>)
 8001f5a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001f5e:	6593      	str	r3, [r2, #88]	; 0x58

    /* Disable Discovery I2C2 interrupts */
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_EV_IRQn);
 8001f60:	2021      	movs	r0, #33	; 0x21
 8001f62:	f000 fe67 	bl	8002c34 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DISCOVERY_I2C2_ER_IRQn);
 8001f66:	2022      	movs	r0, #34	; 0x22
 8001f68:	f000 fe64 	bl	8002c34 <HAL_NVIC_DisableIRQ>
  }
}
 8001f6c:	bf00      	nop
 8001f6e:	3710      	adds	r7, #16
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	40005800 	.word	0x40005800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	48001c00 	.word	0x48001c00
 8001f80:	48000400 	.word	0x48000400

08001f84 <I2C2_WriteData>:
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @param  Value: The target register value to be written
  * @retval None
  */
static void I2C2_WriteData(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t Value)
{
 8001f84:	b590      	push	{r4, r7, lr}
 8001f86:	b089      	sub	sp, #36	; 0x24
 8001f88:	af04      	add	r7, sp, #16
 8001f8a:	4604      	mov	r4, r0
 8001f8c:	4608      	mov	r0, r1
 8001f8e:	4611      	mov	r1, r2
 8001f90:	461a      	mov	r2, r3
 8001f92:	4623      	mov	r3, r4
 8001f94:	80fb      	strh	r3, [r7, #6]
 8001f96:	4603      	mov	r3, r0
 8001f98:	80bb      	strh	r3, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	807b      	strh	r3, [r7, #2]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa6:	b672      	cpsid	i
}
 8001fa8:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Write(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, &Value, 1, I2c2Timeout);
 8001faa:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <I2C2_WriteData+0x5c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	8878      	ldrh	r0, [r7, #2]
 8001fb0:	88ba      	ldrh	r2, [r7, #4]
 8001fb2:	88f9      	ldrh	r1, [r7, #6]
 8001fb4:	9302      	str	r3, [sp, #8]
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	9301      	str	r3, [sp, #4]
 8001fba:	1c7b      	adds	r3, r7, #1
 8001fbc:	9300      	str	r3, [sp, #0]
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	4808      	ldr	r0, [pc, #32]	; (8001fe4 <I2C2_WriteData+0x60>)
 8001fc2:	f001 fc1f 	bl	8003804 <HAL_I2C_Mem_Write>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fca:	b662      	cpsie	i
}
 8001fcc:	bf00      	nop

  __enable_irq();


  /* Check the communication status */
  if (status != HAL_OK)
 8001fce:	7bfb      	ldrb	r3, [r7, #15]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <I2C2_WriteData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8001fd4:	f000 f890 	bl	80020f8 <I2C2_Error>
  }
}
 8001fd8:	bf00      	nop
 8001fda:	3714      	adds	r7, #20
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd90      	pop	{r4, r7, pc}
 8001fe0:	20000078 	.word	0x20000078
 8001fe4:	2000010c 	.word	0x2000010c

08001fe8 <I2C2_ReadData>:
  * @param  Reg: The target register address to read
  * @param  RegSize: The target register size (can be 8BIT or 16BIT)
  * @retval read register value
  */
static uint8_t I2C2_ReadData(uint16_t Addr, uint16_t Reg, uint16_t RegSize)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b088      	sub	sp, #32
 8001fec:	af04      	add	r7, sp, #16
 8001fee:	4603      	mov	r3, r0
 8001ff0:	80fb      	strh	r3, [r7, #6]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	80bb      	strh	r3, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8001ffe:	2300      	movs	r3, #0
 8002000:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002002:	b672      	cpsid	i
}
 8002004:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, Reg, RegSize, &value, 1, I2c2Timeout);
 8002006:	4b10      	ldr	r3, [pc, #64]	; (8002048 <I2C2_ReadData+0x60>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	8878      	ldrh	r0, [r7, #2]
 800200c:	88ba      	ldrh	r2, [r7, #4]
 800200e:	88f9      	ldrh	r1, [r7, #6]
 8002010:	9302      	str	r3, [sp, #8]
 8002012:	2301      	movs	r3, #1
 8002014:	9301      	str	r3, [sp, #4]
 8002016:	f107 030e 	add.w	r3, r7, #14
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4603      	mov	r3, r0
 800201e:	480b      	ldr	r0, [pc, #44]	; (800204c <I2C2_ReadData+0x64>)
 8002020:	f001 fd04 	bl	8003a2c <HAL_I2C_Mem_Read>
 8002024:	4603      	mov	r3, r0
 8002026:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002028:	b662      	cpsie	i
}
 800202a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <I2C2_ReadData+0x54>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002032:	f000 f861 	bl	80020f8 <I2C2_Error>
    HAL_Delay(200);
 8002036:	20c8      	movs	r0, #200	; 0xc8
 8002038:	f000 fcd2 	bl	80029e0 <HAL_Delay>
  }

  return value;
 800203c:	7bbb      	ldrb	r3, [r7, #14]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000078 	.word	0x20000078
 800204c:	2000010c 	.word	0x2000010c

08002050 <I2C2_isDeviceReady>:

static uint8_t I2C2_isDeviceReady(uint16_t Addr, uint32_t trial)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	6039      	str	r1, [r7, #0]
 800205a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	73fb      	strb	r3, [r7, #15]
  uint8_t value = 0x0;
 8002060:	2300      	movs	r3, #0
 8002062:	73bb      	strb	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8002064:	b672      	cpsid	i
}
 8002066:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_IsDeviceReady(&I2c2Handle, Addr, trial, 50);
 8002068:	88f9      	ldrh	r1, [r7, #6]
 800206a:	2332      	movs	r3, #50	; 0x32
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	480a      	ldr	r0, [pc, #40]	; (8002098 <I2C2_isDeviceReady+0x48>)
 8002070:	f001 fdf6 	bl	8003c60 <HAL_I2C_IsDeviceReady>
 8002074:	4603      	mov	r3, r0
 8002076:	73fb      	strb	r3, [r7, #15]
  __ASM volatile ("cpsie i" : : : "memory");
 8002078:	b662      	cpsie	i
}
 800207a:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 800207c:	7bfb      	ldrb	r3, [r7, #15]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d004      	beq.n	800208c <I2C2_isDeviceReady+0x3c>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 8002082:	f000 f839 	bl	80020f8 <I2C2_Error>
    HAL_Delay(200);
 8002086:	20c8      	movs	r0, #200	; 0xc8
 8002088:	f000 fcaa 	bl	80029e0 <HAL_Delay>
  }

  return value;
 800208c:	7bbb      	ldrb	r3, [r7, #14]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2000010c 	.word	0x2000010c

0800209c <I2C2_ReadBuffer>:
  * @param  pBuffer: pointer to read data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
static HAL_StatusTypeDef I2C2_ReadBuffer(uint16_t Addr, uint16_t Reg, uint16_t RegSize, uint8_t *pBuffer, uint16_t Length)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af04      	add	r7, sp, #16
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	4603      	mov	r3, r0
 80020a6:	81fb      	strh	r3, [r7, #14]
 80020a8:	460b      	mov	r3, r1
 80020aa:	81bb      	strh	r3, [r7, #12]
 80020ac:	4613      	mov	r3, r2
 80020ae:	817b      	strh	r3, [r7, #10]
  HAL_StatusTypeDef status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsid i" : : : "memory");
 80020b4:	b672      	cpsid	i
}
 80020b6:	bf00      	nop

  __disable_irq();

  status = HAL_I2C_Mem_Read(&I2c2Handle, Addr, (uint16_t)Reg, RegSize, pBuffer, Length, I2c2Timeout);
 80020b8:	4b0d      	ldr	r3, [pc, #52]	; (80020f0 <I2C2_ReadBuffer+0x54>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	8978      	ldrh	r0, [r7, #10]
 80020be:	89ba      	ldrh	r2, [r7, #12]
 80020c0:	89f9      	ldrh	r1, [r7, #14]
 80020c2:	9302      	str	r3, [sp, #8]
 80020c4:	8c3b      	ldrh	r3, [r7, #32]
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	4603      	mov	r3, r0
 80020ce:	4809      	ldr	r0, [pc, #36]	; (80020f4 <I2C2_ReadBuffer+0x58>)
 80020d0:	f001 fcac 	bl	8003a2c <HAL_I2C_Mem_Read>
 80020d4:	4603      	mov	r3, r0
 80020d6:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("cpsie i" : : : "memory");
 80020d8:	b662      	cpsie	i
}
 80020da:	bf00      	nop

  __enable_irq();

  /* Check the communication status */
  if (status != HAL_OK)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <I2C2_ReadBuffer+0x4a>
  {
    /* Re-Initiaize the BUS */
    I2C2_Error();
 80020e2:	f000 f809 	bl	80020f8 <I2C2_Error>
  }

  return status;
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	20000078 	.word	0x20000078
 80020f4:	2000010c 	.word	0x2000010c

080020f8 <I2C2_Error>:
/**
  * @brief Discovery I2C2 error treatment function
  * @retval None
  */
static void I2C2_Error(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	af00      	add	r7, sp, #0
  BSP_ErrorHandler();
 80020fc:	f7ff fe33 	bl	8001d66 <BSP_ErrorHandler>

  /* De-initialize the I2C communication BUS */
  HAL_I2C_DeInit(&I2c2Handle);
 8002100:	4803      	ldr	r0, [pc, #12]	; (8002110 <I2C2_Error+0x18>)
 8002102:	f001 fb3b 	bl	800377c <HAL_I2C_DeInit>

  /* Re- Initiaize the I2C communication BUS */
  I2C2_Init();
 8002106:	f7ff fe31 	bl	8001d6c <I2C2_Init>
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	2000010c 	.word	0x2000010c

08002114 <MFX_IO_Init>:
/**
  * @brief  Initializes MFX low level.
  * @retval None
  */
void MFX_IO_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* I2C2 init */
  I2C2_Init();
 8002118:	f7ff fe28 	bl	8001d6c <I2C2_Init>

  /* Wait for device ready */
  if (I2C2_isDeviceReady(IO1_I2C_ADDRESS, 4) != HAL_OK)
 800211c:	2104      	movs	r1, #4
 800211e:	2084      	movs	r0, #132	; 0x84
 8002120:	f7ff ff96 	bl	8002050 <I2C2_isDeviceReady>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MFX_IO_Init+0x1a>
  {
    BSP_ErrorHandler();
 800212a:	f7ff fe1c 	bl	8001d66 <BSP_ErrorHandler>
  }
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <MFX_IO_DeInit>:
/**
  * @brief  Deinitializes MFX low level.
  * @retval None
  */
void MFX_IO_DeInit(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b088      	sub	sp, #32
 8002138:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800213a:	4b19      	ldr	r3, [pc, #100]	; (80021a0 <MFX_IO_DeInit+0x6c>)
 800213c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800213e:	4a18      	ldr	r2, [pc, #96]	; (80021a0 <MFX_IO_DeInit+0x6c>)
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002146:	4b16      	ldr	r3, [pc, #88]	; (80021a0 <MFX_IO_DeInit+0x6c>)
 8002148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002152:	2340      	movs	r3, #64	; 0x40
 8002154:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8002156:	2301      	movs	r3, #1
 8002158:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215a:	2300      	movs	r3, #0
 800215c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_PULLDOWN;
 800215e:	2302      	movs	r3, #2
 8002160:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002162:	f107 030c 	add.w	r3, r7, #12
 8002166:	4619      	mov	r1, r3
 8002168:	480e      	ldr	r0, [pc, #56]	; (80021a4 <MFX_IO_DeInit+0x70>)
 800216a:	f000 ff69 	bl	8003040 <HAL_GPIO_Init>

  /* DeInit interrupt pin : disable IRQ before to avoid spurious interrupt */
  HAL_NVIC_DisableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 800216e:	2017      	movs	r0, #23
 8002170:	f000 fd60 	bl	8002c34 <HAL_NVIC_DisableIRQ>
  MFX_INT_GPIO_CLK_ENABLE();
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MFX_IO_DeInit+0x6c>)
 8002176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002178:	4a09      	ldr	r2, [pc, #36]	; (80021a0 <MFX_IO_DeInit+0x6c>)
 800217a:	f043 0304 	orr.w	r3, r3, #4
 800217e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <MFX_IO_DeInit+0x6c>)
 8002182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_DeInit(MFX_INT_GPIO_PORT, MFX_INT_PIN);
 800218c:	2120      	movs	r1, #32
 800218e:	4806      	ldr	r0, [pc, #24]	; (80021a8 <MFX_IO_DeInit+0x74>)
 8002190:	f001 f8e8 	bl	8003364 <HAL_GPIO_DeInit>

  /* I2C2 Deinit */
  I2C2_DeInit();
 8002194:	f7ff fe96 	bl	8001ec4 <I2C2_DeInit>
}
 8002198:	bf00      	nop
 800219a:	3720      	adds	r7, #32
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	48001c00 	.word	0x48001c00
 80021a8:	48000800 	.word	0x48000800

080021ac <MFX_IO_ITConfig>:
/**
  * @brief  Configures MFX low level interrupt.
  * @retval None
  */
void MFX_IO_ITConfig(void)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO clock */
  MFX_INT_GPIO_CLK_ENABLE();
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MFX_IO_ITConfig+0x54>)
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	4a12      	ldr	r2, [pc, #72]	; (8002200 <MFX_IO_ITConfig+0x54>)
 80021b8:	f043 0304 	orr.w	r3, r3, #4
 80021bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021be:	4b10      	ldr	r3, [pc, #64]	; (8002200 <MFX_IO_ITConfig+0x54>)
 80021c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c2:	f003 0304 	and.w	r3, r3, #4
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]

  /* MFX_OUT_IRQ (normally used for EXTI_WKUP) */
  GPIO_InitStruct.Pin   = MFX_INT_PIN;
 80021ca:	2320      	movs	r3, #32
 80021cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_RISING;
 80021d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021da:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(MFX_INT_GPIO_PORT, &GPIO_InitStruct);
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4808      	ldr	r0, [pc, #32]	; (8002204 <MFX_IO_ITConfig+0x58>)
 80021e2:	f000 ff2d 	bl	8003040 <HAL_GPIO_Init>

  /* Enable and set GPIO EXTI Interrupt to the lowest priority */
  HAL_NVIC_SetPriority((IRQn_Type)(MFX_INT_EXTI_IRQn), 0x0F, 0x0F);
 80021e6:	220f      	movs	r2, #15
 80021e8:	210f      	movs	r1, #15
 80021ea:	2017      	movs	r0, #23
 80021ec:	f000 fcf8 	bl	8002be0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(MFX_INT_EXTI_IRQn));
 80021f0:	2017      	movs	r0, #23
 80021f2:	f000 fd11 	bl	8002c18 <HAL_NVIC_EnableIRQ>
}
 80021f6:	bf00      	nop
 80021f8:	3718      	adds	r7, #24
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40021000 	.word	0x40021000
 8002204:	48000800 	.word	0x48000800

08002208 <MFX_IO_EnableWakeupPin>:
/**
  * @brief  Configures MFX wke up  pin.
  * @retval None
  */
void MFX_IO_EnableWakeupPin(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable wakeup gpio clock */
  MFX_WAKEUP_GPIO_CLK_ENABLE();
 800220e:	4b0e      	ldr	r3, [pc, #56]	; (8002248 <MFX_IO_EnableWakeupPin+0x40>)
 8002210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002212:	4a0d      	ldr	r2, [pc, #52]	; (8002248 <MFX_IO_EnableWakeupPin+0x40>)
 8002214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800221a:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <MFX_IO_EnableWakeupPin+0x40>)
 800221c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800221e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002222:	603b      	str	r3, [r7, #0]
 8002224:	683b      	ldr	r3, [r7, #0]

  /* MFX wakeup pin configuration */
  GPIO_InitStruct.Pin   = MFX_WAKEUP_PIN;
 8002226:	2340      	movs	r3, #64	; 0x40
 8002228:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800222e:	2302      	movs	r3, #2
 8002230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8002232:	2300      	movs	r3, #0
 8002234:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_PORT, &GPIO_InitStruct);
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4804      	ldr	r0, [pc, #16]	; (800224c <MFX_IO_EnableWakeupPin+0x44>)
 800223c:	f000 ff00 	bl	8003040 <HAL_GPIO_Init>
}
 8002240:	bf00      	nop
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	40021000 	.word	0x40021000
 800224c:	48001c00 	.word	0x48001c00

08002250 <MFX_IO_Wakeup>:
/**
  * @brief  Wakeup MFX.
  * @retval None
  */
void MFX_IO_Wakeup(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	af00      	add	r7, sp, #0
  /* Set Wakeup pin to high to wakeup Idd measurement component from standby mode */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_SET);
 8002254:	2201      	movs	r2, #1
 8002256:	2140      	movs	r1, #64	; 0x40
 8002258:	4806      	ldr	r0, [pc, #24]	; (8002274 <MFX_IO_Wakeup+0x24>)
 800225a:	f001 f975 	bl	8003548 <HAL_GPIO_WritePin>

  /* Wait */
  HAL_Delay(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f000 fbbe 	bl	80029e0 <HAL_Delay>

  /* Set gpio pin basck to low */
  HAL_GPIO_WritePin(MFX_WAKEUP_GPIO_PORT, MFX_WAKEUP_PIN, GPIO_PIN_RESET);
 8002264:	2200      	movs	r2, #0
 8002266:	2140      	movs	r1, #64	; 0x40
 8002268:	4802      	ldr	r0, [pc, #8]	; (8002274 <MFX_IO_Wakeup+0x24>)
 800226a:	f001 f96d 	bl	8003548 <HAL_GPIO_WritePin>
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	48001c00 	.word	0x48001c00

08002278 <MFX_IO_Write>:
  * @param  Reg: Register address
  * @param  Value: Data to be written
  * @retval None
  */
void MFX_IO_Write(uint16_t Addr, uint8_t Reg, uint8_t Value)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	80fb      	strh	r3, [r7, #6]
 8002282:	460b      	mov	r3, r1
 8002284:	717b      	strb	r3, [r7, #5]
 8002286:	4613      	mov	r3, r2
 8002288:	713b      	strb	r3, [r7, #4]
  I2C2_WriteData(Addr, Reg, I2C_MEMADD_SIZE_8BIT, Value);
 800228a:	797b      	ldrb	r3, [r7, #5]
 800228c:	b299      	uxth	r1, r3
 800228e:	793b      	ldrb	r3, [r7, #4]
 8002290:	88f8      	ldrh	r0, [r7, #6]
 8002292:	2201      	movs	r2, #1
 8002294:	f7ff fe76 	bl	8001f84 <I2C2_WriteData>
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <MFX_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Register address
  * @retval Read data
  */
uint8_t MFX_IO_Read(uint16_t Addr, uint8_t Reg)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	460a      	mov	r2, r1
 80022aa:	80fb      	strh	r3, [r7, #6]
 80022ac:	4613      	mov	r3, r2
 80022ae:	717b      	strb	r3, [r7, #5]
  return I2C2_ReadData(Addr, Reg, I2C_MEMADD_SIZE_8BIT);
 80022b0:	797b      	ldrb	r3, [r7, #5]
 80022b2:	b299      	uxth	r1, r3
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	2201      	movs	r2, #1
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff fe95 	bl	8001fe8 <I2C2_ReadData>
 80022be:	4603      	mov	r3, r0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <MFX_IO_ReadMultiple>:
  * @param  Buffer: Pointer to data buffer
  * @param  Length: Length of the data
  * @retval Number of read data
  */
uint16_t MFX_IO_ReadMultiple(uint16_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60ba      	str	r2, [r7, #8]
 80022d0:	461a      	mov	r2, r3
 80022d2:	4603      	mov	r3, r0
 80022d4:	81fb      	strh	r3, [r7, #14]
 80022d6:	460b      	mov	r3, r1
 80022d8:	737b      	strb	r3, [r7, #13]
 80022da:	4613      	mov	r3, r2
 80022dc:	80fb      	strh	r3, [r7, #6]
  return I2C2_ReadBuffer(Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80022de:	7b7b      	ldrb	r3, [r7, #13]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	89f8      	ldrh	r0, [r7, #14]
 80022e4:	88fb      	ldrh	r3, [r7, #6]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f7ff fed6 	bl	800209c <I2C2_ReadBuffer>
 80022f0:	4603      	mov	r3, r0
 80022f2:	b29b      	uxth	r3, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <MFX_IO_Delay>:
  * @brief  MFX delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void MFX_IO_Delay(uint32_t Delay)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f000 fb6b 	bl	80029e0 <HAL_Delay>
}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
	...

08002314 <BSP_IO_Init>:
  *         then the SysTick interrupt must have higher priority (numerically lower)
  *         than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
  uint8_t ret = IO_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	71fb      	strb	r3, [r7, #7]
  uint8_t mfxstm32l152_id = 0;
 800231e:	2300      	movs	r3, #0
 8002320:	71bb      	strb	r3, [r7, #6]

  if (io1_driver == NULL) /* Checks if MFX initialization has been already done */
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <BSP_IO_Init+0x78>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d128      	bne.n	800237c <BSP_IO_Init+0x68>
  {
    mfxstm32l152_idd_drv.WakeUp(IO1_I2C_ADDRESS);
 800232a:	4b19      	ldr	r3, [pc, #100]	; (8002390 <BSP_IO_Init+0x7c>)
 800232c:	695b      	ldr	r3, [r3, #20]
 800232e:	2084      	movs	r0, #132	; 0x84
 8002330:	4798      	blx	r3

    HAL_Delay(10);
 8002332:	200a      	movs	r0, #10
 8002334:	f000 fb54 	bl	80029e0 <HAL_Delay>

    /* Read ID and verify the IO expander is ready */
    mfxstm32l152_id = mfxstm32l152_io_drv.ReadID(IO1_I2C_ADDRESS);
 8002338:	4b16      	ldr	r3, [pc, #88]	; (8002394 <BSP_IO_Init+0x80>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2084      	movs	r0, #132	; 0x84
 800233e:	4798      	blx	r3
 8002340:	4603      	mov	r3, r0
 8002342:	71bb      	strb	r3, [r7, #6]

    if ((mfxstm32l152_id == MFXSTM32L152_ID_1) || (mfxstm32l152_id == MFXSTM32L152_ID_2))
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b7b      	cmp	r3, #123	; 0x7b
 8002348:	d002      	beq.n	8002350 <BSP_IO_Init+0x3c>
 800234a:	79bb      	ldrb	r3, [r7, #6]
 800234c:	2b79      	cmp	r3, #121	; 0x79
 800234e:	d117      	bne.n	8002380 <BSP_IO_Init+0x6c>
    {
      /* Initialize the MFX */
      io1_driver = &mfxstm32l152_io_drv;
 8002350:	4b0e      	ldr	r3, [pc, #56]	; (800238c <BSP_IO_Init+0x78>)
 8002352:	4a10      	ldr	r2, [pc, #64]	; (8002394 <BSP_IO_Init+0x80>)
 8002354:	601a      	str	r2, [r3, #0]

      /* Initialize the MFX IO driver structure  */
      if (io1_driver->Init != NULL)
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <BSP_IO_Init+0x78>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00f      	beq.n	8002380 <BSP_IO_Init+0x6c>
      {
        io1_driver->Init(IO1_I2C_ADDRESS);
 8002360:	4b0a      	ldr	r3, [pc, #40]	; (800238c <BSP_IO_Init+0x78>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2084      	movs	r0, #132	; 0x84
 8002368:	4798      	blx	r3
        io1_driver->Start(IO1_I2C_ADDRESS, IO1_PIN_ALL >> IO1_PIN_OFFSET);
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <BSP_IO_Init+0x78>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4909      	ldr	r1, [pc, #36]	; (8002398 <BSP_IO_Init+0x84>)
 8002372:	2084      	movs	r0, #132	; 0x84
 8002374:	4798      	blx	r3

        ret = IO_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	e001      	b.n	8002380 <BSP_IO_Init+0x6c>
      }
    }
  }
  else
  {
    ret = IO_ALREADY_INITIALIZED;
 800237c:	2303      	movs	r3, #3
 800237e:	71fb      	strb	r3, [r7, #7]
  }

  return ret;
 8002380:	79fb      	ldrb	r3, [r7, #7]
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	20000160 	.word	0x20000160
 8002390:	2000002c 	.word	0x2000002c
 8002394:	20000000 	.word	0x20000000
 8002398:	000301ff 	.word	0x000301ff

0800239c <BSP_IO_ConfigPin>:
  *            @arg  IO_MODE_IT_LOW_LEVEL
  *            @arg  IO_MODE_IT_HIGH_LEVEL
  * @retval IO_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_IO_ConfigPin(uint32_t IO_Pin, IO_ModeTypedef IO_Mode)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b084      	sub	sp, #16
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	4b07      	ldr	r3, [pc, #28]	; (80023cc <BSP_IO_ConfigPin+0x30>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	60fb      	str	r3, [r7, #12]


  /* Configure the selected IO Expander 1 pin(s) mode */
  io1_driver->Config(IO1_I2C_ADDRESS, io1_pin, IO_Mode);
 80023b4:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <BSP_IO_ConfigPin+0x34>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	78fa      	ldrb	r2, [r7, #3]
 80023bc:	68f9      	ldr	r1, [r7, #12]
 80023be:	2084      	movs	r0, #132	; 0x84
 80023c0:	4798      	blx	r3

  return IO_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3710      	adds	r7, #16
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	000301ff 	.word	0x000301ff
 80023d0:	20000160 	.word	0x20000160

080023d4 <BSP_IO_WritePin>:
  *          This parameter can be any combination of the IO pins.
  * @param  PinState: New pins state to write
  * @retval None
  */
void BSP_IO_WritePin(uint32_t IO_Pin, uint8_t PinState)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	70fb      	strb	r3, [r7, #3]
  uint32_t io1_pin = 0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4b07      	ldr	r3, [pc, #28]	; (8002404 <BSP_IO_WritePin+0x30>)
 80023e8:	4013      	ands	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Sets the IO Expander 1 selected pins state */
  io1_driver->WritePin(IO1_I2C_ADDRESS, io1_pin, PinState);
 80023ec:	4b06      	ldr	r3, [pc, #24]	; (8002408 <BSP_IO_WritePin+0x34>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	695b      	ldr	r3, [r3, #20]
 80023f2:	78fa      	ldrb	r2, [r7, #3]
 80023f4:	68f9      	ldr	r1, [r7, #12]
 80023f6:	2084      	movs	r0, #132	; 0x84
 80023f8:	4798      	blx	r3

}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	000301ff 	.word	0x000301ff
 8002408:	20000160 	.word	0x20000160

0800240c <BSP_IO_TogglePin>:
  * @param  IO_Pin: Selected pins to toggle.
  *          This parameter can be any combination of the IO pins.
  * @retval None
  */
void BSP_IO_TogglePin(uint32_t IO_Pin)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  uint32_t io1_pin = 0;
 8002414:	2300      	movs	r3, #0
 8002416:	60fb      	str	r3, [r7, #12]

  io1_pin = (IO_Pin & IO1_PIN_ALL) >> IO1_PIN_OFFSET;
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	4b0c      	ldr	r3, [pc, #48]	; (800244c <BSP_IO_TogglePin+0x40>)
 800241c:	4013      	ands	r3, r2
 800241e:	60fb      	str	r3, [r7, #12]

  /* Toggles the IO Expander 1 selected pins state */
  if (io1_driver->ReadPin(IO1_I2C_ADDRESS, io1_pin) == RESET) /* Set */
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <BSP_IO_TogglePin+0x44>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	68f9      	ldr	r1, [r7, #12]
 8002428:	2084      	movs	r0, #132	; 0x84
 800242a:	4798      	blx	r3
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d104      	bne.n	800243c <BSP_IO_TogglePin+0x30>
  {
    BSP_IO_WritePin(io1_pin, GPIO_PIN_SET); /* Reset */
 8002432:	2101      	movs	r1, #1
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f7ff ffcd 	bl	80023d4 <BSP_IO_WritePin>
  else
  {
    BSP_IO_WritePin(io1_pin, GPIO_PIN_RESET);  /* Set */
  }

}
 800243a:	e003      	b.n	8002444 <BSP_IO_TogglePin+0x38>
    BSP_IO_WritePin(io1_pin, GPIO_PIN_RESET);  /* Set */
 800243c:	2100      	movs	r1, #0
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f7ff ffc8 	bl	80023d4 <BSP_IO_WritePin>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	000301ff 	.word	0x000301ff
 8002450:	20000160 	.word	0x20000160

08002454 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800245a:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <HAL_MspInit+0x44>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <HAL_MspInit+0x44>)
 8002460:	f043 0301 	orr.w	r3, r3, #1
 8002464:	6613      	str	r3, [r2, #96]	; 0x60
 8002466:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_MspInit+0x44>)
 8002468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	607b      	str	r3, [r7, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_MspInit+0x44>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4a08      	ldr	r2, [pc, #32]	; (8002498 <HAL_MspInit+0x44>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <HAL_MspInit+0x44>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000

0800249c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	; 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a4e      	ldr	r2, [pc, #312]	; (80025f4 <HAL_SPI_MspInit+0x158>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	f040 8096 	bne.w	80025ec <HAL_SPI_MspInit+0x150>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80024c0:	4b4d      	ldr	r3, [pc, #308]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c4:	4a4c      	ldr	r2, [pc, #304]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ca:	6593      	str	r3, [r2, #88]	; 0x58
 80024cc:	4b4a      	ldr	r3, [pc, #296]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80024d8:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024dc:	4a46      	ldr	r2, [pc, #280]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024e4:	4b44      	ldr	r3, [pc, #272]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ec:	60fb      	str	r3, [r7, #12]
 80024ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f0:	4b41      	ldr	r3, [pc, #260]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024f4:	4a40      	ldr	r2, [pc, #256]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024f6:	f043 0308 	orr.w	r3, r3, #8
 80024fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024fc:	4b3e      	ldr	r3, [pc, #248]	; (80025f8 <HAL_SPI_MspInit+0x15c>)
 80024fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002500:	f003 0308 	and.w	r3, r3, #8
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PI1     ------> SPI2_SCK
    PI3     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8002508:	230a      	movs	r3, #10
 800250a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002518:	2305      	movs	r3, #5
 800251a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800251c:	f107 0314 	add.w	r3, r7, #20
 8002520:	4619      	mov	r1, r3
 8002522:	4836      	ldr	r0, [pc, #216]	; (80025fc <HAL_SPI_MspInit+0x160>)
 8002524:	f000 fd8c 	bl	8003040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002528:	2308      	movs	r3, #8
 800252a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002534:	2303      	movs	r3, #3
 8002536:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002538:	2305      	movs	r3, #5
 800253a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800253c:	f107 0314 	add.w	r3, r7, #20
 8002540:	4619      	mov	r1, r3
 8002542:	482f      	ldr	r0, [pc, #188]	; (8002600 <HAL_SPI_MspInit+0x164>)
 8002544:	f000 fd7c 	bl	8003040 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8002548:	4b2e      	ldr	r3, [pc, #184]	; (8002604 <HAL_SPI_MspInit+0x168>)
 800254a:	4a2f      	ldr	r2, [pc, #188]	; (8002608 <HAL_SPI_MspInit+0x16c>)
 800254c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_1;
 800254e:	4b2d      	ldr	r3, [pc, #180]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002550:	2201      	movs	r2, #1
 8002552:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002554:	4b2b      	ldr	r3, [pc, #172]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_SPI_MspInit+0x168>)
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002560:	4b28      	ldr	r3, [pc, #160]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002562:	2280      	movs	r2, #128	; 0x80
 8002564:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002566:	4b27      	ldr	r3, [pc, #156]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256c:	4b25      	ldr	r3, [pc, #148]	; (8002604 <HAL_SPI_MspInit+0x168>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8002572:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002578:	4b22      	ldr	r3, [pc, #136]	; (8002604 <HAL_SPI_MspInit+0x168>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800257e:	4821      	ldr	r0, [pc, #132]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002580:	f000 fb66 	bl	8002c50 <HAL_DMA_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <HAL_SPI_MspInit+0xf2>
    {
      Error_Handler();
 800258a:	f7fe fb41 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a1c      	ldr	r2, [pc, #112]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002592:	659a      	str	r2, [r3, #88]	; 0x58
 8002594:	4a1b      	ldr	r2, [pc, #108]	; (8002604 <HAL_SPI_MspInit+0x168>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 800259a:	4b1c      	ldr	r3, [pc, #112]	; (800260c <HAL_SPI_MspInit+0x170>)
 800259c:	4a1c      	ldr	r2, [pc, #112]	; (8002610 <HAL_SPI_MspInit+0x174>)
 800259e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_1;
 80025a0:	4b1a      	ldr	r3, [pc, #104]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025a2:	2201      	movs	r2, #1
 80025a4:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025a6:	4b19      	ldr	r3, [pc, #100]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025a8:	2210      	movs	r2, #16
 80025aa:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ac:	4b17      	ldr	r3, [pc, #92]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025b2:	4b16      	ldr	r3, [pc, #88]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025b4:	2280      	movs	r2, #128	; 0x80
 80025b6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025b8:	4b14      	ldr	r3, [pc, #80]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025be:	4b13      	ldr	r3, [pc, #76]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 80025c4:	4b11      	ldr	r3, [pc, #68]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025ca:	4b10      	ldr	r3, [pc, #64]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80025d0:	480e      	ldr	r0, [pc, #56]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025d2:	f000 fb3d 	bl	8002c50 <HAL_DMA_Init>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_SPI_MspInit+0x144>
    {
      Error_Handler();
 80025dc:	f7fe fb18 	bl	8000c10 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	4a0a      	ldr	r2, [pc, #40]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025e4:	655a      	str	r2, [r3, #84]	; 0x54
 80025e6:	4a09      	ldr	r2, [pc, #36]	; (800260c <HAL_SPI_MspInit+0x170>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80025ec:	bf00      	nop
 80025ee:	3728      	adds	r7, #40	; 0x28
 80025f0:	46bd      	mov	sp, r7
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40003800 	.word	0x40003800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	48002000 	.word	0x48002000
 8002600:	48000c00 	.word	0x48000c00
 8002604:	200001d8 	.word	0x200001d8
 8002608:	40020044 	.word	0x40020044
 800260c:	200002a4 	.word	0x200002a4
 8002610:	40020058 	.word	0x40020058

08002614 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b0ae      	sub	sp, #184	; 0xb8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	609a      	str	r2, [r3, #8]
 8002628:	60da      	str	r2, [r3, #12]
 800262a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800262c:	f107 0318 	add.w	r3, r7, #24
 8002630:	228c      	movs	r2, #140	; 0x8c
 8002632:	2100      	movs	r1, #0
 8002634:	4618      	mov	r0, r3
 8002636:	f005 fb71 	bl	8007d1c <memset>
  if(huart->Instance==USART2)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a32      	ldr	r2, [pc, #200]	; (8002708 <HAL_UART_MspInit+0xf4>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d15c      	bne.n	80026fe <HAL_UART_MspInit+0xea>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002644:	2302      	movs	r3, #2
 8002646:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002648:	2300      	movs	r3, #0
 800264a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264c:	f107 0318 	add.w	r3, r7, #24
 8002650:	4618      	mov	r0, r3
 8002652:	f002 fda3 	bl	800519c <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800265c:	f7fe fad8 	bl	8000c10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002660:	4b2a      	ldr	r3, [pc, #168]	; (800270c <HAL_UART_MspInit+0xf8>)
 8002662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002664:	4a29      	ldr	r2, [pc, #164]	; (800270c <HAL_UART_MspInit+0xf8>)
 8002666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800266a:	6593      	str	r3, [r2, #88]	; 0x58
 800266c:	4b27      	ldr	r3, [pc, #156]	; (800270c <HAL_UART_MspInit+0xf8>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002678:	4b24      	ldr	r3, [pc, #144]	; (800270c <HAL_UART_MspInit+0xf8>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800267c:	4a23      	ldr	r2, [pc, #140]	; (800270c <HAL_UART_MspInit+0xf8>)
 800267e:	f043 0308 	orr.w	r3, r3, #8
 8002682:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002684:	4b21      	ldr	r3, [pc, #132]	; (800270c <HAL_UART_MspInit+0xf8>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	f003 0308 	and.w	r3, r3, #8
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	4b1e      	ldr	r3, [pc, #120]	; (800270c <HAL_UART_MspInit+0xf8>)
 8002692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002694:	4a1d      	ldr	r2, [pc, #116]	; (800270c <HAL_UART_MspInit+0xf8>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800269c:	4b1b      	ldr	r3, [pc, #108]	; (800270c <HAL_UART_MspInit+0xf8>)
 800269e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026a8:	2340      	movs	r3, #64	; 0x40
 80026aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b4:	2300      	movs	r3, #0
 80026b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026c0:	2307      	movs	r3, #7
 80026c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026ca:	4619      	mov	r1, r3
 80026cc:	4810      	ldr	r0, [pc, #64]	; (8002710 <HAL_UART_MspInit+0xfc>)
 80026ce:	f000 fcb7 	bl	8003040 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026d2:	2304      	movs	r3, #4
 80026d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d8:	2302      	movs	r3, #2
 80026da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026de:	2300      	movs	r3, #0
 80026e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026e4:	2303      	movs	r3, #3
 80026e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026ea:	2307      	movs	r3, #7
 80026ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026f4:	4619      	mov	r1, r3
 80026f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80026fa:	f000 fca1 	bl	8003040 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	37b8      	adds	r7, #184	; 0xb8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40004400 	.word	0x40004400
 800270c:	40021000 	.word	0x40021000
 8002710:	48000c00 	.word	0x48000c00

08002714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08c      	sub	sp, #48	; 0x30
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002720:	2300      	movs	r3, #0
 8002722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8002724:	2200      	movs	r2, #0
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	2019      	movs	r0, #25
 800272a:	f000 fa59 	bl	8002be0 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800272e:	2019      	movs	r0, #25
 8002730:	f000 fa72 	bl	8002c18 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002734:	4b1e      	ldr	r3, [pc, #120]	; (80027b0 <HAL_InitTick+0x9c>)
 8002736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002738:	4a1d      	ldr	r2, [pc, #116]	; (80027b0 <HAL_InitTick+0x9c>)
 800273a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800273e:	6613      	str	r3, [r2, #96]	; 0x60
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_InitTick+0x9c>)
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800274c:	f107 0210 	add.w	r2, r7, #16
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fc8e 	bl	8005078 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800275c:	f002 fc76 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8002760:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <HAL_InitTick+0xa0>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3b01      	subs	r3, #1
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002770:	4b11      	ldr	r3, [pc, #68]	; (80027b8 <HAL_InitTick+0xa4>)
 8002772:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_InitTick+0xa8>)
 8002774:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002776:	4b10      	ldr	r3, [pc, #64]	; (80027b8 <HAL_InitTick+0xa4>)
 8002778:	f240 32e7 	movw	r2, #999	; 0x3e7
 800277c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_InitTick+0xa4>)
 8002780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002782:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002784:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_InitTick+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800278a:	4b0b      	ldr	r3, [pc, #44]	; (80027b8 <HAL_InitTick+0xa4>)
 800278c:	2200      	movs	r2, #0
 800278e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002790:	4809      	ldr	r0, [pc, #36]	; (80027b8 <HAL_InitTick+0xa4>)
 8002792:	f004 faab 	bl	8006cec <HAL_TIM_Base_Init>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d104      	bne.n	80027a6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800279c:	4806      	ldr	r0, [pc, #24]	; (80027b8 <HAL_InitTick+0xa4>)
 800279e:	f004 fb07 	bl	8006db0 <HAL_TIM_Base_Start_IT>
 80027a2:	4603      	mov	r3, r0
 80027a4:	e000      	b.n	80027a8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3730      	adds	r7, #48	; 0x30
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	40021000 	.word	0x40021000
 80027b4:	431bde83 	.word	0x431bde83
 80027b8:	200002ec 	.word	0x200002ec
 80027bc:	40012c00 	.word	0x40012c00

080027c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027c4:	e7fe      	b.n	80027c4 <NMI_Handler+0x4>

080027c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027c6:	b480      	push	{r7}
 80027c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ca:	e7fe      	b.n	80027ca <HardFault_Handler+0x4>

080027cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027d0:	e7fe      	b.n	80027d0 <MemManage_Handler+0x4>

080027d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027d6:	e7fe      	b.n	80027d6 <BusFault_Handler+0x4>

080027d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <UsageFault_Handler+0x4>

080027de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027f0:	bf00      	nop
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027fa:	b480      	push	{r7}
 80027fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	46bd      	mov	sp, r7
 8002802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002806:	4770      	bx	lr

08002808 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800281c:	4802      	ldr	r0, [pc, #8]	; (8002828 <DMA1_Channel4_IRQHandler+0x10>)
 800281e:	f000 fb2f 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200001d8 	.word	0x200001d8

0800282c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8002830:	4802      	ldr	r0, [pc, #8]	; (800283c <DMA1_Channel5_IRQHandler+0x10>)
 8002832:	f000 fb25 	bl	8002e80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8002836:	bf00      	nop
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	200002a4 	.word	0x200002a4

08002840 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002844:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002848:	f000 feb0 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800284c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002850:	f000 feac 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002854:	bf00      	nop
 8002856:	bd80      	pop	{r7, pc}

08002858 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800285c:	4802      	ldr	r0, [pc, #8]	; (8002868 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800285e:	f004 fb17 	bl	8006e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200002ec 	.word	0x200002ec

0800286c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002870:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002874:	f000 fe9a 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002878:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800287c:	f000 fe96 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002880:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002884:	f000 fe92 	bl	80035ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002888:	bf00      	nop
 800288a:	bd80      	pop	{r7, pc}

0800288c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002894:	4a14      	ldr	r2, [pc, #80]	; (80028e8 <_sbrk+0x5c>)
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <_sbrk+0x60>)
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028a0:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d102      	bne.n	80028ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028a8:	4b11      	ldr	r3, [pc, #68]	; (80028f0 <_sbrk+0x64>)
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <_sbrk+0x68>)
 80028ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028ae:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d207      	bcs.n	80028cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028bc:	f005 fa04 	bl	8007cc8 <__errno>
 80028c0:	4603      	mov	r3, r0
 80028c2:	220c      	movs	r2, #12
 80028c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ca:	e009      	b.n	80028e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028cc:	4b08      	ldr	r3, [pc, #32]	; (80028f0 <_sbrk+0x64>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028d2:	4b07      	ldr	r3, [pc, #28]	; (80028f0 <_sbrk+0x64>)
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4413      	add	r3, r2
 80028da:	4a05      	ldr	r2, [pc, #20]	; (80028f0 <_sbrk+0x64>)
 80028dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028de:	68fb      	ldr	r3, [r7, #12]
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3718      	adds	r7, #24
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20040000 	.word	0x20040000
 80028ec:	00000400 	.word	0x00000400
 80028f0:	20000164 	.word	0x20000164
 80028f4:	20000350 	.word	0x20000350

080028f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80028fc:	4b06      	ldr	r3, [pc, #24]	; (8002918 <SystemInit+0x20>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	4a05      	ldr	r2, [pc, #20]	; (8002918 <SystemInit+0x20>)
 8002904:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002908:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	e000ed00 	.word	0xe000ed00

0800291c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800291c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002954 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002920:	f7ff ffea 	bl	80028f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002924:	480c      	ldr	r0, [pc, #48]	; (8002958 <LoopForever+0x6>)
  ldr r1, =_edata
 8002926:	490d      	ldr	r1, [pc, #52]	; (800295c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002928:	4a0d      	ldr	r2, [pc, #52]	; (8002960 <LoopForever+0xe>)
  movs r3, #0
 800292a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800292c:	e002      	b.n	8002934 <LoopCopyDataInit>

0800292e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800292e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002930:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002932:	3304      	adds	r3, #4

08002934 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002934:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002936:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002938:	d3f9      	bcc.n	800292e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800293a:	4a0a      	ldr	r2, [pc, #40]	; (8002964 <LoopForever+0x12>)
  ldr r4, =_ebss
 800293c:	4c0a      	ldr	r4, [pc, #40]	; (8002968 <LoopForever+0x16>)
  movs r3, #0
 800293e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002940:	e001      	b.n	8002946 <LoopFillZerobss>

08002942 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002942:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002944:	3204      	adds	r2, #4

08002946 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002946:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002948:	d3fb      	bcc.n	8002942 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800294a:	f005 f9c3 	bl	8007cd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800294e:	f7fd ff0f 	bl	8000770 <main>

08002952 <LoopForever>:

LoopForever:
    b LoopForever
 8002952:	e7fe      	b.n	8002952 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002954:	20040000 	.word	0x20040000
  ldr r0, =_sdata
 8002958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800295c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8002960:	0800864c 	.word	0x0800864c
  ldr r2, =_sbss
 8002964:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8002968:	2000034c 	.word	0x2000034c

0800296c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800296c:	e7fe      	b.n	800296c <ADC1_2_IRQHandler>

0800296e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800296e:	b580      	push	{r7, lr}
 8002970:	b082      	sub	sp, #8
 8002972:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 f926 	bl	8002bca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800297e:	200f      	movs	r0, #15
 8002980:	f7ff fec8 	bl	8002714 <HAL_InitTick>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	71fb      	strb	r3, [r7, #7]
 800298e:	e001      	b.n	8002994 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002990:	f7ff fd60 	bl	8002454 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002994:	79fb      	ldrb	r3, [r7, #7]
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029a4:	4b06      	ldr	r3, [pc, #24]	; (80029c0 <HAL_IncTick+0x20>)
 80029a6:	781b      	ldrb	r3, [r3, #0]
 80029a8:	461a      	mov	r2, r3
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x24>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4413      	add	r3, r2
 80029b0:	4a04      	ldr	r2, [pc, #16]	; (80029c4 <HAL_IncTick+0x24>)
 80029b2:	6013      	str	r3, [r2, #0]
}
 80029b4:	bf00      	nop
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
 80029be:	bf00      	nop
 80029c0:	20000084 	.word	0x20000084
 80029c4:	20000338 	.word	0x20000338

080029c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  return uwTick;
 80029cc:	4b03      	ldr	r3, [pc, #12]	; (80029dc <HAL_GetTick+0x14>)
 80029ce:	681b      	ldr	r3, [r3, #0]
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000338 	.word	0x20000338

080029e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029e8:	f7ff ffee 	bl	80029c8 <HAL_GetTick>
 80029ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f8:	d005      	beq.n	8002a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80029fa:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_Delay+0x44>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	461a      	mov	r2, r3
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4413      	add	r3, r2
 8002a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a06:	bf00      	nop
 8002a08:	f7ff ffde 	bl	80029c8 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d8f7      	bhi.n	8002a08 <HAL_Delay+0x28>
  {
  }
}
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20000084 	.word	0x20000084

08002a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b085      	sub	sp, #20
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a3e:	68ba      	ldr	r2, [r7, #8]
 8002a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a44:	4013      	ands	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5a:	4a04      	ldr	r2, [pc, #16]	; (8002a6c <__NVIC_SetPriorityGrouping+0x44>)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	60d3      	str	r3, [r2, #12]
}
 8002a60:	bf00      	nop
 8002a62:	3714      	adds	r7, #20
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr
 8002a6c:	e000ed00 	.word	0xe000ed00

08002a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a74:	4b04      	ldr	r3, [pc, #16]	; (8002a88 <__NVIC_GetPriorityGrouping+0x18>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	0a1b      	lsrs	r3, r3, #8
 8002a7a:	f003 0307 	and.w	r3, r3, #7
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b083      	sub	sp, #12
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	4603      	mov	r3, r0
 8002a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	db0b      	blt.n	8002ab6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	f003 021f 	and.w	r2, r3, #31
 8002aa4:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <__NVIC_EnableIRQ+0x38>)
 8002aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2001      	movs	r0, #1
 8002aae:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ab6:	bf00      	nop
 8002ab8:	370c      	adds	r7, #12
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	e000e100 	.word	0xe000e100

08002ac8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	db12      	blt.n	8002b00 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	490a      	ldr	r1, [pc, #40]	; (8002b0c <__NVIC_DisableIRQ+0x44>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2001      	movs	r0, #1
 8002aea:	fa00 f202 	lsl.w	r2, r0, r2
 8002aee:	3320      	adds	r3, #32
 8002af0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002af4:	f3bf 8f4f 	dsb	sy
}
 8002af8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002afa:	f3bf 8f6f 	isb	sy
}
 8002afe:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr
 8002b0c:	e000e100 	.word	0xe000e100

08002b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	6039      	str	r1, [r7, #0]
 8002b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	db0a      	blt.n	8002b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	b2da      	uxtb	r2, r3
 8002b28:	490c      	ldr	r1, [pc, #48]	; (8002b5c <__NVIC_SetPriority+0x4c>)
 8002b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2e:	0112      	lsls	r2, r2, #4
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	440b      	add	r3, r1
 8002b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b38:	e00a      	b.n	8002b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	4908      	ldr	r1, [pc, #32]	; (8002b60 <__NVIC_SetPriority+0x50>)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	3b04      	subs	r3, #4
 8002b48:	0112      	lsls	r2, r2, #4
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	761a      	strb	r2, [r3, #24]
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000e100 	.word	0xe000e100
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b089      	sub	sp, #36	; 0x24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f1c3 0307 	rsb	r3, r3, #7
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	bf28      	it	cs
 8002b82:	2304      	movcs	r3, #4
 8002b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2b06      	cmp	r3, #6
 8002b8c:	d902      	bls.n	8002b94 <NVIC_EncodePriority+0x30>
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3b03      	subs	r3, #3
 8002b92:	e000      	b.n	8002b96 <NVIC_EncodePriority+0x32>
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002b9c:	69bb      	ldr	r3, [r7, #24]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43da      	mvns	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	401a      	ands	r2, r3
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002bb6:	43d9      	mvns	r1, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bbc:	4313      	orrs	r3, r2
         );
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3724      	adds	r7, #36	; 0x24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b082      	sub	sp, #8
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff ff28 	bl	8002a28 <__NVIC_SetPriorityGrouping>
}
 8002bd8:	bf00      	nop
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	4603      	mov	r3, r0
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	607a      	str	r2, [r7, #4]
 8002bec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf2:	f7ff ff3d 	bl	8002a70 <__NVIC_GetPriorityGrouping>
 8002bf6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	68b9      	ldr	r1, [r7, #8]
 8002bfc:	6978      	ldr	r0, [r7, #20]
 8002bfe:	f7ff ffb1 	bl	8002b64 <NVIC_EncodePriority>
 8002c02:	4602      	mov	r2, r0
 8002c04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c08:	4611      	mov	r1, r2
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7ff ff80 	bl	8002b10 <__NVIC_SetPriority>
}
 8002c10:	bf00      	nop
 8002c12:	3718      	adds	r7, #24
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f7ff ff30 	bl	8002a8c <__NVIC_EnableIRQ>
}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b082      	sub	sp, #8
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f7ff ff40 	bl	8002ac8 <__NVIC_DisableIRQ>
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e098      	b.n	8002d94 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	461a      	mov	r2, r3
 8002c68:	4b4d      	ldr	r3, [pc, #308]	; (8002da0 <HAL_DMA_Init+0x150>)
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d80f      	bhi.n	8002c8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	4b4b      	ldr	r3, [pc, #300]	; (8002da4 <HAL_DMA_Init+0x154>)
 8002c76:	4413      	add	r3, r2
 8002c78:	4a4b      	ldr	r2, [pc, #300]	; (8002da8 <HAL_DMA_Init+0x158>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	009a      	lsls	r2, r3, #2
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_DMA_Init+0x15c>)
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40
 8002c8c:	e00e      	b.n	8002cac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	4b46      	ldr	r3, [pc, #280]	; (8002db0 <HAL_DMA_Init+0x160>)
 8002c96:	4413      	add	r3, r2
 8002c98:	4a43      	ldr	r2, [pc, #268]	; (8002da8 <HAL_DMA_Init+0x158>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	091b      	lsrs	r3, r3, #4
 8002ca0:	009a      	lsls	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a42      	ldr	r2, [pc, #264]	; (8002db4 <HAL_DMA_Init+0x164>)
 8002caa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002cd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002cdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ce8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68fa      	ldr	r2, [r7, #12]
 8002cfc:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d06:	d039      	beq.n	8002d7c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4a27      	ldr	r2, [pc, #156]	; (8002dac <HAL_DMA_Init+0x15c>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d11a      	bne.n	8002d48 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d12:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d1a:	f003 031c 	and.w	r3, r3, #28
 8002d1e:	210f      	movs	r1, #15
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	4924      	ldr	r1, [pc, #144]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d2c:	4b22      	ldr	r3, [pc, #136]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 031c 	and.w	r3, r3, #28
 8002d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002d40:	491d      	ldr	r1, [pc, #116]	; (8002db8 <HAL_DMA_Init+0x168>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	600b      	str	r3, [r1, #0]
 8002d46:	e019      	b.n	8002d7c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d48:	4b1c      	ldr	r3, [pc, #112]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d50:	f003 031c 	and.w	r3, r3, #28
 8002d54:	210f      	movs	r1, #15
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	4917      	ldr	r1, [pc, #92]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d5e:	4013      	ands	r3, r2
 8002d60:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f003 031c 	and.w	r3, r3, #28
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	4911      	ldr	r1, [pc, #68]	; (8002dbc <HAL_DMA_Init+0x16c>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40020407 	.word	0x40020407
 8002da4:	bffdfff8 	.word	0xbffdfff8
 8002da8:	cccccccd 	.word	0xcccccccd
 8002dac:	40020000 	.word	0x40020000
 8002db0:	bffdfbf8 	.word	0xbffdfbf8
 8002db4:	40020400 	.word	0x40020400
 8002db8:	400200a8 	.word	0x400200a8
 8002dbc:	400204a8 	.word	0x400204a8

08002dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Start_IT+0x20>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e04b      	b.n	8002e78 <HAL_DMA_Start_IT+0xb8>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d13a      	bne.n	8002e6a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2202      	movs	r2, #2
 8002df8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	68b9      	ldr	r1, [r7, #8]
 8002e18:	68f8      	ldr	r0, [r7, #12]
 8002e1a:	f000 f8e0 	bl	8002fde <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d008      	beq.n	8002e38 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f042 020e 	orr.w	r2, r2, #14
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	e00f      	b.n	8002e58 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f022 0204 	bic.w	r2, r2, #4
 8002e46:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 020a 	orr.w	r2, r2, #10
 8002e56:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0201 	orr.w	r2, r2, #1
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	e005      	b.n	8002e76 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e72:	2302      	movs	r3, #2
 8002e74:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9c:	f003 031c 	and.w	r3, r3, #28
 8002ea0:	2204      	movs	r2, #4
 8002ea2:	409a      	lsls	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d026      	beq.n	8002efa <HAL_DMA_IRQHandler+0x7a>
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d021      	beq.n	8002efa <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0320 	and.w	r3, r3, #32
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d107      	bne.n	8002ed4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0204 	bic.w	r2, r2, #4
 8002ed2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed8:	f003 021c 	and.w	r2, r3, #28
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	2104      	movs	r1, #4
 8002ee2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d071      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002ef8:	e06c      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	f003 031c 	and.w	r3, r3, #28
 8002f02:	2202      	movs	r2, #2
 8002f04:	409a      	lsls	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d02e      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xec>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d029      	beq.n	8002f6c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10b      	bne.n	8002f3e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f022 020a 	bic.w	r2, r2, #10
 8002f34:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	f003 021c 	and.w	r2, r3, #28
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	2102      	movs	r1, #2
 8002f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002f50:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d038      	beq.n	8002fd4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f6a:	e033      	b.n	8002fd4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f70:	f003 031c 	and.w	r3, r3, #28
 8002f74:	2208      	movs	r2, #8
 8002f76:	409a      	lsls	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d02a      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x156>
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	f003 0308 	and.w	r3, r3, #8
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d025      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 020e 	bic.w	r2, r2, #14
 8002f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 021c 	and.w	r2, r3, #28
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d004      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fd4:	bf00      	nop
 8002fd6:	bf00      	nop
}
 8002fd8:	3710      	adds	r7, #16
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bd80      	pop	{r7, pc}

08002fde <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b085      	sub	sp, #20
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	60f8      	str	r0, [r7, #12]
 8002fe6:	60b9      	str	r1, [r7, #8]
 8002fe8:	607a      	str	r2, [r7, #4]
 8002fea:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff0:	f003 021c 	and.w	r2, r3, #28
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8002ffe:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	2b10      	cmp	r3, #16
 800300e:	d108      	bne.n	8003022 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	687a      	ldr	r2, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68ba      	ldr	r2, [r7, #8]
 800301e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003020:	e007      	b.n	8003032 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	60da      	str	r2, [r3, #12]
}
 8003032:	bf00      	nop
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
	...

08003040 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800304a:	2300      	movs	r3, #0
 800304c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800304e:	e166      	b.n	800331e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	2101      	movs	r1, #1
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	4013      	ands	r3, r2
 800305e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f000 8158 	beq.w	8003318 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 0303 	and.w	r3, r3, #3
 8003070:	2b01      	cmp	r3, #1
 8003072:	d005      	beq.n	8003080 <HAL_GPIO_Init+0x40>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b02      	cmp	r3, #2
 800307e:	d130      	bne.n	80030e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	2203      	movs	r2, #3
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4013      	ands	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	68da      	ldr	r2, [r3, #12]
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030b6:	2201      	movs	r2, #1
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43db      	mvns	r3, r3
 80030c0:	693a      	ldr	r2, [r7, #16]
 80030c2:	4013      	ands	r3, r2
 80030c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	091b      	lsrs	r3, r3, #4
 80030cc:	f003 0201 	and.w	r2, r3, #1
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d017      	beq.n	800311e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	2203      	movs	r2, #3
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	693a      	ldr	r2, [r7, #16]
 8003102:	4013      	ands	r3, r2
 8003104:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	005b      	lsls	r3, r3, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d123      	bne.n	8003172 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08da      	lsrs	r2, r3, #3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3208      	adds	r2, #8
 8003132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	220f      	movs	r2, #15
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	08da      	lsrs	r2, r3, #3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3208      	adds	r2, #8
 800316c:	6939      	ldr	r1, [r7, #16]
 800316e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	2203      	movs	r2, #3
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4013      	ands	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0203 	and.w	r2, r3, #3
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	693a      	ldr	r2, [r7, #16]
 800319c:	4313      	orrs	r3, r2
 800319e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80b2 	beq.w	8003318 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b4:	4b61      	ldr	r3, [pc, #388]	; (800333c <HAL_GPIO_Init+0x2fc>)
 80031b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b8:	4a60      	ldr	r2, [pc, #384]	; (800333c <HAL_GPIO_Init+0x2fc>)
 80031ba:	f043 0301 	orr.w	r3, r3, #1
 80031be:	6613      	str	r3, [r2, #96]	; 0x60
 80031c0:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_GPIO_Init+0x2fc>)
 80031c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	60bb      	str	r3, [r7, #8]
 80031ca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031cc:	4a5c      	ldr	r2, [pc, #368]	; (8003340 <HAL_GPIO_Init+0x300>)
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	089b      	lsrs	r3, r3, #2
 80031d2:	3302      	adds	r3, #2
 80031d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	220f      	movs	r2, #15
 80031e4:	fa02 f303 	lsl.w	r3, r2, r3
 80031e8:	43db      	mvns	r3, r3
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	4013      	ands	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f6:	d02b      	beq.n	8003250 <HAL_GPIO_Init+0x210>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a52      	ldr	r2, [pc, #328]	; (8003344 <HAL_GPIO_Init+0x304>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d025      	beq.n	800324c <HAL_GPIO_Init+0x20c>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a51      	ldr	r2, [pc, #324]	; (8003348 <HAL_GPIO_Init+0x308>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d01f      	beq.n	8003248 <HAL_GPIO_Init+0x208>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a50      	ldr	r2, [pc, #320]	; (800334c <HAL_GPIO_Init+0x30c>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d019      	beq.n	8003244 <HAL_GPIO_Init+0x204>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a4f      	ldr	r2, [pc, #316]	; (8003350 <HAL_GPIO_Init+0x310>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d013      	beq.n	8003240 <HAL_GPIO_Init+0x200>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_GPIO_Init+0x314>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00d      	beq.n	800323c <HAL_GPIO_Init+0x1fc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a4d      	ldr	r2, [pc, #308]	; (8003358 <HAL_GPIO_Init+0x318>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <HAL_GPIO_Init+0x1f8>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a4c      	ldr	r2, [pc, #304]	; (800335c <HAL_GPIO_Init+0x31c>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d101      	bne.n	8003234 <HAL_GPIO_Init+0x1f4>
 8003230:	2307      	movs	r3, #7
 8003232:	e00e      	b.n	8003252 <HAL_GPIO_Init+0x212>
 8003234:	2308      	movs	r3, #8
 8003236:	e00c      	b.n	8003252 <HAL_GPIO_Init+0x212>
 8003238:	2306      	movs	r3, #6
 800323a:	e00a      	b.n	8003252 <HAL_GPIO_Init+0x212>
 800323c:	2305      	movs	r3, #5
 800323e:	e008      	b.n	8003252 <HAL_GPIO_Init+0x212>
 8003240:	2304      	movs	r3, #4
 8003242:	e006      	b.n	8003252 <HAL_GPIO_Init+0x212>
 8003244:	2303      	movs	r3, #3
 8003246:	e004      	b.n	8003252 <HAL_GPIO_Init+0x212>
 8003248:	2302      	movs	r3, #2
 800324a:	e002      	b.n	8003252 <HAL_GPIO_Init+0x212>
 800324c:	2301      	movs	r3, #1
 800324e:	e000      	b.n	8003252 <HAL_GPIO_Init+0x212>
 8003250:	2300      	movs	r3, #0
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	0092      	lsls	r2, r2, #2
 800325a:	4093      	lsls	r3, r2
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003262:	4937      	ldr	r1, [pc, #220]	; (8003340 <HAL_GPIO_Init+0x300>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3302      	adds	r3, #2
 800326a:	693a      	ldr	r2, [r7, #16]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <HAL_GPIO_Init+0x320>)
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003294:	4a32      	ldr	r2, [pc, #200]	; (8003360 <HAL_GPIO_Init+0x320>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800329a:	4b31      	ldr	r3, [pc, #196]	; (8003360 <HAL_GPIO_Init+0x320>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032be:	4a28      	ldr	r2, [pc, #160]	; (8003360 <HAL_GPIO_Init+0x320>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <HAL_GPIO_Init+0x320>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	43db      	mvns	r3, r3
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d003      	beq.n	80032e8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032e8:	4a1d      	ldr	r2, [pc, #116]	; (8003360 <HAL_GPIO_Init+0x320>)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032ee:	4b1c      	ldr	r3, [pc, #112]	; (8003360 <HAL_GPIO_Init+0x320>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	43db      	mvns	r3, r3
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	4013      	ands	r3, r2
 80032fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003312:	4a13      	ldr	r2, [pc, #76]	; (8003360 <HAL_GPIO_Init+0x320>)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	3301      	adds	r3, #1
 800331c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	f47f ae91 	bne.w	8003050 <HAL_GPIO_Init+0x10>
  }
}
 800332e:	bf00      	nop
 8003330:	bf00      	nop
 8003332:	371c      	adds	r7, #28
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40021000 	.word	0x40021000
 8003340:	40010000 	.word	0x40010000
 8003344:	48000400 	.word	0x48000400
 8003348:	48000800 	.word	0x48000800
 800334c:	48000c00 	.word	0x48000c00
 8003350:	48001000 	.word	0x48001000
 8003354:	48001400 	.word	0x48001400
 8003358:	48001800 	.word	0x48001800
 800335c:	48001c00 	.word	0x48001c00
 8003360:	40010400 	.word	0x40010400

08003364 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003364:	b480      	push	{r7}
 8003366:	b087      	sub	sp, #28
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
 800336c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336e:	2300      	movs	r3, #0
 8003370:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003372:	e0c9      	b.n	8003508 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003374:	2201      	movs	r2, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	4013      	ands	r3, r2
 8003380:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80bc 	beq.w	8003502 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800338a:	4a66      	ldr	r2, [pc, #408]	; (8003524 <HAL_GPIO_DeInit+0x1c0>)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	089b      	lsrs	r3, r3, #2
 8003390:	3302      	adds	r3, #2
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f003 0303 	and.w	r3, r3, #3
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	220f      	movs	r2, #15
 80033a2:	fa02 f303 	lsl.w	r3, r2, r3
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	4013      	ands	r3, r2
 80033aa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80033b2:	d02b      	beq.n	800340c <HAL_GPIO_DeInit+0xa8>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a5c      	ldr	r2, [pc, #368]	; (8003528 <HAL_GPIO_DeInit+0x1c4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d025      	beq.n	8003408 <HAL_GPIO_DeInit+0xa4>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a5b      	ldr	r2, [pc, #364]	; (800352c <HAL_GPIO_DeInit+0x1c8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d01f      	beq.n	8003404 <HAL_GPIO_DeInit+0xa0>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a5a      	ldr	r2, [pc, #360]	; (8003530 <HAL_GPIO_DeInit+0x1cc>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d019      	beq.n	8003400 <HAL_GPIO_DeInit+0x9c>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a59      	ldr	r2, [pc, #356]	; (8003534 <HAL_GPIO_DeInit+0x1d0>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d013      	beq.n	80033fc <HAL_GPIO_DeInit+0x98>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_GPIO_DeInit+0x1d4>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00d      	beq.n	80033f8 <HAL_GPIO_DeInit+0x94>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4a57      	ldr	r2, [pc, #348]	; (800353c <HAL_GPIO_DeInit+0x1d8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d007      	beq.n	80033f4 <HAL_GPIO_DeInit+0x90>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a56      	ldr	r2, [pc, #344]	; (8003540 <HAL_GPIO_DeInit+0x1dc>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d101      	bne.n	80033f0 <HAL_GPIO_DeInit+0x8c>
 80033ec:	2307      	movs	r3, #7
 80033ee:	e00e      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 80033f0:	2308      	movs	r3, #8
 80033f2:	e00c      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 80033f4:	2306      	movs	r3, #6
 80033f6:	e00a      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 80033f8:	2305      	movs	r3, #5
 80033fa:	e008      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 80033fc:	2304      	movs	r3, #4
 80033fe:	e006      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 8003400:	2303      	movs	r3, #3
 8003402:	e004      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 8003404:	2302      	movs	r3, #2
 8003406:	e002      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_GPIO_DeInit+0xaa>
 800340c:	2300      	movs	r3, #0
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	f002 0203 	and.w	r2, r2, #3
 8003414:	0092      	lsls	r2, r2, #2
 8003416:	4093      	lsls	r3, r2
 8003418:	68fa      	ldr	r2, [r7, #12]
 800341a:	429a      	cmp	r2, r3
 800341c:	d132      	bne.n	8003484 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800341e:	4b49      	ldr	r3, [pc, #292]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	4947      	ldr	r1, [pc, #284]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 8003428:	4013      	ands	r3, r2
 800342a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800342c:	4b45      	ldr	r3, [pc, #276]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	43db      	mvns	r3, r3
 8003434:	4943      	ldr	r1, [pc, #268]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 8003436:	4013      	ands	r3, r2
 8003438:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800343a:	4b42      	ldr	r3, [pc, #264]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 800343c:	68da      	ldr	r2, [r3, #12]
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	43db      	mvns	r3, r3
 8003442:	4940      	ldr	r1, [pc, #256]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 8003444:	4013      	ands	r3, r2
 8003446:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003448:	4b3e      	ldr	r3, [pc, #248]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	493c      	ldr	r1, [pc, #240]	; (8003544 <HAL_GPIO_DeInit+0x1e0>)
 8003452:	4013      	ands	r3, r2
 8003454:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f003 0303 	and.w	r3, r3, #3
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	220f      	movs	r2, #15
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003466:	4a2f      	ldr	r2, [pc, #188]	; (8003524 <HAL_GPIO_DeInit+0x1c0>)
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	089b      	lsrs	r3, r3, #2
 800346c:	3302      	adds	r3, #2
 800346e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	43da      	mvns	r2, r3
 8003476:	482b      	ldr	r0, [pc, #172]	; (8003524 <HAL_GPIO_DeInit+0x1c0>)
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	089b      	lsrs	r3, r3, #2
 800347c:	400a      	ands	r2, r1
 800347e:	3302      	adds	r3, #2
 8003480:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	2103      	movs	r1, #3
 800348e:	fa01 f303 	lsl.w	r3, r1, r3
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	08da      	lsrs	r2, r3, #3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	3208      	adds	r2, #8
 80034a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	220f      	movs	r2, #15
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	697a      	ldr	r2, [r7, #20]
 80034b6:	08d2      	lsrs	r2, r2, #3
 80034b8:	4019      	ands	r1, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3208      	adds	r2, #8
 80034be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2103      	movs	r1, #3
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	2101      	movs	r1, #1
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	fa01 f303 	lsl.w	r3, r1, r3
 80034e4:	43db      	mvns	r3, r3
 80034e6:	401a      	ands	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	005b      	lsls	r3, r3, #1
 80034f4:	2103      	movs	r1, #3
 80034f6:	fa01 f303 	lsl.w	r3, r1, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	401a      	ands	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	3301      	adds	r3, #1
 8003506:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa22 f303 	lsr.w	r3, r2, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af2f 	bne.w	8003374 <HAL_GPIO_DeInit+0x10>
  }
}
 8003516:	bf00      	nop
 8003518:	bf00      	nop
 800351a:	371c      	adds	r7, #28
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	40010000 	.word	0x40010000
 8003528:	48000400 	.word	0x48000400
 800352c:	48000800 	.word	0x48000800
 8003530:	48000c00 	.word	0x48000c00
 8003534:	48001000 	.word	0x48001000
 8003538:	48001400 	.word	0x48001400
 800353c:	48001800 	.word	0x48001800
 8003540:	48001c00 	.word	0x48001c00
 8003544:	40010400 	.word	0x40010400

08003548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	807b      	strh	r3, [r7, #2]
 8003554:	4613      	mov	r3, r2
 8003556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003558:	787b      	ldrb	r3, [r7, #1]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800355e:	887a      	ldrh	r2, [r7, #2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003564:	e002      	b.n	800356c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800358a:	887a      	ldrh	r2, [r7, #2]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4013      	ands	r3, r2
 8003590:	041a      	lsls	r2, r3, #16
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	43d9      	mvns	r1, r3
 8003596:	887b      	ldrh	r3, [r7, #2]
 8003598:	400b      	ands	r3, r1
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	619a      	str	r2, [r3, #24]
}
 80035a0:	bf00      	nop
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	4603      	mov	r3, r0
 80035b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80035b6:	4b08      	ldr	r3, [pc, #32]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	4013      	ands	r3, r2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80035c2:	4a05      	ldr	r2, [pc, #20]	; (80035d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80035c8:	88fb      	ldrh	r3, [r7, #6]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 f806 	bl	80035dc <HAL_GPIO_EXTI_Callback>
  }
}
 80035d0:	bf00      	nop
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	40010400 	.word	0x40010400

080035dc <HAL_GPIO_EXTI_Callback>:
/**
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	4603      	mov	r3, r0
 80035e4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
//	UNUSED(GPIO_Pin);
	switch(GPIO_Pin){
 80035e6:	88fb      	ldrh	r3, [r7, #6]
 80035e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035ec:	d02d      	beq.n	800364a <HAL_GPIO_EXTI_Callback+0x6e>
 80035ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035f2:	dc30      	bgt.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
 80035f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035f8:	d021      	beq.n	800363e <HAL_GPIO_EXTI_Callback+0x62>
 80035fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035fe:	dc2a      	bgt.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
 8003600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003604:	d015      	beq.n	8003632 <HAL_GPIO_EXTI_Callback+0x56>
 8003606:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800360a:	dc24      	bgt.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
 800360c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003610:	d003      	beq.n	800361a <HAL_GPIO_EXTI_Callback+0x3e>
 8003612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003616:	d006      	beq.n	8003626 <HAL_GPIO_EXTI_Callback+0x4a>
			break;
	}
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003618:	e01d      	b.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800361a:	2120      	movs	r1, #32
 800361c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003620:	f7ff ffaa 	bl	8003578 <HAL_GPIO_TogglePin>
			break;
 8003624:	e017      	b.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003626:	2120      	movs	r1, #32
 8003628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800362c:	f7ff ffa4 	bl	8003578 <HAL_GPIO_TogglePin>
			break;
 8003630:	e011      	b.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8003632:	2120      	movs	r1, #32
 8003634:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003638:	f7ff ff9e 	bl	8003578 <HAL_GPIO_TogglePin>
			break;
 800363c:	e00b      	b.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800363e:	2120      	movs	r1, #32
 8003640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003644:	f7ff ff98 	bl	8003578 <HAL_GPIO_TogglePin>
			break;
 8003648:	e005      	b.n	8003656 <HAL_GPIO_EXTI_Callback+0x7a>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800364a:	2120      	movs	r1, #32
 800364c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003650:	f7ff ff92 	bl	8003578 <HAL_GPIO_TogglePin>
			break;
 8003654:	bf00      	nop
}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d101      	bne.n	8003670 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e081      	b.n	8003774 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	d106      	bne.n	800368a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 f8a8 	bl	80037da <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2224      	movs	r2, #36	; 0x24
 800368e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f022 0201 	bic.w	r2, r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689a      	ldr	r2, [r3, #8]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d107      	bne.n	80036d8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689a      	ldr	r2, [r3, #8]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036d4:	609a      	str	r2, [r3, #8]
 80036d6:	e006      	b.n	80036e6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689a      	ldr	r2, [r3, #8]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036e4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d104      	bne.n	80036f8 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6812      	ldr	r2, [r2, #0]
 8003702:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800370a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68da      	ldr	r2, [r3, #12]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800371a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691a      	ldr	r2, [r3, #16]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69d9      	ldr	r1, [r3, #28]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1a      	ldr	r2, [r3, #32]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	3708      	adds	r7, #8
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b082      	sub	sp, #8
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e021      	b.n	80037d2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2224      	movs	r2, #36	; 0x24
 8003792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0201 	bic.w	r2, r2, #1
 80037a4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f821 	bl	80037ee <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2200      	movs	r2, #0
 80037b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037d0:	2300      	movs	r3, #0
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}

080037da <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80037ee:	b480      	push	{r7}
 80037f0:	b083      	sub	sp, #12
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
	...

08003804 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b088      	sub	sp, #32
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	4608      	mov	r0, r1
 800380e:	4611      	mov	r1, r2
 8003810:	461a      	mov	r2, r3
 8003812:	4603      	mov	r3, r0
 8003814:	817b      	strh	r3, [r7, #10]
 8003816:	460b      	mov	r3, r1
 8003818:	813b      	strh	r3, [r7, #8]
 800381a:	4613      	mov	r3, r2
 800381c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b20      	cmp	r3, #32
 8003828:	f040 80f9 	bne.w	8003a1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d002      	beq.n	8003838 <HAL_I2C_Mem_Write+0x34>
 8003832:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003834:	2b00      	cmp	r3, #0
 8003836:	d105      	bne.n	8003844 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003840:	2301      	movs	r3, #1
 8003842:	e0ed      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_I2C_Mem_Write+0x4e>
 800384e:	2302      	movs	r3, #2
 8003850:	e0e6      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800385a:	f7ff f8b5 	bl	80029c8 <HAL_GetTick>
 800385e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	9300      	str	r3, [sp, #0]
 8003864:	2319      	movs	r3, #25
 8003866:	2201      	movs	r2, #1
 8003868:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 fbd9 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e0d1      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2221      	movs	r2, #33	; 0x21
 8003880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2240      	movs	r2, #64	; 0x40
 8003888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6a3a      	ldr	r2, [r7, #32]
 8003896:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800389c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2200      	movs	r2, #0
 80038a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038a4:	88f8      	ldrh	r0, [r7, #6]
 80038a6:	893a      	ldrh	r2, [r7, #8]
 80038a8:	8979      	ldrh	r1, [r7, #10]
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	9301      	str	r3, [sp, #4]
 80038ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038b0:	9300      	str	r3, [sp, #0]
 80038b2:	4603      	mov	r3, r0
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 fae9 	bl	8003e8c <I2C_RequestMemoryWrite>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0a9      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2bff      	cmp	r3, #255	; 0xff
 80038d4:	d90e      	bls.n	80038f4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	22ff      	movs	r2, #255	; 0xff
 80038da:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	8979      	ldrh	r1, [r7, #10]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 fd41 	bl	8004374 <I2C_TransferConfig>
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	b2da      	uxtb	r2, r3
 8003904:	8979      	ldrh	r1, [r7, #10]
 8003906:	2300      	movs	r3, #0
 8003908:	9300      	str	r3, [sp, #0]
 800390a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fd30 	bl	8004374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fbc3 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e07b      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392c:	781a      	ldrb	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003938:	1c5a      	adds	r2, r3, #1
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003942:	b29b      	uxth	r3, r3
 8003944:	3b01      	subs	r3, #1
 8003946:	b29a      	uxth	r2, r3
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800395c:	b29b      	uxth	r3, r3
 800395e:	2b00      	cmp	r3, #0
 8003960:	d034      	beq.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003966:	2b00      	cmp	r3, #0
 8003968:	d130      	bne.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003970:	2200      	movs	r2, #0
 8003972:	2180      	movs	r1, #128	; 0x80
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fb55 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d001      	beq.n	8003984 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e04d      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003988:	b29b      	uxth	r3, r3
 800398a:	2bff      	cmp	r3, #255	; 0xff
 800398c:	d90e      	bls.n	80039ac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	22ff      	movs	r2, #255	; 0xff
 8003992:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003998:	b2da      	uxtb	r2, r3
 800399a:	8979      	ldrh	r1, [r7, #10]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fce5 	bl	8004374 <I2C_TransferConfig>
 80039aa:	e00f      	b.n	80039cc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	8979      	ldrh	r1, [r7, #10]
 80039be:	2300      	movs	r3, #0
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fcd4 	bl	8004374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d19e      	bne.n	8003914 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	68f8      	ldr	r0, [r7, #12]
 80039dc:	f000 fba2 	bl	8004124 <I2C_WaitOnSTOPFlagUntilTimeout>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e01a      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2220      	movs	r2, #32
 80039f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6859      	ldr	r1, [r3, #4]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <HAL_I2C_Mem_Write+0x224>)
 80039fe:	400b      	ands	r3, r1
 8003a00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e000      	b.n	8003a20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3718      	adds	r7, #24
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	fe00e800 	.word	0xfe00e800

08003a2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b088      	sub	sp, #32
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	4608      	mov	r0, r1
 8003a36:	4611      	mov	r1, r2
 8003a38:	461a      	mov	r2, r3
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	817b      	strh	r3, [r7, #10]
 8003a3e:	460b      	mov	r3, r1
 8003a40:	813b      	strh	r3, [r7, #8]
 8003a42:	4613      	mov	r3, r2
 8003a44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	f040 80fd 	bne.w	8003c4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a54:	6a3b      	ldr	r3, [r7, #32]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d002      	beq.n	8003a60 <HAL_I2C_Mem_Read+0x34>
 8003a5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d105      	bne.n	8003a6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0f1      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_I2C_Mem_Read+0x4e>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e0ea      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003a82:	f7fe ffa1 	bl	80029c8 <HAL_GetTick>
 8003a86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	2319      	movs	r3, #25
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f000 fac5 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d001      	beq.n	8003aa4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0d5      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2222      	movs	r2, #34	; 0x22
 8003aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2240      	movs	r2, #64	; 0x40
 8003ab0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003ac4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003acc:	88f8      	ldrh	r0, [r7, #6]
 8003ace:	893a      	ldrh	r2, [r7, #8]
 8003ad0:	8979      	ldrh	r1, [r7, #10]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	9301      	str	r3, [sp, #4]
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	9300      	str	r3, [sp, #0]
 8003ada:	4603      	mov	r3, r0
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 fa29 	bl	8003f34 <I2C_RequestMemoryRead>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0ad      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	2bff      	cmp	r3, #255	; 0xff
 8003afc:	d90e      	bls.n	8003b1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	22ff      	movs	r2, #255	; 0xff
 8003b02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	8979      	ldrh	r1, [r7, #10]
 8003b0c:	4b52      	ldr	r3, [pc, #328]	; (8003c58 <HAL_I2C_Mem_Read+0x22c>)
 8003b0e:	9300      	str	r3, [sp, #0]
 8003b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003b14:	68f8      	ldr	r0, [r7, #12]
 8003b16:	f000 fc2d 	bl	8004374 <I2C_TransferConfig>
 8003b1a:	e00f      	b.n	8003b3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b2a:	b2da      	uxtb	r2, r3
 8003b2c:	8979      	ldrh	r1, [r7, #10]
 8003b2e:	4b4a      	ldr	r3, [pc, #296]	; (8003c58 <HAL_I2C_Mem_Read+0x22c>)
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b36:	68f8      	ldr	r0, [r7, #12]
 8003b38:	f000 fc1c 	bl	8004374 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	9300      	str	r3, [sp, #0]
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2200      	movs	r2, #0
 8003b44:	2104      	movs	r1, #4
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f000 fa6c 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d001      	beq.n	8003b56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e07c      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d034      	beq.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d130      	bne.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	2180      	movs	r1, #128	; 0x80
 8003ba4:	68f8      	ldr	r0, [r7, #12]
 8003ba6:	f000 fa3d 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d001      	beq.n	8003bb4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e04d      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2bff      	cmp	r3, #255	; 0xff
 8003bbc:	d90e      	bls.n	8003bdc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	22ff      	movs	r2, #255	; 0xff
 8003bc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bc8:	b2da      	uxtb	r2, r3
 8003bca:	8979      	ldrh	r1, [r7, #10]
 8003bcc:	2300      	movs	r3, #0
 8003bce:	9300      	str	r3, [sp, #0]
 8003bd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	f000 fbcd 	bl	8004374 <I2C_TransferConfig>
 8003bda:	e00f      	b.n	8003bfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	8979      	ldrh	r1, [r7, #10]
 8003bee:	2300      	movs	r3, #0
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fbbc 	bl	8004374 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d19a      	bne.n	8003b3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa8a 	bl	8004124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e01a      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6859      	ldr	r1, [r3, #4]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <HAL_I2C_Mem_Read+0x230>)
 8003c2e:	400b      	ands	r3, r1
 8003c30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	e000      	b.n	8003c50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003c4e:	2302      	movs	r3, #2
  }
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3718      	adds	r7, #24
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	80002400 	.word	0x80002400
 8003c5c:	fe00e800 	.word	0xfe00e800

08003c60 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b08a      	sub	sp, #40	; 0x28
 8003c64:	af02      	add	r7, sp, #8
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	607a      	str	r2, [r7, #4]
 8003c6a:	603b      	str	r3, [r7, #0]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003c70:	2300      	movs	r3, #0
 8003c72:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b20      	cmp	r3, #32
 8003c7e:	f040 80f1 	bne.w	8003e64 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c90:	d101      	bne.n	8003c96 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0e7      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2C_IsDeviceReady+0x44>
 8003ca0:	2302      	movs	r3, #2
 8003ca2:	e0e0      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2224      	movs	r2, #36	; 0x24
 8003cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d107      	bne.n	8003cd2 <HAL_I2C_IsDeviceReady+0x72>
 8003cc2:	897b      	ldrh	r3, [r7, #10]
 8003cc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ccc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003cd0:	e004      	b.n	8003cdc <HAL_I2C_IsDeviceReady+0x7c>
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cd8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	6812      	ldr	r2, [r2, #0]
 8003ce0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003ce2:	f7fe fe71 	bl	80029c8 <HAL_GetTick>
 8003ce6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	bf0c      	ite	eq
 8003cf6:	2301      	moveq	r3, #1
 8003cf8:	2300      	movne	r3, #0
 8003cfa:	b2db      	uxtb	r3, r3
 8003cfc:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d14:	e034      	b.n	8003d80 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1c:	d01a      	beq.n	8003d54 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fe53 	bl	80029c8 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <HAL_I2C_IsDeviceReady+0xd4>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d10f      	bne.n	8003d54 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d40:	f043 0220 	orr.w	r2, r3, #32
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e088      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	f003 0320 	and.w	r3, r3, #32
 8003d5e:	2b20      	cmp	r3, #32
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	bf0c      	ite	eq
 8003d78:	2301      	moveq	r3, #1
 8003d7a:	2300      	movne	r3, #0
 8003d7c:	b2db      	uxtb	r3, r3
 8003d7e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003d80:	7ffb      	ldrb	r3, [r7, #31]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d102      	bne.n	8003d8c <HAL_I2C_IsDeviceReady+0x12c>
 8003d86:	7fbb      	ldrb	r3, [r7, #30]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d0c4      	beq.n	8003d16 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	f003 0310 	and.w	r3, r3, #16
 8003d96:	2b10      	cmp	r3, #16
 8003d98:	d01a      	beq.n	8003dd0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	9300      	str	r3, [sp, #0]
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	2120      	movs	r1, #32
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f000 f93d 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e058      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2220      	movs	r2, #32
 8003dba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2220      	movs	r2, #32
 8003dc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e04a      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	2120      	movs	r1, #32
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f922 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e03d      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	2210      	movs	r2, #16
 8003df0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2220      	movs	r2, #32
 8003df8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d118      	bne.n	8003e34 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e10:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	9300      	str	r3, [sp, #0]
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	2120      	movs	r1, #32
 8003e1c:	68f8      	ldr	r0, [r7, #12]
 8003e1e:	f000 f901 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003e22:	4603      	mov	r3, r0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e01c      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2220      	movs	r2, #32
 8003e32:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3301      	adds	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	f63f af3b 	bhi.w	8003cba <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2220      	movs	r2, #32
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e50:	f043 0220 	orr.w	r2, r3, #32
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e000      	b.n	8003e66 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8003e64:	2302      	movs	r3, #2
  }
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3720      	adds	r7, #32
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e7c:	b2db      	uxtb	r3, r3
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	8979      	ldrh	r1, [r7, #10]
 8003eac:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <I2C_RequestMemoryWrite+0xa4>)
 8003eae:	9300      	str	r3, [sp, #0]
 8003eb0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fa5d 	bl	8004374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eba:	69fa      	ldr	r2, [r7, #28]
 8003ebc:	69b9      	ldr	r1, [r7, #24]
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f8f0 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02c      	b.n	8003f28 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ece:	88fb      	ldrh	r3, [r7, #6]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d105      	bne.n	8003ee0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ed4:	893b      	ldrh	r3, [r7, #8]
 8003ed6:	b2da      	uxtb	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	629a      	str	r2, [r3, #40]	; 0x28
 8003ede:	e015      	b.n	8003f0c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003ee0:	893b      	ldrh	r3, [r7, #8]
 8003ee2:	0a1b      	lsrs	r3, r3, #8
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eee:	69fa      	ldr	r2, [r7, #28]
 8003ef0:	69b9      	ldr	r1, [r7, #24]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 f8d6 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e012      	b.n	8003f28 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2200      	movs	r2, #0
 8003f14:	2180      	movs	r1, #128	; 0x80
 8003f16:	68f8      	ldr	r0, [r7, #12]
 8003f18:	f000 f884 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d001      	beq.n	8003f26 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3710      	adds	r7, #16
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	80002000 	.word	0x80002000

08003f34 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af02      	add	r7, sp, #8
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	4608      	mov	r0, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	461a      	mov	r2, r3
 8003f42:	4603      	mov	r3, r0
 8003f44:	817b      	strh	r3, [r7, #10]
 8003f46:	460b      	mov	r3, r1
 8003f48:	813b      	strh	r3, [r7, #8]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	8979      	ldrh	r1, [r7, #10]
 8003f54:	4b20      	ldr	r3, [pc, #128]	; (8003fd8 <I2C_RequestMemoryRead+0xa4>)
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2300      	movs	r3, #0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa0a 	bl	8004374 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f60:	69fa      	ldr	r2, [r7, #28]
 8003f62:	69b9      	ldr	r1, [r7, #24]
 8003f64:	68f8      	ldr	r0, [r7, #12]
 8003f66:	f000 f89d 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d001      	beq.n	8003f74 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e02c      	b.n	8003fce <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f74:	88fb      	ldrh	r3, [r7, #6]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d105      	bne.n	8003f86 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003f7a:	893b      	ldrh	r3, [r7, #8]
 8003f7c:	b2da      	uxtb	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
 8003f84:	e015      	b.n	8003fb2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003f86:	893b      	ldrh	r3, [r7, #8]
 8003f88:	0a1b      	lsrs	r3, r3, #8
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f94:	69fa      	ldr	r2, [r7, #28]
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 f883 	bl	80040a4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e012      	b.n	8003fce <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003fa8:	893b      	ldrh	r3, [r7, #8]
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2140      	movs	r1, #64	; 0x40
 8003fbc:	68f8      	ldr	r0, [r7, #12]
 8003fbe:	f000 f831 	bl	8004024 <I2C_WaitOnFlagUntilTimeout>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d001      	beq.n	8003fcc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3710      	adds	r7, #16
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	80002000 	.word	0x80002000

08003fdc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b083      	sub	sp, #12
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 0302 	and.w	r3, r3, #2
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d103      	bne.n	8003ffa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	699b      	ldr	r3, [r3, #24]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d007      	beq.n	8004018 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699a      	ldr	r2, [r3, #24]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0201 	orr.w	r2, r2, #1
 8004016:	619a      	str	r2, [r3, #24]
  }
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	603b      	str	r3, [r7, #0]
 8004030:	4613      	mov	r3, r2
 8004032:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004034:	e022      	b.n	800407c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800403c:	d01e      	beq.n	800407c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7fe fcc3 	bl	80029c8 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	69bb      	ldr	r3, [r7, #24]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d302      	bcc.n	8004054 <I2C_WaitOnFlagUntilTimeout+0x30>
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d113      	bne.n	800407c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	f043 0220 	orr.w	r2, r3, #32
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2200      	movs	r2, #0
 800406c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e00f      	b.n	800409c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699a      	ldr	r2, [r3, #24]
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	4013      	ands	r3, r2
 8004086:	68ba      	ldr	r2, [r7, #8]
 8004088:	429a      	cmp	r2, r3
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	461a      	mov	r2, r3
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	429a      	cmp	r2, r3
 8004098:	d0cd      	beq.n	8004036 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800409a:	2300      	movs	r3, #0
}
 800409c:	4618      	mov	r0, r3
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040b0:	e02c      	b.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	68b9      	ldr	r1, [r7, #8]
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f000 f870 	bl	800419c <I2C_IsErrorOccurred>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d001      	beq.n	80040c6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e02a      	b.n	800411c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040cc:	d01e      	beq.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040ce:	f7fe fc7b 	bl	80029c8 <HAL_GetTick>
 80040d2:	4602      	mov	r2, r0
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d302      	bcc.n	80040e4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d113      	bne.n	800410c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e8:	f043 0220 	orr.w	r2, r3, #32
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e007      	b.n	800411c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	699b      	ldr	r3, [r3, #24]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d1cb      	bne.n	80040b2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004130:	e028      	b.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 f830 	bl	800419c <I2C_IsErrorOccurred>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e026      	b.n	8004194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004146:	f7fe fc3f 	bl	80029c8 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	429a      	cmp	r2, r3
 8004154:	d302      	bcc.n	800415c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d113      	bne.n	8004184 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004160:	f043 0220 	orr.w	r2, r3, #32
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2220      	movs	r2, #32
 800416c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e007      	b.n	8004194 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	2b20      	cmp	r3, #32
 8004190:	d1cf      	bne.n	8004132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b08a      	sub	sp, #40	; 0x28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041b6:	2300      	movs	r3, #0
 80041b8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d075      	beq.n	80042b4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2210      	movs	r2, #16
 80041ce:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041d0:	e056      	b.n	8004280 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d8:	d052      	beq.n	8004280 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041da:	f7fe fbf5 	bl	80029c8 <HAL_GetTick>
 80041de:	4602      	mov	r2, r0
 80041e0:	69fb      	ldr	r3, [r7, #28]
 80041e2:	1ad3      	subs	r3, r2, r3
 80041e4:	68ba      	ldr	r2, [r7, #8]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d302      	bcc.n	80041f0 <I2C_IsErrorOccurred+0x54>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d147      	bne.n	8004280 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041fa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004202:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800420e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004212:	d12e      	bne.n	8004272 <I2C_IsErrorOccurred+0xd6>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800421a:	d02a      	beq.n	8004272 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	2b20      	cmp	r3, #32
 8004220:	d027      	beq.n	8004272 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	685a      	ldr	r2, [r3, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004230:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004232:	f7fe fbc9 	bl	80029c8 <HAL_GetTick>
 8004236:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004238:	e01b      	b.n	8004272 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800423a:	f7fe fbc5 	bl	80029c8 <HAL_GetTick>
 800423e:	4602      	mov	r2, r0
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	1ad3      	subs	r3, r2, r3
 8004244:	2b19      	cmp	r3, #25
 8004246:	d914      	bls.n	8004272 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	f043 0220 	orr.w	r2, r3, #32
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d1dc      	bne.n	800423a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b20      	cmp	r3, #32
 800428c:	d003      	beq.n	8004296 <I2C_IsErrorOccurred+0xfa>
 800428e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004292:	2b00      	cmp	r3, #0
 8004294:	d09d      	beq.n	80041d2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429a:	2b00      	cmp	r3, #0
 800429c:	d103      	bne.n	80042a6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2220      	movs	r2, #32
 80042a4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80042a6:	6a3b      	ldr	r3, [r7, #32]
 80042a8:	f043 0304 	orr.w	r3, r3, #4
 80042ac:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	699b      	ldr	r3, [r3, #24]
 80042ba:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	f043 0301 	orr.w	r3, r3, #1
 80042cc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00b      	beq.n	8004300 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042e8:	6a3b      	ldr	r3, [r7, #32]
 80042ea:	f043 0308 	orr.w	r3, r3, #8
 80042ee:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00b      	beq.n	8004322 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800430a:	6a3b      	ldr	r3, [r7, #32]
 800430c:	f043 0302 	orr.w	r3, r3, #2
 8004310:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004322:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004326:	2b00      	cmp	r3, #0
 8004328:	d01c      	beq.n	8004364 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f7ff fe56 	bl	8003fdc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6859      	ldr	r1, [r3, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <I2C_IsErrorOccurred+0x1d4>)
 800433c:	400b      	ands	r3, r1
 800433e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	431a      	orrs	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	2220      	movs	r2, #32
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2200      	movs	r2, #0
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004368:	4618      	mov	r0, r3
 800436a:	3728      	adds	r7, #40	; 0x28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	fe00e800 	.word	0xfe00e800

08004374 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004374:	b480      	push	{r7}
 8004376:	b087      	sub	sp, #28
 8004378:	af00      	add	r7, sp, #0
 800437a:	60f8      	str	r0, [r7, #12]
 800437c:	607b      	str	r3, [r7, #4]
 800437e:	460b      	mov	r3, r1
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	4613      	mov	r3, r2
 8004384:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004386:	897b      	ldrh	r3, [r7, #10]
 8004388:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800438c:	7a7b      	ldrb	r3, [r7, #9]
 800438e:	041b      	lsls	r3, r3, #16
 8004390:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004394:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	4313      	orrs	r3, r2
 800439e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80043a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	6a3b      	ldr	r3, [r7, #32]
 80043ac:	0d5b      	lsrs	r3, r3, #21
 80043ae:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043b2:	4b08      	ldr	r3, [pc, #32]	; (80043d4 <I2C_TransferConfig+0x60>)
 80043b4:	430b      	orrs	r3, r1
 80043b6:	43db      	mvns	r3, r3
 80043b8:	ea02 0103 	and.w	r1, r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043c6:	bf00      	nop
 80043c8:	371c      	adds	r7, #28
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	03ff63ff 	.word	0x03ff63ff

080043d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80043d8:	b480      	push	{r7}
 80043da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80043dc:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40007000 	.word	0x40007000

080043f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b085      	sub	sp, #20
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004402:	d130      	bne.n	8004466 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004404:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800440c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004410:	d038      	beq.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004412:	4b20      	ldr	r3, [pc, #128]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800441a:	4a1e      	ldr	r2, [pc, #120]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800441c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004420:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004422:	4b1d      	ldr	r3, [pc, #116]	; (8004498 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	2232      	movs	r2, #50	; 0x32
 8004428:	fb02 f303 	mul.w	r3, r2, r3
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800442e:	fba2 2303 	umull	r2, r3, r2, r3
 8004432:	0c9b      	lsrs	r3, r3, #18
 8004434:	3301      	adds	r3, #1
 8004436:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004438:	e002      	b.n	8004440 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	3b01      	subs	r3, #1
 800443e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004440:	4b14      	ldr	r3, [pc, #80]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800444c:	d102      	bne.n	8004454 <HAL_PWREx_ControlVoltageScaling+0x60>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1f2      	bne.n	800443a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004454:	4b0f      	ldr	r3, [pc, #60]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d110      	bne.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004462:	2303      	movs	r3, #3
 8004464:	e00f      	b.n	8004486 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800446e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004472:	d007      	beq.n	8004484 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004474:	4b07      	ldr	r3, [pc, #28]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800447c:	4a05      	ldr	r2, [pc, #20]	; (8004494 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800447e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004482:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40007000 	.word	0x40007000
 8004498:	2000007c 	.word	0x2000007c
 800449c:	431bde83 	.word	0x431bde83

080044a0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80044a4:	4b05      	ldr	r3, [pc, #20]	; (80044bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a04      	ldr	r2, [pc, #16]	; (80044bc <HAL_PWREx_EnableVddIO2+0x1c>)
 80044aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044ae:	6053      	str	r3, [r2, #4]
}
 80044b0:	bf00      	nop
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40007000 	.word	0x40007000

080044c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d102      	bne.n	80044d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f000 bc04 	b.w	8004cdc <HAL_RCC_OscConfig+0x81c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044d4:	4ba0      	ldr	r3, [pc, #640]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 030c 	and.w	r3, r3, #12
 80044dc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044de:	4b9e      	ldr	r3, [pc, #632]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f003 0303 	and.w	r3, r3, #3
 80044e6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 80e4 	beq.w	80046be <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <HAL_RCC_OscConfig+0x4c>
 80044fc:	69bb      	ldr	r3, [r7, #24]
 80044fe:	2b0c      	cmp	r3, #12
 8004500:	f040 808b 	bne.w	800461a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b01      	cmp	r3, #1
 8004508:	f040 8087 	bne.w	800461a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800450c:	4b92      	ldr	r3, [pc, #584]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d005      	beq.n	8004524 <HAL_RCC_OscConfig+0x64>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e3db      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	4b8b      	ldr	r3, [pc, #556]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0308 	and.w	r3, r3, #8
 8004530:	2b00      	cmp	r3, #0
 8004532:	d004      	beq.n	800453e <HAL_RCC_OscConfig+0x7e>
 8004534:	4b88      	ldr	r3, [pc, #544]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800453c:	e005      	b.n	800454a <HAL_RCC_OscConfig+0x8a>
 800453e:	4b86      	ldr	r3, [pc, #536]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004544:	091b      	lsrs	r3, r3, #4
 8004546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800454a:	4293      	cmp	r3, r2
 800454c:	d223      	bcs.n	8004596 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	4618      	mov	r0, r3
 8004554:	f000 fdc2 	bl	80050dc <RCC_SetFlashLatencyFromMSIRange>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d001      	beq.n	8004562 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e3bc      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004562:	4b7d      	ldr	r3, [pc, #500]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a7c      	ldr	r2, [pc, #496]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004568:	f043 0308 	orr.w	r3, r3, #8
 800456c:	6013      	str	r3, [r2, #0]
 800456e:	4b7a      	ldr	r3, [pc, #488]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	4977      	ldr	r1, [pc, #476]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800457c:	4313      	orrs	r3, r2
 800457e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004580:	4b75      	ldr	r3, [pc, #468]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	69db      	ldr	r3, [r3, #28]
 800458c:	021b      	lsls	r3, r3, #8
 800458e:	4972      	ldr	r1, [pc, #456]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	e025      	b.n	80045e2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004596:	4b70      	ldr	r3, [pc, #448]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a6f      	ldr	r2, [pc, #444]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800459c:	f043 0308 	orr.w	r3, r3, #8
 80045a0:	6013      	str	r3, [r2, #0]
 80045a2:	4b6d      	ldr	r3, [pc, #436]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	496a      	ldr	r1, [pc, #424]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80045b0:	4313      	orrs	r3, r2
 80045b2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045b4:	4b68      	ldr	r3, [pc, #416]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	021b      	lsls	r3, r3, #8
 80045c2:	4965      	ldr	r1, [pc, #404]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80045c8:	69bb      	ldr	r3, [r7, #24]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f000 fd82 	bl	80050dc <RCC_SetFlashLatencyFromMSIRange>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d001      	beq.n	80045e2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e37c      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045e2:	f000 fc85 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b5b      	ldr	r3, [pc, #364]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	091b      	lsrs	r3, r3, #4
 80045ee:	f003 030f 	and.w	r3, r3, #15
 80045f2:	495a      	ldr	r1, [pc, #360]	; (800475c <HAL_RCC_OscConfig+0x29c>)
 80045f4:	5ccb      	ldrb	r3, [r1, r3]
 80045f6:	f003 031f 	and.w	r3, r3, #31
 80045fa:	fa22 f303 	lsr.w	r3, r2, r3
 80045fe:	4a58      	ldr	r2, [pc, #352]	; (8004760 <HAL_RCC_OscConfig+0x2a0>)
 8004600:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004602:	4b58      	ldr	r3, [pc, #352]	; (8004764 <HAL_RCC_OscConfig+0x2a4>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7fe f884 	bl	8002714 <HAL_InitTick>
 800460c:	4603      	mov	r3, r0
 800460e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004610:	7bfb      	ldrb	r3, [r7, #15]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d052      	beq.n	80046bc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004616:	7bfb      	ldrb	r3, [r7, #15]
 8004618:	e360      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d032      	beq.n	8004688 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004622:	4b4d      	ldr	r3, [pc, #308]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a4c      	ldr	r2, [pc, #304]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800462e:	f7fe f9cb 	bl	80029c8 <HAL_GetTick>
 8004632:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004634:	e008      	b.n	8004648 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004636:	f7fe f9c7 	bl	80029c8 <HAL_GetTick>
 800463a:	4602      	mov	r2, r0
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	1ad3      	subs	r3, r2, r3
 8004640:	2b02      	cmp	r3, #2
 8004642:	d901      	bls.n	8004648 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e349      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004648:	4b43      	ldr	r3, [pc, #268]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0302 	and.w	r3, r3, #2
 8004650:	2b00      	cmp	r3, #0
 8004652:	d0f0      	beq.n	8004636 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004654:	4b40      	ldr	r3, [pc, #256]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a3f      	ldr	r2, [pc, #252]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800465a:	f043 0308 	orr.w	r3, r3, #8
 800465e:	6013      	str	r3, [r2, #0]
 8004660:	4b3d      	ldr	r3, [pc, #244]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	493a      	ldr	r1, [pc, #232]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800466e:	4313      	orrs	r3, r2
 8004670:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004672:	4b39      	ldr	r3, [pc, #228]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	021b      	lsls	r3, r3, #8
 8004680:	4935      	ldr	r1, [pc, #212]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004682:	4313      	orrs	r3, r2
 8004684:	604b      	str	r3, [r1, #4]
 8004686:	e01a      	b.n	80046be <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004688:	4b33      	ldr	r3, [pc, #204]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a32      	ldr	r2, [pc, #200]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800468e:	f023 0301 	bic.w	r3, r3, #1
 8004692:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004694:	f7fe f998 	bl	80029c8 <HAL_GetTick>
 8004698:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800469a:	e008      	b.n	80046ae <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800469c:	f7fe f994 	bl	80029c8 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d901      	bls.n	80046ae <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046aa:	2303      	movs	r3, #3
 80046ac:	e316      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046ae:	4b2a      	ldr	r3, [pc, #168]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d1f0      	bne.n	800469c <HAL_RCC_OscConfig+0x1dc>
 80046ba:	e000      	b.n	80046be <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d073      	beq.n	80047b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80046ca:	69bb      	ldr	r3, [r7, #24]
 80046cc:	2b08      	cmp	r3, #8
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_OscConfig+0x21c>
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d10e      	bne.n	80046f4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	2b03      	cmp	r3, #3
 80046da:	d10b      	bne.n	80046f4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046dc:	4b1e      	ldr	r3, [pc, #120]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d063      	beq.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d15f      	bne.n	80047b0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e2f3      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d106      	bne.n	800470c <HAL_RCC_OscConfig+0x24c>
 80046fe:	4b16      	ldr	r3, [pc, #88]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e01d      	b.n	8004748 <HAL_RCC_OscConfig+0x288>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004714:	d10c      	bne.n	8004730 <HAL_RCC_OscConfig+0x270>
 8004716:	4b10      	ldr	r3, [pc, #64]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a0f      	ldr	r2, [pc, #60]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800471c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	e00b      	b.n	8004748 <HAL_RCC_OscConfig+0x288>
 8004730:	4b09      	ldr	r3, [pc, #36]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a08      	ldr	r2, [pc, #32]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004736:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a05      	ldr	r2, [pc, #20]	; (8004758 <HAL_RCC_OscConfig+0x298>)
 8004742:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004746:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d01b      	beq.n	8004788 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004750:	f7fe f93a 	bl	80029c8 <HAL_GetTick>
 8004754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004756:	e010      	b.n	800477a <HAL_RCC_OscConfig+0x2ba>
 8004758:	40021000 	.word	0x40021000
 800475c:	080085c0 	.word	0x080085c0
 8004760:	2000007c 	.word	0x2000007c
 8004764:	20000080 	.word	0x20000080
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004768:	f7fe f92e 	bl	80029c8 <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b64      	cmp	r3, #100	; 0x64
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e2b0      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800477a:	4baf      	ldr	r3, [pc, #700]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0f0      	beq.n	8004768 <HAL_RCC_OscConfig+0x2a8>
 8004786:	e014      	b.n	80047b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004788:	f7fe f91e 	bl	80029c8 <HAL_GetTick>
 800478c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800478e:	e008      	b.n	80047a2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004790:	f7fe f91a 	bl	80029c8 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	2b64      	cmp	r3, #100	; 0x64
 800479c:	d901      	bls.n	80047a2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800479e:	2303      	movs	r3, #3
 80047a0:	e29c      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047a2:	4ba5      	ldr	r3, [pc, #660]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d1f0      	bne.n	8004790 <HAL_RCC_OscConfig+0x2d0>
 80047ae:	e000      	b.n	80047b2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d060      	beq.n	8004880 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_OscConfig+0x310>
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	2b0c      	cmp	r3, #12
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	d116      	bne.n	80047fe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047d0:	4b99      	ldr	r3, [pc, #612]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d005      	beq.n	80047e8 <HAL_RCC_OscConfig+0x328>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e279      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b93      	ldr	r3, [pc, #588]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
 80047f4:	061b      	lsls	r3, r3, #24
 80047f6:	4990      	ldr	r1, [pc, #576]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80047f8:	4313      	orrs	r3, r2
 80047fa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80047fc:	e040      	b.n	8004880 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	68db      	ldr	r3, [r3, #12]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d023      	beq.n	800484e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004806:	4b8c      	ldr	r3, [pc, #560]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a8b      	ldr	r2, [pc, #556]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800480c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004812:	f7fe f8d9 	bl	80029c8 <HAL_GetTick>
 8004816:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004818:	e008      	b.n	800482c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800481a:	f7fe f8d5 	bl	80029c8 <HAL_GetTick>
 800481e:	4602      	mov	r2, r0
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	2b02      	cmp	r3, #2
 8004826:	d901      	bls.n	800482c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004828:	2303      	movs	r3, #3
 800482a:	e257      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800482c:	4b82      	ldr	r3, [pc, #520]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004834:	2b00      	cmp	r3, #0
 8004836:	d0f0      	beq.n	800481a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004838:	4b7f      	ldr	r3, [pc, #508]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	061b      	lsls	r3, r3, #24
 8004846:	497c      	ldr	r1, [pc, #496]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004848:	4313      	orrs	r3, r2
 800484a:	604b      	str	r3, [r1, #4]
 800484c:	e018      	b.n	8004880 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800484e:	4b7a      	ldr	r3, [pc, #488]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a79      	ldr	r2, [pc, #484]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004858:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485a:	f7fe f8b5 	bl	80029c8 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004862:	f7fe f8b1 	bl	80029c8 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e233      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004874:	4b70      	ldr	r3, [pc, #448]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800487c:	2b00      	cmp	r3, #0
 800487e:	d1f0      	bne.n	8004862 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f003 0308 	and.w	r3, r3, #8
 8004888:	2b00      	cmp	r3, #0
 800488a:	d03c      	beq.n	8004906 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01c      	beq.n	80048ce <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004894:	4b68      	ldr	r3, [pc, #416]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	4a67      	ldr	r2, [pc, #412]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800489c:	f043 0301 	orr.w	r3, r3, #1
 80048a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a4:	f7fe f890 	bl	80029c8 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048aa:	e008      	b.n	80048be <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048ac:	f7fe f88c 	bl	80029c8 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e20e      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048be:	4b5e      	ldr	r3, [pc, #376]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0ef      	beq.n	80048ac <HAL_RCC_OscConfig+0x3ec>
 80048cc:	e01b      	b.n	8004906 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048ce:	4b5a      	ldr	r3, [pc, #360]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80048d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d4:	4a58      	ldr	r2, [pc, #352]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048de:	f7fe f873 	bl	80029c8 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048e6:	f7fe f86f 	bl	80029c8 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e1f1      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80048f8:	4b4f      	ldr	r3, [pc, #316]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80048fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1ef      	bne.n	80048e6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 80a6 	beq.w	8004a60 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004914:	2300      	movs	r3, #0
 8004916:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004918:	4b47      	ldr	r3, [pc, #284]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800491a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800491c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10d      	bne.n	8004940 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004924:	4b44      	ldr	r3, [pc, #272]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004928:	4a43      	ldr	r2, [pc, #268]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800492a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800492e:	6593      	str	r3, [r2, #88]	; 0x58
 8004930:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	60bb      	str	r3, [r7, #8]
 800493a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800493c:	2301      	movs	r3, #1
 800493e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004940:	4b3e      	ldr	r3, [pc, #248]	; (8004a3c <HAL_RCC_OscConfig+0x57c>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004948:	2b00      	cmp	r3, #0
 800494a:	d118      	bne.n	800497e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800494c:	4b3b      	ldr	r3, [pc, #236]	; (8004a3c <HAL_RCC_OscConfig+0x57c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a3a      	ldr	r2, [pc, #232]	; (8004a3c <HAL_RCC_OscConfig+0x57c>)
 8004952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004956:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004958:	f7fe f836 	bl	80029c8 <HAL_GetTick>
 800495c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800495e:	e008      	b.n	8004972 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004960:	f7fe f832 	bl	80029c8 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	2b02      	cmp	r3, #2
 800496c:	d901      	bls.n	8004972 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800496e:	2303      	movs	r3, #3
 8004970:	e1b4      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004972:	4b32      	ldr	r3, [pc, #200]	; (8004a3c <HAL_RCC_OscConfig+0x57c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800497a:	2b00      	cmp	r3, #0
 800497c:	d0f0      	beq.n	8004960 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	2b01      	cmp	r3, #1
 8004984:	d108      	bne.n	8004998 <HAL_RCC_OscConfig+0x4d8>
 8004986:	4b2c      	ldr	r3, [pc, #176]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498c:	4a2a      	ldr	r2, [pc, #168]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 800498e:	f043 0301 	orr.w	r3, r3, #1
 8004992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004996:	e024      	b.n	80049e2 <HAL_RCC_OscConfig+0x522>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b05      	cmp	r3, #5
 800499e:	d110      	bne.n	80049c2 <HAL_RCC_OscConfig+0x502>
 80049a0:	4b25      	ldr	r3, [pc, #148]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049a6:	4a24      	ldr	r2, [pc, #144]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049b0:	4b21      	ldr	r3, [pc, #132]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049b6:	4a20      	ldr	r2, [pc, #128]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049c0:	e00f      	b.n	80049e2 <HAL_RCC_OscConfig+0x522>
 80049c2:	4b1d      	ldr	r3, [pc, #116]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	4a1b      	ldr	r2, [pc, #108]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049ca:	f023 0301 	bic.w	r3, r3, #1
 80049ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049d2:	4b19      	ldr	r3, [pc, #100]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d8:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 80049da:	f023 0304 	bic.w	r3, r3, #4
 80049de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d016      	beq.n	8004a18 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ea:	f7fd ffed 	bl	80029c8 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80049f0:	e00a      	b.n	8004a08 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049f2:	f7fd ffe9 	bl	80029c8 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e169      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_RCC_OscConfig+0x578>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0ed      	beq.n	80049f2 <HAL_RCC_OscConfig+0x532>
 8004a16:	e01a      	b.n	8004a4e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a18:	f7fd ffd6 	bl	80029c8 <HAL_GetTick>
 8004a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a1e:	e00f      	b.n	8004a40 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a20:	f7fd ffd2 	bl	80029c8 <HAL_GetTick>
 8004a24:	4602      	mov	r2, r0
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	1ad3      	subs	r3, r2, r3
 8004a2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d906      	bls.n	8004a40 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e152      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a40:	4ba8      	ldr	r3, [pc, #672]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	f003 0302 	and.w	r3, r3, #2
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1e8      	bne.n	8004a20 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a4e:	7ffb      	ldrb	r3, [r7, #31]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d105      	bne.n	8004a60 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a54:	4ba3      	ldr	r3, [pc, #652]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a58:	4aa2      	ldr	r2, [pc, #648]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a5e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0320 	and.w	r3, r3, #32
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d03c      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01c      	beq.n	8004aae <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004a74:	4b9b      	ldr	r3, [pc, #620]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004a76:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004a7a:	4a9a      	ldr	r2, [pc, #616]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004a7c:	f043 0301 	orr.w	r3, r3, #1
 8004a80:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a84:	f7fd ffa0 	bl	80029c8 <HAL_GetTick>
 8004a88:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a8a:	e008      	b.n	8004a9e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a8c:	f7fd ff9c 	bl	80029c8 <HAL_GetTick>
 8004a90:	4602      	mov	r2, r0
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	1ad3      	subs	r3, r2, r3
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d901      	bls.n	8004a9e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004a9a:	2303      	movs	r3, #3
 8004a9c:	e11e      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004a9e:	4b91      	ldr	r3, [pc, #580]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004aa0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0ef      	beq.n	8004a8c <HAL_RCC_OscConfig+0x5cc>
 8004aac:	e01b      	b.n	8004ae6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004aae:	4b8d      	ldr	r3, [pc, #564]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ab4:	4a8b      	ldr	r2, [pc, #556]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004ab6:	f023 0301 	bic.w	r3, r3, #1
 8004aba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abe:	f7fd ff83 	bl	80029c8 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ac6:	f7fd ff7f 	bl	80029c8 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e101      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ad8:	4b82      	ldr	r3, [pc, #520]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1ef      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	f000 80f5 	beq.w	8004cda <HAL_RCC_OscConfig+0x81a>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af4:	2b02      	cmp	r3, #2
 8004af6:	f040 80cb 	bne.w	8004c90 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004afa:	4b7a      	ldr	r3, [pc, #488]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	f003 0203 	and.w	r2, r3, #3
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d12c      	bne.n	8004b68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d123      	bne.n	8004b68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b2a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d11b      	bne.n	8004b68 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b3c:	429a      	cmp	r2, r3
 8004b3e:	d113      	bne.n	8004b68 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4a:	085b      	lsrs	r3, r3, #1
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d109      	bne.n	8004b68 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	3b01      	subs	r3, #1
 8004b62:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d06d      	beq.n	8004c44 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	2b0c      	cmp	r3, #12
 8004b6c:	d068      	beq.n	8004c40 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004b6e:	4b5d      	ldr	r3, [pc, #372]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004b7a:	4b5a      	ldr	r3, [pc, #360]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0a8      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004b8a:	4b56      	ldr	r3, [pc, #344]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a55      	ldr	r2, [pc, #340]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004b90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b94:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004b96:	f7fd ff17 	bl	80029c8 <HAL_GetTick>
 8004b9a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004b9c:	e008      	b.n	8004bb0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b9e:	f7fd ff13 	bl	80029c8 <HAL_GetTick>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d901      	bls.n	8004bb0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e095      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bb0:	4b4c      	ldr	r3, [pc, #304]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1f0      	bne.n	8004b9e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bbc:	4b49      	ldr	r3, [pc, #292]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004bbe:	68da      	ldr	r2, [r3, #12]
 8004bc0:	4b49      	ldr	r3, [pc, #292]	; (8004ce8 <HAL_RCC_OscConfig+0x828>)
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004bcc:	3a01      	subs	r2, #1
 8004bce:	0112      	lsls	r2, r2, #4
 8004bd0:	4311      	orrs	r1, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bd6:	0212      	lsls	r2, r2, #8
 8004bd8:	4311      	orrs	r1, r2
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004bde:	0852      	lsrs	r2, r2, #1
 8004be0:	3a01      	subs	r2, #1
 8004be2:	0552      	lsls	r2, r2, #21
 8004be4:	4311      	orrs	r1, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004bea:	0852      	lsrs	r2, r2, #1
 8004bec:	3a01      	subs	r2, #1
 8004bee:	0652      	lsls	r2, r2, #25
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004bf6:	06d2      	lsls	r2, r2, #27
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	493a      	ldr	r1, [pc, #232]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c00:	4b38      	ldr	r3, [pc, #224]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a37      	ldr	r2, [pc, #220]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c0c:	4b35      	ldr	r3, [pc, #212]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a34      	ldr	r2, [pc, #208]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c16:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c18:	f7fd fed6 	bl	80029c8 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fd fed2 	bl	80029c8 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e054      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c32:	4b2c      	ldr	r3, [pc, #176]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c3e:	e04c      	b.n	8004cda <HAL_RCC_OscConfig+0x81a>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e04b      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c44:	4b27      	ldr	r3, [pc, #156]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d144      	bne.n	8004cda <HAL_RCC_OscConfig+0x81a>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c50:	4b24      	ldr	r3, [pc, #144]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c5a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c5c:	4b21      	ldr	r3, [pc, #132]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	4a20      	ldr	r2, [pc, #128]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c66:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004c68:	f7fd feae 	bl	80029c8 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fd feaa 	bl	80029c8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e02c      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c82:	4b18      	ldr	r3, [pc, #96]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d0f0      	beq.n	8004c70 <HAL_RCC_OscConfig+0x7b0>
 8004c8e:	e024      	b.n	8004cda <HAL_RCC_OscConfig+0x81a>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	2b0c      	cmp	r3, #12
 8004c94:	d01f      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x816>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c96:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a12      	ldr	r2, [pc, #72]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004c9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca2:	f7fd fe91 	bl	80029c8 <HAL_GetTick>
 8004ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ca8:	e008      	b.n	8004cbc <HAL_RCC_OscConfig+0x7fc>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004caa:	f7fd fe8d 	bl	80029c8 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <HAL_RCC_OscConfig+0x7fc>
          {
            return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e00f      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cbc:	4b09      	ldr	r3, [pc, #36]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1f0      	bne.n	8004caa <HAL_RCC_OscConfig+0x7ea>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004cc8:	4b06      	ldr	r3, [pc, #24]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	4905      	ldr	r1, [pc, #20]	; (8004ce4 <HAL_RCC_OscConfig+0x824>)
 8004cce:	4b07      	ldr	r3, [pc, #28]	; (8004cec <HAL_RCC_OscConfig+0x82c>)
 8004cd0:	4013      	ands	r3, r2
 8004cd2:	60cb      	str	r3, [r1, #12]
 8004cd4:	e001      	b.n	8004cda <HAL_RCC_OscConfig+0x81a>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <HAL_RCC_OscConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3720      	adds	r7, #32
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	40021000 	.word	0x40021000
 8004ce8:	019d808c 	.word	0x019d808c
 8004cec:	feeefffc 	.word	0xfeeefffc

08004cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e0e7      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d04:	4b75      	ldr	r3, [pc, #468]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f003 0307 	and.w	r3, r3, #7
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d910      	bls.n	8004d34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d12:	4b72      	ldr	r3, [pc, #456]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 0207 	bic.w	r2, r3, #7
 8004d1a:	4970      	ldr	r1, [pc, #448]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d22:	4b6e      	ldr	r3, [pc, #440]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0307 	and.w	r3, r3, #7
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	d001      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	e0cf      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0302 	and.w	r3, r3, #2
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d010      	beq.n	8004d62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	689a      	ldr	r2, [r3, #8]
 8004d44:	4b66      	ldr	r3, [pc, #408]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d908      	bls.n	8004d62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d50:	4b63      	ldr	r3, [pc, #396]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	4960      	ldr	r1, [pc, #384]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d04c      	beq.n	8004e08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d107      	bne.n	8004d86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d76:	4b5a      	ldr	r3, [pc, #360]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d121      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e0a6      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d107      	bne.n	8004d9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d8e:	4b54      	ldr	r3, [pc, #336]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d115      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e09a      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d107      	bne.n	8004db6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004da6:	4b4e      	ldr	r3, [pc, #312]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0302 	and.w	r3, r3, #2
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d109      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e08e      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004db6:	4b4a      	ldr	r3, [pc, #296]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e086      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004dc6:	4b46      	ldr	r3, [pc, #280]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f023 0203 	bic.w	r2, r3, #3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	4943      	ldr	r1, [pc, #268]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dd8:	f7fd fdf6 	bl	80029c8 <HAL_GetTick>
 8004ddc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dde:	e00a      	b.n	8004df6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004de0:	f7fd fdf2 	bl	80029c8 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e06e      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df6:	4b3a      	ldr	r3, [pc, #232]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 020c 	and.w	r2, r3, #12
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d1eb      	bne.n	8004de0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d010      	beq.n	8004e36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b31      	ldr	r3, [pc, #196]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d208      	bcs.n	8004e36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e24:	4b2e      	ldr	r3, [pc, #184]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	492b      	ldr	r1, [pc, #172]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e36:	4b29      	ldr	r3, [pc, #164]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0307 	and.w	r3, r3, #7
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d210      	bcs.n	8004e66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e44:	4b25      	ldr	r3, [pc, #148]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f023 0207 	bic.w	r2, r3, #7
 8004e4c:	4923      	ldr	r1, [pc, #140]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e54:	4b21      	ldr	r3, [pc, #132]	; (8004edc <HAL_RCC_ClockConfig+0x1ec>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d001      	beq.n	8004e66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e036      	b.n	8004ed4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 0304 	and.w	r3, r3, #4
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	4918      	ldr	r1, [pc, #96]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0308 	and.w	r3, r3, #8
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d009      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4910      	ldr	r1, [pc, #64]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ea4:	f000 f824 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	091b      	lsrs	r3, r3, #4
 8004eb0:	f003 030f 	and.w	r3, r3, #15
 8004eb4:	490b      	ldr	r1, [pc, #44]	; (8004ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8004eb6:	5ccb      	ldrb	r3, [r1, r3]
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ec0:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8004ec2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ec4:	4b09      	ldr	r3, [pc, #36]	; (8004eec <HAL_RCC_ClockConfig+0x1fc>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f7fd fc23 	bl	8002714 <HAL_InitTick>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	72fb      	strb	r3, [r7, #11]

  return status;
 8004ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40022000 	.word	0x40022000
 8004ee0:	40021000 	.word	0x40021000
 8004ee4:	080085c0 	.word	0x080085c0
 8004ee8:	2000007c 	.word	0x2000007c
 8004eec:	20000080 	.word	0x20000080

08004ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b089      	sub	sp, #36	; 0x24
 8004ef4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61fb      	str	r3, [r7, #28]
 8004efa:	2300      	movs	r3, #0
 8004efc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004efe:	4b3e      	ldr	r3, [pc, #248]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 030c 	and.w	r3, r3, #12
 8004f06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f08:	4b3b      	ldr	r3, [pc, #236]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f0a:	68db      	ldr	r3, [r3, #12]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d005      	beq.n	8004f24 <HAL_RCC_GetSysClockFreq+0x34>
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	2b0c      	cmp	r3, #12
 8004f1c:	d121      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d11e      	bne.n	8004f62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f24:	4b34      	ldr	r3, [pc, #208]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d107      	bne.n	8004f40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f30:	4b31      	ldr	r3, [pc, #196]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f36:	0a1b      	lsrs	r3, r3, #8
 8004f38:	f003 030f 	and.w	r3, r3, #15
 8004f3c:	61fb      	str	r3, [r7, #28]
 8004f3e:	e005      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f40:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	091b      	lsrs	r3, r3, #4
 8004f46:	f003 030f 	and.w	r3, r3, #15
 8004f4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10d      	bne.n	8004f78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f60:	e00a      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	2b04      	cmp	r3, #4
 8004f66:	d102      	bne.n	8004f6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004f68:	4b25      	ldr	r3, [pc, #148]	; (8005000 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	e004      	b.n	8004f78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004f74:	4b23      	ldr	r3, [pc, #140]	; (8005004 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	2b0c      	cmp	r3, #12
 8004f7c:	d134      	bne.n	8004fe8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004f7e:	4b1e      	ldr	r3, [pc, #120]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004f88:	68bb      	ldr	r3, [r7, #8]
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d003      	beq.n	8004f96 <HAL_RCC_GetSysClockFreq+0xa6>
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d003      	beq.n	8004f9c <HAL_RCC_GetSysClockFreq+0xac>
 8004f94:	e005      	b.n	8004fa2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004f96:	4b1a      	ldr	r3, [pc, #104]	; (8005000 <HAL_RCC_GetSysClockFreq+0x110>)
 8004f98:	617b      	str	r3, [r7, #20]
      break;
 8004f9a:	e005      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004f9c:	4b19      	ldr	r3, [pc, #100]	; (8005004 <HAL_RCC_GetSysClockFreq+0x114>)
 8004f9e:	617b      	str	r3, [r7, #20]
      break;
 8004fa0:	e002      	b.n	8004fa8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fa2:	69fb      	ldr	r3, [r7, #28]
 8004fa4:	617b      	str	r3, [r7, #20]
      break;
 8004fa6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fa8:	4b13      	ldr	r3, [pc, #76]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	f003 0307 	and.w	r3, r3, #7
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004fb6:	4b10      	ldr	r3, [pc, #64]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	0a1b      	lsrs	r3, r3, #8
 8004fbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	fb02 f203 	mul.w	r2, r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fcc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004fce:	4b0a      	ldr	r3, [pc, #40]	; (8004ff8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fd0:	68db      	ldr	r3, [r3, #12]
 8004fd2:	0e5b      	lsrs	r3, r3, #25
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	3301      	adds	r3, #1
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fe6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004fe8:	69bb      	ldr	r3, [r7, #24]
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3724      	adds	r7, #36	; 0x24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	40021000 	.word	0x40021000
 8004ffc:	080085d8 	.word	0x080085d8
 8005000:	00f42400 	.word	0x00f42400
 8005004:	007a1200 	.word	0x007a1200

08005008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005008:	b480      	push	{r7}
 800500a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800500c:	4b03      	ldr	r3, [pc, #12]	; (800501c <HAL_RCC_GetHCLKFreq+0x14>)
 800500e:	681b      	ldr	r3, [r3, #0]
}
 8005010:	4618      	mov	r0, r3
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	2000007c 	.word	0x2000007c

08005020 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005024:	f7ff fff0 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005028:	4602      	mov	r2, r0
 800502a:	4b06      	ldr	r3, [pc, #24]	; (8005044 <HAL_RCC_GetPCLK1Freq+0x24>)
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	0a1b      	lsrs	r3, r3, #8
 8005030:	f003 0307 	and.w	r3, r3, #7
 8005034:	4904      	ldr	r1, [pc, #16]	; (8005048 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005036:	5ccb      	ldrb	r3, [r1, r3]
 8005038:	f003 031f 	and.w	r3, r3, #31
 800503c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005040:	4618      	mov	r0, r3
 8005042:	bd80      	pop	{r7, pc}
 8005044:	40021000 	.word	0x40021000
 8005048:	080085d0 	.word	0x080085d0

0800504c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005050:	f7ff ffda 	bl	8005008 <HAL_RCC_GetHCLKFreq>
 8005054:	4602      	mov	r2, r0
 8005056:	4b06      	ldr	r3, [pc, #24]	; (8005070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	0adb      	lsrs	r3, r3, #11
 800505c:	f003 0307 	and.w	r3, r3, #7
 8005060:	4904      	ldr	r1, [pc, #16]	; (8005074 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005062:	5ccb      	ldrb	r3, [r1, r3]
 8005064:	f003 031f 	and.w	r3, r3, #31
 8005068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800506c:	4618      	mov	r0, r3
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40021000 	.word	0x40021000
 8005074:	080085d0 	.word	0x080085d0

08005078 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	220f      	movs	r2, #15
 8005086:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005088:	4b12      	ldr	r3, [pc, #72]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f003 0203 	and.w	r2, r3, #3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005094:	4b0f      	ldr	r3, [pc, #60]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80050ac:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <HAL_RCC_GetClockConfig+0x5c>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	08db      	lsrs	r3, r3, #3
 80050b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <HAL_RCC_GetClockConfig+0x60>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0207 	and.w	r2, r3, #7
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40021000 	.word	0x40021000
 80050d8:	40022000 	.word	0x40022000

080050dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b086      	sub	sp, #24
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050e4:	2300      	movs	r3, #0
 80050e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050e8:	4b2a      	ldr	r3, [pc, #168]	; (8005194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050f4:	f7ff f970 	bl	80043d8 <HAL_PWREx_GetVoltageRange>
 80050f8:	6178      	str	r0, [r7, #20]
 80050fa:	e014      	b.n	8005126 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050fc:	4b25      	ldr	r3, [pc, #148]	; (8005194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005100:	4a24      	ldr	r2, [pc, #144]	; (8005194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005106:	6593      	str	r3, [r2, #88]	; 0x58
 8005108:	4b22      	ldr	r3, [pc, #136]	; (8005194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800510a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005114:	f7ff f960 	bl	80043d8 <HAL_PWREx_GetVoltageRange>
 8005118:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800511a:	4b1e      	ldr	r3, [pc, #120]	; (8005194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4a1d      	ldr	r2, [pc, #116]	; (8005194 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005120:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800512c:	d10b      	bne.n	8005146 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d919      	bls.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2ba0      	cmp	r3, #160	; 0xa0
 8005138:	d902      	bls.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800513a:	2302      	movs	r3, #2
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	e013      	b.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005140:	2301      	movs	r3, #1
 8005142:	613b      	str	r3, [r7, #16]
 8005144:	e010      	b.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2b80      	cmp	r3, #128	; 0x80
 800514a:	d902      	bls.n	8005152 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800514c:	2303      	movs	r3, #3
 800514e:	613b      	str	r3, [r7, #16]
 8005150:	e00a      	b.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b80      	cmp	r3, #128	; 0x80
 8005156:	d102      	bne.n	800515e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005158:	2302      	movs	r3, #2
 800515a:	613b      	str	r3, [r7, #16]
 800515c:	e004      	b.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b70      	cmp	r3, #112	; 0x70
 8005162:	d101      	bne.n	8005168 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005164:	2301      	movs	r3, #1
 8005166:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005168:	4b0b      	ldr	r3, [pc, #44]	; (8005198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f023 0207 	bic.w	r2, r3, #7
 8005170:	4909      	ldr	r1, [pc, #36]	; (8005198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	4313      	orrs	r3, r2
 8005176:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005178:	4b07      	ldr	r3, [pc, #28]	; (8005198 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	429a      	cmp	r2, r3
 8005184:	d001      	beq.n	800518a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e000      	b.n	800518c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40021000 	.word	0x40021000
 8005198:	40022000 	.word	0x40022000

0800519c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80051a4:	2300      	movs	r3, #0
 80051a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80051a8:	2300      	movs	r3, #0
 80051aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d041      	beq.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051c0:	d02a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80051c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80051c6:	d824      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051cc:	d008      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051d2:	d81e      	bhi.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80051d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051dc:	d010      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80051de:	e018      	b.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80051e0:	4b86      	ldr	r3, [pc, #536]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	4a85      	ldr	r2, [pc, #532]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80051e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051ec:	e015      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	3304      	adds	r3, #4
 80051f2:	2100      	movs	r1, #0
 80051f4:	4618      	mov	r0, r3
 80051f6:	f000 facd 	bl	8005794 <RCCEx_PLLSAI1_Config>
 80051fa:	4603      	mov	r3, r0
 80051fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051fe:	e00c      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3320      	adds	r3, #32
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fbb6 	bl	8005978 <RCCEx_PLLSAI2_Config>
 800520c:	4603      	mov	r3, r0
 800520e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005210:	e003      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	74fb      	strb	r3, [r7, #19]
      break;
 8005216:	e000      	b.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005218:	bf00      	nop
    }

    if(ret == HAL_OK)
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005220:	4b76      	ldr	r3, [pc, #472]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800522e:	4973      	ldr	r1, [pc, #460]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005236:	e001      	b.n	800523c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005238:	7cfb      	ldrb	r3, [r7, #19]
 800523a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d041      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005250:	d02a      	beq.n	80052a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8005252:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005256:	d824      	bhi.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005258:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800525c:	d008      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800525e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005262:	d81e      	bhi.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005268:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800526c:	d010      	beq.n	8005290 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800526e:	e018      	b.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005270:	4b62      	ldr	r3, [pc, #392]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	4a61      	ldr	r2, [pc, #388]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800527a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800527c:	e015      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	3304      	adds	r3, #4
 8005282:	2100      	movs	r1, #0
 8005284:	4618      	mov	r0, r3
 8005286:	f000 fa85 	bl	8005794 <RCCEx_PLLSAI1_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800528e:	e00c      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	3320      	adds	r3, #32
 8005294:	2100      	movs	r1, #0
 8005296:	4618      	mov	r0, r3
 8005298:	f000 fb6e 	bl	8005978 <RCCEx_PLLSAI2_Config>
 800529c:	4603      	mov	r3, r0
 800529e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	74fb      	strb	r3, [r7, #19]
      break;
 80052a6:	e000      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80052a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80052aa:	7cfb      	ldrb	r3, [r7, #19]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d10b      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80052b0:	4b52      	ldr	r3, [pc, #328]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052be:	494f      	ldr	r1, [pc, #316]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80052c6:	e001      	b.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052c8:	7cfb      	ldrb	r3, [r7, #19]
 80052ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80a0 	beq.w	800541a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80052de:	4b47      	ldr	r3, [pc, #284]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80052ea:	2301      	movs	r3, #1
 80052ec:	e000      	b.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80052ee:	2300      	movs	r3, #0
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00d      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052f4:	4b41      	ldr	r3, [pc, #260]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052f8:	4a40      	ldr	r2, [pc, #256]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052fe:	6593      	str	r3, [r2, #88]	; 0x58
 8005300:	4b3e      	ldr	r3, [pc, #248]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005308:	60bb      	str	r3, [r7, #8]
 800530a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800530c:	2301      	movs	r3, #1
 800530e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005310:	4b3b      	ldr	r3, [pc, #236]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a3a      	ldr	r2, [pc, #232]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800531c:	f7fd fb54 	bl	80029c8 <HAL_GetTick>
 8005320:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005322:	e009      	b.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005324:	f7fd fb50 	bl	80029c8 <HAL_GetTick>
 8005328:	4602      	mov	r2, r0
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	2b02      	cmp	r3, #2
 8005330:	d902      	bls.n	8005338 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005332:	2303      	movs	r3, #3
 8005334:	74fb      	strb	r3, [r7, #19]
        break;
 8005336:	e005      	b.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005338:	4b31      	ldr	r3, [pc, #196]	; (8005400 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005340:	2b00      	cmp	r3, #0
 8005342:	d0ef      	beq.n	8005324 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005344:	7cfb      	ldrb	r3, [r7, #19]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d15c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800534a:	4b2c      	ldr	r3, [pc, #176]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800534c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005354:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01f      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	697a      	ldr	r2, [r7, #20]
 8005364:	429a      	cmp	r2, r3
 8005366:	d019      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005368:	4b24      	ldr	r3, [pc, #144]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800536a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005374:	4b21      	ldr	r3, [pc, #132]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537a:	4a20      	ldr	r2, [pc, #128]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800537c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005384:	4b1d      	ldr	r3, [pc, #116]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	4a1c      	ldr	r2, [pc, #112]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005390:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005394:	4a19      	ldr	r2, [pc, #100]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d016      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a6:	f7fd fb0f 	bl	80029c8 <HAL_GetTick>
 80053aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053ac:	e00b      	b.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ae:	f7fd fb0b 	bl	80029c8 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053bc:	4293      	cmp	r3, r2
 80053be:	d902      	bls.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	74fb      	strb	r3, [r7, #19]
            break;
 80053c4:	e006      	b.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80053c6:	4b0d      	ldr	r3, [pc, #52]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ec      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d10c      	bne.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053da:	4b08      	ldr	r3, [pc, #32]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	4904      	ldr	r1, [pc, #16]	; (80053fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80053f2:	e009      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053f4:	7cfb      	ldrb	r3, [r7, #19]
 80053f6:	74bb      	strb	r3, [r7, #18]
 80053f8:	e006      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80053fa:	bf00      	nop
 80053fc:	40021000 	.word	0x40021000
 8005400:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005404:	7cfb      	ldrb	r3, [r7, #19]
 8005406:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005408:	7c7b      	ldrb	r3, [r7, #17]
 800540a:	2b01      	cmp	r3, #1
 800540c:	d105      	bne.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540e:	4ba6      	ldr	r3, [pc, #664]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	4aa5      	ldr	r2, [pc, #660]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005414:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005418:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005426:	4ba0      	ldr	r3, [pc, #640]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f023 0203 	bic.w	r2, r3, #3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	499c      	ldr	r1, [pc, #624]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005448:	4b97      	ldr	r3, [pc, #604]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800544a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800544e:	f023 020c 	bic.w	r2, r3, #12
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005456:	4994      	ldr	r1, [pc, #592]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f003 0304 	and.w	r3, r3, #4
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00a      	beq.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800546a:	4b8f      	ldr	r3, [pc, #572]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005478:	498b      	ldr	r1, [pc, #556]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b00      	cmp	r3, #0
 800548a:	d00a      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800548c:	4b86      	ldr	r3, [pc, #536]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800548e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005492:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	4983      	ldr	r1, [pc, #524]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800549c:	4313      	orrs	r3, r2
 800549e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d00a      	beq.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054ae:	4b7e      	ldr	r3, [pc, #504]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054bc:	497a      	ldr	r1, [pc, #488]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0320 	and.w	r3, r3, #32
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d00a      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054d0:	4b75      	ldr	r3, [pc, #468]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054de:	4972      	ldr	r1, [pc, #456]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054f2:	4b6d      	ldr	r3, [pc, #436]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80054f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005500:	4969      	ldr	r1, [pc, #420]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005502:	4313      	orrs	r3, r2
 8005504:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005510:	2b00      	cmp	r3, #0
 8005512:	d00a      	beq.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005514:	4b64      	ldr	r3, [pc, #400]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800551a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005522:	4961      	ldr	r1, [pc, #388]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005524:	4313      	orrs	r3, r2
 8005526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00a      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005536:	4b5c      	ldr	r3, [pc, #368]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800553c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005544:	4958      	ldr	r1, [pc, #352]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005546:	4313      	orrs	r3, r2
 8005548:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005554:	2b00      	cmp	r3, #0
 8005556:	d00a      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005558:	4b53      	ldr	r3, [pc, #332]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800555a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800555e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005566:	4950      	ldr	r1, [pc, #320]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800557a:	4b4b      	ldr	r3, [pc, #300]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005588:	4947      	ldr	r1, [pc, #284]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00a      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800559c:	4b42      	ldr	r3, [pc, #264]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800559e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a2:	f023 0203 	bic.w	r2, r3, #3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055aa:	493f      	ldr	r1, [pc, #252]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055ac:	4313      	orrs	r3, r2
 80055ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d028      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055be:	4b3a      	ldr	r3, [pc, #232]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055cc:	4936      	ldr	r1, [pc, #216]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055dc:	d106      	bne.n	80055ec <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055de:	4b32      	ldr	r3, [pc, #200]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	4a31      	ldr	r2, [pc, #196]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80055e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055e8:	60d3      	str	r3, [r2, #12]
 80055ea:	e011      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f4:	d10c      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	3304      	adds	r3, #4
 80055fa:	2101      	movs	r1, #1
 80055fc:	4618      	mov	r0, r3
 80055fe:	f000 f8c9 	bl	8005794 <RCCEx_PLLSAI1_Config>
 8005602:	4603      	mov	r3, r0
 8005604:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005606:	7cfb      	ldrb	r3, [r7, #19]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d028      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800561c:	4b22      	ldr	r3, [pc, #136]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800561e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800562a:	491f      	ldr	r1, [pc, #124]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800562c:	4313      	orrs	r3, r2
 800562e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800563a:	d106      	bne.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800563c:	4b1a      	ldr	r3, [pc, #104]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800563e:	68db      	ldr	r3, [r3, #12]
 8005640:	4a19      	ldr	r2, [pc, #100]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8005642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005646:	60d3      	str	r3, [r2, #12]
 8005648:	e011      	b.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800564e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005652:	d10c      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	2101      	movs	r1, #1
 800565a:	4618      	mov	r0, r3
 800565c:	f000 f89a 	bl	8005794 <RCCEx_PLLSAI1_Config>
 8005660:	4603      	mov	r3, r0
 8005662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005664:	7cfb      	ldrb	r3, [r7, #19]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d001      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 800566a:	7cfb      	ldrb	r3, [r7, #19]
 800566c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d02a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800567a:	4b0b      	ldr	r3, [pc, #44]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800567c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005680:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005688:	4907      	ldr	r1, [pc, #28]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005698:	d108      	bne.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569a:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	4a02      	ldr	r2, [pc, #8]	; (80056a8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80056a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a4:	60d3      	str	r3, [r2, #12]
 80056a6:	e013      	b.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80056a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80056b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056b4:	d10c      	bne.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2101      	movs	r1, #1
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f869 	bl	8005794 <RCCEx_PLLSAI1_Config>
 80056c2:	4603      	mov	r3, r0
 80056c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 80056cc:	7cfb      	ldrb	r3, [r7, #19]
 80056ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d02f      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80056dc:	4b2c      	ldr	r3, [pc, #176]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056ea:	4929      	ldr	r1, [pc, #164]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056fa:	d10d      	bne.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3304      	adds	r3, #4
 8005700:	2102      	movs	r1, #2
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f846 	bl	8005794 <RCCEx_PLLSAI1_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d014      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	74bb      	strb	r3, [r7, #18]
 8005716:	e011      	b.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800571c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005720:	d10c      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	3320      	adds	r3, #32
 8005726:	2102      	movs	r1, #2
 8005728:	4618      	mov	r0, r3
 800572a:	f000 f925 	bl	8005978 <RCCEx_PLLSAI2_Config>
 800572e:	4603      	mov	r3, r0
 8005730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005732:	7cfb      	ldrb	r3, [r7, #19]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8005738:	7cfb      	ldrb	r3, [r7, #19]
 800573a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00b      	beq.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005748:	4b11      	ldr	r3, [pc, #68]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800574a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800574e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005758:	490d      	ldr	r1, [pc, #52]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800575a:	4313      	orrs	r3, r2
 800575c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800576c:	4b08      	ldr	r3, [pc, #32]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800576e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577c:	4904      	ldr	r1, [pc, #16]	; (8005790 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005784:	7cbb      	ldrb	r3, [r7, #18]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3718      	adds	r7, #24
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000

08005794 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800579e:	2300      	movs	r3, #0
 80057a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80057a2:	4b74      	ldr	r3, [pc, #464]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d018      	beq.n	80057e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80057ae:	4b71      	ldr	r3, [pc, #452]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	f003 0203 	and.w	r2, r3, #3
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	429a      	cmp	r2, r3
 80057bc:	d10d      	bne.n	80057da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
       ||
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d009      	beq.n	80057da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80057c6:	4b6b      	ldr	r3, [pc, #428]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	091b      	lsrs	r3, r3, #4
 80057cc:	f003 0307 	and.w	r3, r3, #7
 80057d0:	1c5a      	adds	r2, r3, #1
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
       ||
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d047      	beq.n	800586a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	73fb      	strb	r3, [r7, #15]
 80057de:	e044      	b.n	800586a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d018      	beq.n	800581a <RCCEx_PLLSAI1_Config+0x86>
 80057e8:	2b03      	cmp	r3, #3
 80057ea:	d825      	bhi.n	8005838 <RCCEx_PLLSAI1_Config+0xa4>
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d002      	beq.n	80057f6 <RCCEx_PLLSAI1_Config+0x62>
 80057f0:	2b02      	cmp	r3, #2
 80057f2:	d009      	beq.n	8005808 <RCCEx_PLLSAI1_Config+0x74>
 80057f4:	e020      	b.n	8005838 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057f6:	4b5f      	ldr	r3, [pc, #380]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d11d      	bne.n	800583e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005806:	e01a      	b.n	800583e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005808:	4b5a      	ldr	r3, [pc, #360]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005810:	2b00      	cmp	r3, #0
 8005812:	d116      	bne.n	8005842 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005818:	e013      	b.n	8005842 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800581a:	4b56      	ldr	r3, [pc, #344]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10f      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005826:	4b53      	ldr	r3, [pc, #332]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d109      	bne.n	8005846 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005836:	e006      	b.n	8005846 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	73fb      	strb	r3, [r7, #15]
      break;
 800583c:	e004      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800583e:	bf00      	nop
 8005840:	e002      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005842:	bf00      	nop
 8005844:	e000      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005846:	bf00      	nop
    }

    if(status == HAL_OK)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10d      	bne.n	800586a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800584e:	4b49      	ldr	r3, [pc, #292]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005850:	68db      	ldr	r3, [r3, #12]
 8005852:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6819      	ldr	r1, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	3b01      	subs	r3, #1
 8005860:	011b      	lsls	r3, r3, #4
 8005862:	430b      	orrs	r3, r1
 8005864:	4943      	ldr	r1, [pc, #268]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800586a:	7bfb      	ldrb	r3, [r7, #15]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d17c      	bne.n	800596a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005870:	4b40      	ldr	r3, [pc, #256]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a3f      	ldr	r2, [pc, #252]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800587a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800587c:	f7fd f8a4 	bl	80029c8 <HAL_GetTick>
 8005880:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005882:	e009      	b.n	8005898 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005884:	f7fd f8a0 	bl	80029c8 <HAL_GetTick>
 8005888:	4602      	mov	r2, r0
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	1ad3      	subs	r3, r2, r3
 800588e:	2b02      	cmp	r3, #2
 8005890:	d902      	bls.n	8005898 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005892:	2303      	movs	r3, #3
 8005894:	73fb      	strb	r3, [r7, #15]
        break;
 8005896:	e005      	b.n	80058a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005898:	4b36      	ldr	r3, [pc, #216]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1ef      	bne.n	8005884 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80058a4:	7bfb      	ldrb	r3, [r7, #15]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d15f      	bne.n	800596a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d110      	bne.n	80058d2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058b0:	4b30      	ldr	r3, [pc, #192]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80058b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058bc:	687a      	ldr	r2, [r7, #4]
 80058be:	6892      	ldr	r2, [r2, #8]
 80058c0:	0211      	lsls	r1, r2, #8
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68d2      	ldr	r2, [r2, #12]
 80058c6:	06d2      	lsls	r2, r2, #27
 80058c8:	430a      	orrs	r2, r1
 80058ca:	492a      	ldr	r1, [pc, #168]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	610b      	str	r3, [r1, #16]
 80058d0:	e027      	b.n	8005922 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d112      	bne.n	80058fe <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058d8:	4b26      	ldr	r3, [pc, #152]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80058e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	6892      	ldr	r2, [r2, #8]
 80058e8:	0211      	lsls	r1, r2, #8
 80058ea:	687a      	ldr	r2, [r7, #4]
 80058ec:	6912      	ldr	r2, [r2, #16]
 80058ee:	0852      	lsrs	r2, r2, #1
 80058f0:	3a01      	subs	r2, #1
 80058f2:	0552      	lsls	r2, r2, #21
 80058f4:	430a      	orrs	r2, r1
 80058f6:	491f      	ldr	r1, [pc, #124]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	610b      	str	r3, [r1, #16]
 80058fc:	e011      	b.n	8005922 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058fe:	4b1d      	ldr	r3, [pc, #116]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005906:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	6892      	ldr	r2, [r2, #8]
 800590e:	0211      	lsls	r1, r2, #8
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	6952      	ldr	r2, [r2, #20]
 8005914:	0852      	lsrs	r2, r2, #1
 8005916:	3a01      	subs	r2, #1
 8005918:	0652      	lsls	r2, r2, #25
 800591a:	430a      	orrs	r2, r1
 800591c:	4915      	ldr	r1, [pc, #84]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800591e:	4313      	orrs	r3, r2
 8005920:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005922:	4b14      	ldr	r3, [pc, #80]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a13      	ldr	r2, [pc, #76]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005928:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800592c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592e:	f7fd f84b 	bl	80029c8 <HAL_GetTick>
 8005932:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005934:	e009      	b.n	800594a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005936:	f7fd f847 	bl	80029c8 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d902      	bls.n	800594a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	73fb      	strb	r3, [r7, #15]
          break;
 8005948:	e005      	b.n	8005956 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800594a:	4b0a      	ldr	r3, [pc, #40]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005952:	2b00      	cmp	r3, #0
 8005954:	d0ef      	beq.n	8005936 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005956:	7bfb      	ldrb	r3, [r7, #15]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d106      	bne.n	800596a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800595c:	4b05      	ldr	r3, [pc, #20]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	4903      	ldr	r1, [pc, #12]	; (8005974 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005966:	4313      	orrs	r3, r2
 8005968:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800596a:	7bfb      	ldrb	r3, [r7, #15]
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}
 8005974:	40021000 	.word	0x40021000

08005978 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005986:	4b69      	ldr	r3, [pc, #420]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0303 	and.w	r3, r3, #3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d018      	beq.n	80059c4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005992:	4b66      	ldr	r3, [pc, #408]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	f003 0203 	and.w	r2, r3, #3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d10d      	bne.n	80059be <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
       ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d009      	beq.n	80059be <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80059aa:	4b60      	ldr	r3, [pc, #384]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059ac:	68db      	ldr	r3, [r3, #12]
 80059ae:	091b      	lsrs	r3, r3, #4
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
       ||
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d047      	beq.n	8005a4e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	73fb      	strb	r3, [r7, #15]
 80059c2:	e044      	b.n	8005a4e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b03      	cmp	r3, #3
 80059ca:	d018      	beq.n	80059fe <RCCEx_PLLSAI2_Config+0x86>
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d825      	bhi.n	8005a1c <RCCEx_PLLSAI2_Config+0xa4>
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d002      	beq.n	80059da <RCCEx_PLLSAI2_Config+0x62>
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d009      	beq.n	80059ec <RCCEx_PLLSAI2_Config+0x74>
 80059d8:	e020      	b.n	8005a1c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80059da:	4b54      	ldr	r3, [pc, #336]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d11d      	bne.n	8005a22 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059ea:	e01a      	b.n	8005a22 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059ec:	4b4f      	ldr	r3, [pc, #316]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d116      	bne.n	8005a26 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80059f8:	2301      	movs	r3, #1
 80059fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059fc:	e013      	b.n	8005a26 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059fe:	4b4b      	ldr	r3, [pc, #300]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10f      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005a0a:	4b48      	ldr	r3, [pc, #288]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d109      	bne.n	8005a2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005a1a:	e006      	b.n	8005a2a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a20:	e004      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a22:	bf00      	nop
 8005a24:	e002      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a26:	bf00      	nop
 8005a28:	e000      	b.n	8005a2c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005a2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005a2c:	7bfb      	ldrb	r3, [r7, #15]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10d      	bne.n	8005a4e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005a32:	4b3e      	ldr	r3, [pc, #248]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6819      	ldr	r1, [r3, #0]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	3b01      	subs	r3, #1
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	430b      	orrs	r3, r1
 8005a48:	4938      	ldr	r1, [pc, #224]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005a4e:	7bfb      	ldrb	r3, [r7, #15]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d166      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a54:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a34      	ldr	r2, [pc, #208]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a60:	f7fc ffb2 	bl	80029c8 <HAL_GetTick>
 8005a64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a66:	e009      	b.n	8005a7c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a68:	f7fc ffae 	bl	80029c8 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d902      	bls.n	8005a7c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	73fb      	strb	r3, [r7, #15]
        break;
 8005a7a:	e005      	b.n	8005a88 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a7c:	4b2b      	ldr	r3, [pc, #172]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ef      	bne.n	8005a68 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d149      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d110      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a94:	4b25      	ldr	r3, [pc, #148]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005a9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005aa0:	687a      	ldr	r2, [r7, #4]
 8005aa2:	6892      	ldr	r2, [r2, #8]
 8005aa4:	0211      	lsls	r1, r2, #8
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	68d2      	ldr	r2, [r2, #12]
 8005aaa:	06d2      	lsls	r2, r2, #27
 8005aac:	430a      	orrs	r2, r1
 8005aae:	491f      	ldr	r1, [pc, #124]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	614b      	str	r3, [r1, #20]
 8005ab4:	e011      	b.n	8005ada <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005ab6:	4b1d      	ldr	r3, [pc, #116]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005abe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ac2:	687a      	ldr	r2, [r7, #4]
 8005ac4:	6892      	ldr	r2, [r2, #8]
 8005ac6:	0211      	lsls	r1, r2, #8
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	6912      	ldr	r2, [r2, #16]
 8005acc:	0852      	lsrs	r2, r2, #1
 8005ace:	3a01      	subs	r2, #1
 8005ad0:	0652      	lsls	r2, r2, #25
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	4915      	ldr	r1, [pc, #84]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ada:	4b14      	ldr	r3, [pc, #80]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a13      	ldr	r2, [pc, #76]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ae4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ae6:	f7fc ff6f 	bl	80029c8 <HAL_GetTick>
 8005aea:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005aec:	e009      	b.n	8005b02 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005aee:	f7fc ff6b 	bl	80029c8 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d902      	bls.n	8005b02 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8005afc:	2303      	movs	r3, #3
 8005afe:	73fb      	strb	r3, [r7, #15]
          break;
 8005b00:	e005      	b.n	8005b0e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005b02:	4b0a      	ldr	r3, [pc, #40]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d0ef      	beq.n	8005aee <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b14:	4b05      	ldr	r3, [pc, #20]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b16:	695a      	ldr	r2, [r3, #20]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	4903      	ldr	r1, [pc, #12]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1b4>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}
 8005b2c:	40021000 	.word	0x40021000

08005b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e095      	b.n	8005c6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b52:	d009      	beq.n	8005b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	e005      	b.n	8005b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fc fc8a 	bl	800249c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba8:	d902      	bls.n	8005bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e002      	b.n	8005bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	ea42 0103 	orr.w	r1, r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 0204 	and.w	r2, r3, #4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_SPI_Transmit+0x22>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e158      	b.n	8005f4a <HAL_SPI_Transmit+0x2d4>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca0:	f7fc fe92 	bl	80029c8 <HAL_GetTick>
 8005ca4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cba:	e13d      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Transmit+0x52>
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ccc:	e134      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	d10f      	bne.n	8005d3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d007      	beq.n	8005d58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d60:	d94b      	bls.n	8005dfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Transmit+0xfa>
 8005d6a:	8afb      	ldrh	r3, [r7, #22]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d13e      	bne.n	8005dee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d94:	e02b      	b.n	8005dee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d112      	bne.n	8005dca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	881a      	ldrh	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc8:	e011      	b.n	8005dee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dca:	f7fc fdfd 	bl	80029c8 <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d803      	bhi.n	8005de2 <HAL_SPI_Transmit+0x16c>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Transmit+0x172>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dec:	e0a4      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1ce      	bne.n	8005d96 <HAL_SPI_Transmit+0x120>
 8005df8:	e07c      	b.n	8005ef4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x192>
 8005e02:	8afb      	ldrh	r3, [r7, #22]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d170      	bne.n	8005eea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d912      	bls.n	8005e38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	881a      	ldrh	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b02      	subs	r3, #2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e36:	e058      	b.n	8005eea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e5e:	e044      	b.n	8005eea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d12b      	bne.n	8005ec6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d912      	bls.n	8005e9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b02      	subs	r3, #2
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e9c:	e025      	b.n	8005eea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec4:	e011      	b.n	8005eea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec6:	f7fc fd7f 	bl	80029c8 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d803      	bhi.n	8005ede <HAL_SPI_Transmit+0x268>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005edc:	d102      	bne.n	8005ee4 <HAL_SPI_Transmit+0x26e>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ee8:	e026      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1b5      	bne.n	8005e60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 feb1 	bl	8006c60 <SPI_EndRxTxTransaction>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e000      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f6c:	2b01      	cmp	r3, #1
 8005f6e:	d101      	bne.n	8005f74 <HAL_SPI_Transmit_DMA+0x20>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e0d8      	b.n	8006126 <HAL_SPI_Transmit_DMA+0x1d2>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	2b01      	cmp	r3, #1
 8005f86:	d002      	beq.n	8005f8e <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8005f88:	2302      	movs	r3, #2
 8005f8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f8c:	e0c6      	b.n	800611c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d002      	beq.n	8005f9a <HAL_SPI_Transmit_DMA+0x46>
 8005f94:	88fb      	ldrh	r3, [r7, #6]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d102      	bne.n	8005fa0 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005f9e:	e0bd      	b.n	800611c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	2203      	movs	r2, #3
 8005fa4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2200      	movs	r2, #0
 8005fac:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	68ba      	ldr	r2, [r7, #8]
 8005fb2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	88fa      	ldrh	r2, [r7, #6]
 8005fbe:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fea:	d10f      	bne.n	800600c <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ffa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	4a47      	ldr	r2, [pc, #284]	; (8006130 <HAL_SPI_Transmit_DMA+0x1dc>)
 8006012:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006018:	4a46      	ldr	r2, [pc, #280]	; (8006134 <HAL_SPI_Transmit_DMA+0x1e0>)
 800601a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006020:	4a45      	ldr	r2, [pc, #276]	; (8006138 <HAL_SPI_Transmit_DMA+0x1e4>)
 8006022:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006028:	2200      	movs	r2, #0
 800602a:	639a      	str	r2, [r3, #56]	; 0x38

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685a      	ldr	r2, [r3, #4]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800603a:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006044:	d82d      	bhi.n	80060a2 <HAL_SPI_Transmit_DMA+0x14e>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604a:	699b      	ldr	r3, [r3, #24]
 800604c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006050:	d127      	bne.n	80060a2 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006056:	b29b      	uxth	r3, r3
 8006058:	f003 0301 	and.w	r3, r3, #1
 800605c:	2b00      	cmp	r3, #0
 800605e:	d10f      	bne.n	8006080 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	685a      	ldr	r2, [r3, #4]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800606e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006074:	b29b      	uxth	r3, r3
 8006076:	085b      	lsrs	r3, r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800607e:	e010      	b.n	80060a2 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800608e:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006094:	b29b      	uxth	r3, r3
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	b29b      	uxth	r3, r3
 800609a:	3301      	adds	r3, #1
 800609c:	b29a      	uxth	r2, r3
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060aa:	4619      	mov	r1, r3
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	330c      	adds	r3, #12
 80060b2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060b8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80060ba:	f7fc fe81 	bl	8002dc0 <HAL_DMA_Start_IT>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00c      	beq.n	80060de <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060c8:	f043 0210 	orr.w	r2, r3, #16
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80060dc:	e01e      	b.n	800611c <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b40      	cmp	r3, #64	; 0x40
 80060ea:	d007      	beq.n	80060fc <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060fa:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0220 	orr.w	r2, r2, #32
 800610a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f042 0202 	orr.w	r2, r2, #2
 800611a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	080068df 	.word	0x080068df
 8006134:	08006701 	.word	0x08006701
 8006138:	08006933 	.word	0x08006933

0800613c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800614a:	2300      	movs	r3, #0
 800614c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d110      	bne.n	8006178 <HAL_SPI_Receive_DMA+0x3c>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800615e:	d10b      	bne.n	8006178 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2204      	movs	r2, #4
 8006164:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006168:	88fb      	ldrh	r3, [r7, #6]
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	68b9      	ldr	r1, [r7, #8]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f908 	bl	8006384 <HAL_SPI_TransmitReceive_DMA>
 8006174:	4603      	mov	r3, r0
 8006176:	e0fb      	b.n	8006370 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_SPI_Receive_DMA+0x4a>
 8006182:	2302      	movs	r3, #2
 8006184:	e0f4      	b.n	8006370 <HAL_SPI_Receive_DMA+0x234>
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006194:	b2db      	uxtb	r3, r3
 8006196:	2b01      	cmp	r3, #1
 8006198:	d002      	beq.n	80061a0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800619a:	2302      	movs	r3, #2
 800619c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800619e:	e0e2      	b.n	8006366 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d002      	beq.n	80061ac <HAL_SPI_Receive_DMA+0x70>
 80061a6:	88fb      	ldrh	r3, [r7, #6]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d102      	bne.n	80061b2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	75fb      	strb	r3, [r7, #23]
    goto error;
 80061b0:	e0d9      	b.n	8006366 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2204      	movs	r2, #4
 80061b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	68ba      	ldr	r2, [r7, #8]
 80061c4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	88fa      	ldrh	r2, [r7, #6]
 80061ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	88fa      	ldrh	r2, [r7, #6]
 80061d2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2200      	movs	r2, #0
 80061e0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2200      	movs	r2, #0
 80061e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2200      	movs	r2, #0
 80061ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f6:	d10f      	bne.n	8006218 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006206:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006216:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006226:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006230:	d908      	bls.n	8006244 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	685a      	ldr	r2, [r3, #4]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006240:	605a      	str	r2, [r3, #4]
 8006242:	e042      	b.n	80062ca <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006252:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800625e:	d134      	bne.n	80062ca <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800626e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006276:	b29b      	uxth	r3, r3
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d111      	bne.n	80062a4 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800628e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006296:	b29b      	uxth	r3, r3
 8006298:	085b      	lsrs	r3, r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80062a2:	e012      	b.n	80062ca <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	685a      	ldr	r2, [r3, #4]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80062b2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80062ba:	b29b      	uxth	r3, r3
 80062bc:	085b      	lsrs	r3, r3, #1
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3301      	adds	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ce:	4a2a      	ldr	r2, [pc, #168]	; (8006378 <HAL_SPI_Receive_DMA+0x23c>)
 80062d0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062d6:	4a29      	ldr	r2, [pc, #164]	; (800637c <HAL_SPI_Receive_DMA+0x240>)
 80062d8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062de:	4a28      	ldr	r2, [pc, #160]	; (8006380 <HAL_SPI_Receive_DMA+0x244>)
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062e6:	2200      	movs	r2, #0
 80062e8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	330c      	adds	r3, #12
 80062f4:	4619      	mov	r1, r3
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006302:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006304:	f7fc fd5c 	bl	8002dc0 <HAL_DMA_Start_IT>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00c      	beq.n	8006328 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006312:	f043 0210 	orr.w	r2, r3, #16
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006326:	e01e      	b.n	8006366 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d007      	beq.n	8006346 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006344:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685a      	ldr	r2, [r3, #4]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0220 	orr.w	r2, r2, #32
 8006354:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685a      	ldr	r2, [r3, #4]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f042 0201 	orr.w	r2, r2, #1
 8006364:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800636e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3718      	adds	r7, #24
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	080068fb 	.word	0x080068fb
 800637c:	080067a7 	.word	0x080067a7
 8006380:	08006933 	.word	0x08006933

08006384 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b086      	sub	sp, #24
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800639c:	2b01      	cmp	r3, #1
 800639e:	d101      	bne.n	80063a4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80063a0:	2302      	movs	r3, #2
 80063a2:	e16c      	b.n	800667e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063b2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80063ba:	7dbb      	ldrb	r3, [r7, #22]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d00d      	beq.n	80063dc <HAL_SPI_TransmitReceive_DMA+0x58>
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063c6:	d106      	bne.n	80063d6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d102      	bne.n	80063d6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80063d0:	7dbb      	ldrb	r3, [r7, #22]
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d002      	beq.n	80063dc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80063d6:	2302      	movs	r3, #2
 80063d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063da:	e14b      	b.n	8006674 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d005      	beq.n	80063ee <HAL_SPI_TransmitReceive_DMA+0x6a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d002      	beq.n	80063ee <HAL_SPI_TransmitReceive_DMA+0x6a>
 80063e8:	887b      	ldrh	r3, [r7, #2]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d102      	bne.n	80063f4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80063f2:	e13f      	b.n	8006674 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d003      	beq.n	8006408 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2205      	movs	r2, #5
 8006404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2200      	movs	r2, #0
 800640c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68ba      	ldr	r2, [r7, #8]
 8006412:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	887a      	ldrh	r2, [r7, #2]
 8006418:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	887a      	ldrh	r2, [r7, #2]
 800641e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	887a      	ldrh	r2, [r7, #2]
 800642a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	887a      	ldrh	r2, [r7, #2]
 8006432:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006450:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800645a:	d908      	bls.n	800646e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685a      	ldr	r2, [r3, #4]
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800646a:	605a      	str	r2, [r3, #4]
 800646c:	e06f      	b.n	800654e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685a      	ldr	r2, [r3, #4]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800647c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006488:	d126      	bne.n	80064d8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10f      	bne.n	80064b6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	685a      	ldr	r2, [r3, #4]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064a4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	085b      	lsrs	r3, r3, #1
 80064ae:	b29a      	uxth	r2, r3
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064b4:	e010      	b.n	80064d8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064c4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	085b      	lsrs	r3, r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	3301      	adds	r3, #1
 80064d2:	b29a      	uxth	r2, r3
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e2:	d134      	bne.n	800654e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064f2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064fa:	b29b      	uxth	r3, r3
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d111      	bne.n	8006528 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685a      	ldr	r2, [r3, #4]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006512:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800651a:	b29b      	uxth	r3, r3
 800651c:	085b      	lsrs	r3, r3, #1
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006526:	e012      	b.n	800654e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	685a      	ldr	r2, [r3, #4]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006536:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800653e:	b29b      	uxth	r3, r3
 8006540:	085b      	lsrs	r3, r3, #1
 8006542:	b29b      	uxth	r3, r3
 8006544:	3301      	adds	r3, #1
 8006546:	b29a      	uxth	r2, r3
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b04      	cmp	r3, #4
 8006558:	d108      	bne.n	800656c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655e:	4a4a      	ldr	r2, [pc, #296]	; (8006688 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006560:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006566:	4a49      	ldr	r2, [pc, #292]	; (800668c <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006568:	62da      	str	r2, [r3, #44]	; 0x2c
 800656a:	e007      	b.n	800657c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006570:	4a47      	ldr	r2, [pc, #284]	; (8006690 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006578:	4a46      	ldr	r2, [pc, #280]	; (8006694 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800657a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006580:	4a45      	ldr	r2, [pc, #276]	; (8006698 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006582:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006588:	2200      	movs	r2, #0
 800658a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	330c      	adds	r3, #12
 8006596:	4619      	mov	r1, r3
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065a4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80065a6:	f7fc fc0b 	bl	8002dc0 <HAL_DMA_Start_IT>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d00c      	beq.n	80065ca <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b4:	f043 0210 	orr.w	r2, r3, #16
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80065c8:	e054      	b.n	8006674 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f042 0201 	orr.w	r2, r2, #1
 80065d8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065de:	2200      	movs	r2, #0
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065e6:	2200      	movs	r2, #0
 80065e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065ee:	2200      	movs	r2, #0
 80065f0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f6:	2200      	movs	r2, #0
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	4619      	mov	r1, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006610:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006612:	f7fc fbd5 	bl	8002dc0 <HAL_DMA_Start_IT>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00c      	beq.n	8006636 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006620:	f043 0210 	orr.w	r2, r3, #16
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2201      	movs	r2, #1
 8006630:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006634:	e01e      	b.n	8006674 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006640:	2b40      	cmp	r3, #64	; 0x40
 8006642:	d007      	beq.n	8006654 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006652:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0220 	orr.w	r2, r2, #32
 8006662:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685a      	ldr	r2, [r3, #4]
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f042 0202 	orr.w	r2, r2, #2
 8006672:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800667c:	7dfb      	ldrb	r3, [r7, #23]
}
 800667e:	4618      	mov	r0, r3
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	080068fb 	.word	0x080068fb
 800668c:	080067a7 	.word	0x080067a7
 8006690:	08006917 	.word	0x08006917
 8006694:	0800684f 	.word	0x0800684f
 8006698:	08006933 	.word	0x08006933

0800669c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80066a4:	bf00      	nop
 80066a6:	370c      	adds	r7, #12
 80066a8:	46bd      	mov	sp, r7
 80066aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ae:	4770      	bx	lr

080066b0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b083      	sub	sp, #12
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80066b8:	bf00      	nop
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b083      	sub	sp, #12
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80066cc:	bf00      	nop
 80066ce:	370c      	adds	r7, #12
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80066e0:	bf00      	nop
 80066e2:	370c      	adds	r7, #12
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800670c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800670e:	f7fc f95b 	bl	80029c8 <HAL_GetTick>
 8006712:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f003 0320 	and.w	r3, r3, #32
 800671e:	2b20      	cmp	r3, #32
 8006720:	d03b      	beq.n	800679a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0220 	bic.w	r2, r2, #32
 8006730:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	685a      	ldr	r2, [r3, #4]
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f022 0202 	bic.w	r2, r2, #2
 8006740:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	2164      	movs	r1, #100	; 0x64
 8006746:	6978      	ldr	r0, [r7, #20]
 8006748:	f000 fa8a 	bl	8006c60 <SPI_EndRxTxTransaction>
 800674c:	4603      	mov	r3, r0
 800674e:	2b00      	cmp	r3, #0
 8006750:	d005      	beq.n	800675e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006756:	f043 0220 	orr.w	r2, r3, #32
 800675a:	697b      	ldr	r3, [r7, #20]
 800675c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d10a      	bne.n	800677c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006766:	2300      	movs	r3, #0
 8006768:	60fb      	str	r3, [r7, #12]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	60fb      	str	r3, [r7, #12]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	2200      	movs	r2, #0
 8006780:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	2201      	movs	r2, #1
 8006786:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006792:	6978      	ldr	r0, [r7, #20]
 8006794:	f7ff ffaa 	bl	80066ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006798:	e002      	b.n	80067a0 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800679a:	6978      	ldr	r0, [r7, #20]
 800679c:	f7f9 ffc8 	bl	8000730 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067b4:	f7fc f908 	bl	80029c8 <HAL_GetTick>
 80067b8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 0320 	and.w	r3, r3, #32
 80067c4:	2b20      	cmp	r3, #32
 80067c6:	d03c      	beq.n	8006842 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f022 0220 	bic.w	r2, r2, #32
 80067d6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10d      	bne.n	80067fc <SPI_DMAReceiveCplt+0x56>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067e8:	d108      	bne.n	80067fc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0203 	bic.w	r2, r2, #3
 80067f8:	605a      	str	r2, [r3, #4]
 80067fa:	e007      	b.n	800680c <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	685a      	ldr	r2, [r3, #4]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0201 	bic.w	r2, r2, #1
 800680a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	2164      	movs	r1, #100	; 0x64
 8006810:	68f8      	ldr	r0, [r7, #12]
 8006812:	f000 f9cd 	bl	8006bb0 <SPI_EndRxTransaction>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2220      	movs	r2, #32
 8006820:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2200      	movs	r2, #0
 8006826:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800683a:	68f8      	ldr	r0, [r7, #12]
 800683c:	f7ff ff56 	bl	80066ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006840:	e002      	b.n	8006848 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006842:	68f8      	ldr	r0, [r7, #12]
 8006844:	f7f9 ff84 	bl	8000750 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b084      	sub	sp, #16
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800685c:	f7fc f8b4 	bl	80029c8 <HAL_GetTick>
 8006860:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b20      	cmp	r3, #32
 800686e:	d030      	beq.n	80068d2 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f022 0220 	bic.w	r2, r2, #32
 800687e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	2164      	movs	r1, #100	; 0x64
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 f9eb 	bl	8006c60 <SPI_EndRxTxTransaction>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006894:	f043 0220 	orr.w	r2, r3, #32
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f022 0203 	bic.w	r2, r2, #3
 80068aa:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2201      	movs	r2, #1
 80068be:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d003      	beq.n	80068d2 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f7ff ff0e 	bl	80066ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068d0:	e002      	b.n	80068d8 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f7ff fee2 	bl	800669c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068d8:	3710      	adds	r7, #16
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}

080068de <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068de:	b580      	push	{r7, lr}
 80068e0:	b084      	sub	sp, #16
 80068e2:	af00      	add	r7, sp, #0
 80068e4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80068ec:	68f8      	ldr	r0, [r7, #12]
 80068ee:	f7ff fedf 	bl	80066b0 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068f2:	bf00      	nop
 80068f4:	3710      	adds	r7, #16
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b084      	sub	sp, #16
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f7ff fedb 	bl	80066c4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800690e:	bf00      	nop
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006922:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006924:	68f8      	ldr	r0, [r7, #12]
 8006926:	f7ff fed7 	bl	80066d8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800692a:	bf00      	nop
 800692c:	3710      	adds	r7, #16
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006932:	b580      	push	{r7, lr}
 8006934:	b084      	sub	sp, #16
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0203 	bic.w	r2, r2, #3
 800694e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006954:	f043 0210 	orr.w	r2, r3, #16
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2201      	movs	r2, #1
 8006960:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006964:	68f8      	ldr	r0, [r7, #12]
 8006966:	f7ff fec1 	bl	80066ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800696a:	bf00      	nop
 800696c:	3710      	adds	r7, #16
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
	...

08006974 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	603b      	str	r3, [r7, #0]
 8006980:	4613      	mov	r3, r2
 8006982:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006984:	f7fc f820 	bl	80029c8 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698c:	1a9b      	subs	r3, r3, r2
 800698e:	683a      	ldr	r2, [r7, #0]
 8006990:	4413      	add	r3, r2
 8006992:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006994:	f7fc f818 	bl	80029c8 <HAL_GetTick>
 8006998:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800699a:	4b39      	ldr	r3, [pc, #228]	; (8006a80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	015b      	lsls	r3, r3, #5
 80069a0:	0d1b      	lsrs	r3, r3, #20
 80069a2:	69fa      	ldr	r2, [r7, #28]
 80069a4:	fb02 f303 	mul.w	r3, r2, r3
 80069a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069aa:	e054      	b.n	8006a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069b2:	d050      	beq.n	8006a56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069b4:	f7fc f808 	bl	80029c8 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	429a      	cmp	r2, r3
 80069c2:	d902      	bls.n	80069ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d13d      	bne.n	8006a46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	685a      	ldr	r2, [r3, #4]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80069d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069e2:	d111      	bne.n	8006a08 <SPI_WaitFlagStateUntilTimeout+0x94>
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ec:	d004      	beq.n	80069f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069f6:	d107      	bne.n	8006a08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a10:	d10f      	bne.n	8006a32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2201      	movs	r2, #1
 8006a36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e017      	b.n	8006a76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d101      	bne.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	3b01      	subs	r3, #1
 8006a54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	689a      	ldr	r2, [r3, #8]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	4013      	ands	r3, r2
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	bf0c      	ite	eq
 8006a66:	2301      	moveq	r3, #1
 8006a68:	2300      	movne	r3, #0
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d19b      	bne.n	80069ac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3720      	adds	r7, #32
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	2000007c 	.word	0x2000007c

08006a84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b08a      	sub	sp, #40	; 0x28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	607a      	str	r2, [r7, #4]
 8006a90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006a96:	f7fb ff97 	bl	80029c8 <HAL_GetTick>
 8006a9a:	4602      	mov	r2, r0
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	1a9b      	subs	r3, r3, r2
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006aa6:	f7fb ff8f 	bl	80029c8 <HAL_GetTick>
 8006aaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ab4:	4b3d      	ldr	r3, [pc, #244]	; (8006bac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4613      	mov	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	00da      	lsls	r2, r3, #3
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	0d1b      	lsrs	r3, r3, #20
 8006ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ac6:	fb02 f303 	mul.w	r3, r2, r3
 8006aca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006acc:	e060      	b.n	8006b90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ad4:	d107      	bne.n	8006ae6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d104      	bne.n	8006ae6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	781b      	ldrb	r3, [r3, #0]
 8006ae0:	b2db      	uxtb	r3, r3
 8006ae2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aec:	d050      	beq.n	8006b90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006aee:	f7fb ff6b 	bl	80029c8 <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	6a3b      	ldr	r3, [r7, #32]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d902      	bls.n	8006b04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d13d      	bne.n	8006b80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	685a      	ldr	r2, [r3, #4]
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b1c:	d111      	bne.n	8006b42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b26:	d004      	beq.n	8006b32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b30:	d107      	bne.n	8006b42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b4a:	d10f      	bne.n	8006b6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	681a      	ldr	r2, [r3, #0]
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006b7c:	2303      	movs	r3, #3
 8006b7e:	e010      	b.n	8006ba2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006b80:	69bb      	ldr	r3, [r7, #24]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689a      	ldr	r2, [r3, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	4013      	ands	r3, r2
 8006b9a:	687a      	ldr	r2, [r7, #4]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d196      	bne.n	8006ace <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3728      	adds	r7, #40	; 0x28
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	2000007c 	.word	0x2000007c

08006bb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b086      	sub	sp, #24
 8006bb4:	af02      	add	r7, sp, #8
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	685b      	ldr	r3, [r3, #4]
 8006bc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006bc4:	d111      	bne.n	8006bea <SPI_EndRxTransaction+0x3a>
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bce:	d004      	beq.n	8006bda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bd8:	d107      	bne.n	8006bea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006be8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	9300      	str	r3, [sp, #0]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2180      	movs	r1, #128	; 0x80
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f7ff febd 	bl	8006974 <SPI_WaitFlagStateUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d007      	beq.n	8006c10 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c04:	f043 0220 	orr.w	r2, r3, #32
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e023      	b.n	8006c58 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c18:	d11d      	bne.n	8006c56 <SPI_EndRxTransaction+0xa6>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c22:	d004      	beq.n	8006c2e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c2c:	d113      	bne.n	8006c56 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	9300      	str	r3, [sp, #0]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff ff22 	bl	8006a84 <SPI_WaitFifoStateUntilTimeout>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d007      	beq.n	8006c56 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4a:	f043 0220 	orr.w	r2, r3, #32
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e000      	b.n	8006c58 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b086      	sub	sp, #24
 8006c64:	af02      	add	r7, sp, #8
 8006c66:	60f8      	str	r0, [r7, #12]
 8006c68:	60b9      	str	r1, [r7, #8]
 8006c6a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2200      	movs	r2, #0
 8006c74:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006c78:	68f8      	ldr	r0, [r7, #12]
 8006c7a:	f7ff ff03 	bl	8006a84 <SPI_WaitFifoStateUntilTimeout>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d007      	beq.n	8006c94 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c90:	2303      	movs	r3, #3
 8006c92:	e027      	b.n	8006ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	2180      	movs	r1, #128	; 0x80
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7ff fe68 	bl	8006974 <SPI_WaitFlagStateUntilTimeout>
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d007      	beq.n	8006cba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cae:	f043 0220 	orr.w	r2, r3, #32
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e014      	b.n	8006ce4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	9300      	str	r3, [sp, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f7ff fedc 	bl	8006a84 <SPI_WaitFifoStateUntilTimeout>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d007      	beq.n	8006ce2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd6:	f043 0220 	orr.w	r2, r3, #32
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	e000      	b.n	8006ce4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d101      	bne.n	8006cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e049      	b.n	8006d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d106      	bne.n	8006d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f841 	bl	8006d9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2202      	movs	r2, #2
 8006d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681a      	ldr	r2, [r3, #0]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	3304      	adds	r3, #4
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4610      	mov	r0, r2
 8006d2c:	f000 f9f8 	bl	8007120 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d90:	2300      	movs	r3, #0
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}

08006d9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006da2:	bf00      	nop
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b085      	sub	sp, #20
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dbe:	b2db      	uxtb	r3, r3
 8006dc0:	2b01      	cmp	r3, #1
 8006dc2:	d001      	beq.n	8006dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	e04f      	b.n	8006e68 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2202      	movs	r2, #2
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	68da      	ldr	r2, [r3, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a23      	ldr	r2, [pc, #140]	; (8006e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d01d      	beq.n	8006e26 <HAL_TIM_Base_Start_IT+0x76>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006df2:	d018      	beq.n	8006e26 <HAL_TIM_Base_Start_IT+0x76>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a1f      	ldr	r2, [pc, #124]	; (8006e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d013      	beq.n	8006e26 <HAL_TIM_Base_Start_IT+0x76>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a1e      	ldr	r2, [pc, #120]	; (8006e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d00e      	beq.n	8006e26 <HAL_TIM_Base_Start_IT+0x76>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a1c      	ldr	r2, [pc, #112]	; (8006e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d009      	beq.n	8006e26 <HAL_TIM_Base_Start_IT+0x76>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a1b      	ldr	r2, [pc, #108]	; (8006e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d004      	beq.n	8006e26 <HAL_TIM_Base_Start_IT+0x76>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a19      	ldr	r2, [pc, #100]	; (8006e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d115      	bne.n	8006e52 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689a      	ldr	r2, [r3, #8]
 8006e2c:	4b17      	ldr	r3, [pc, #92]	; (8006e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8006e2e:	4013      	ands	r3, r2
 8006e30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2b06      	cmp	r3, #6
 8006e36:	d015      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e3e:	d011      	beq.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f042 0201 	orr.w	r2, r2, #1
 8006e4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e50:	e008      	b.n	8006e64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f042 0201 	orr.w	r2, r2, #1
 8006e60:	601a      	str	r2, [r3, #0]
 8006e62:	e000      	b.n	8006e66 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e64:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	3714      	adds	r7, #20
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e72:	4770      	bx	lr
 8006e74:	40012c00 	.word	0x40012c00
 8006e78:	40000400 	.word	0x40000400
 8006e7c:	40000800 	.word	0x40000800
 8006e80:	40000c00 	.word	0x40000c00
 8006e84:	40013400 	.word	0x40013400
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	00010007 	.word	0x00010007

08006e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	691b      	ldr	r3, [r3, #16]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d122      	bne.n	8006eec <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	68db      	ldr	r3, [r3, #12]
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d11b      	bne.n	8006eec <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f06f 0202 	mvn.w	r2, #2
 8006ebc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	f003 0303 	and.w	r3, r3, #3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d003      	beq.n	8006eda <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f905 	bl	80070e2 <HAL_TIM_IC_CaptureCallback>
 8006ed8:	e005      	b.n	8006ee6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8f7 	bl	80070ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 f908 	bl	80070f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	f003 0304 	and.w	r3, r3, #4
 8006ef6:	2b04      	cmp	r3, #4
 8006ef8:	d122      	bne.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	f003 0304 	and.w	r3, r3, #4
 8006f04:	2b04      	cmp	r3, #4
 8006f06:	d11b      	bne.n	8006f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f06f 0204 	mvn.w	r2, #4
 8006f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2202      	movs	r2, #2
 8006f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	699b      	ldr	r3, [r3, #24]
 8006f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d003      	beq.n	8006f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 f8db 	bl	80070e2 <HAL_TIM_IC_CaptureCallback>
 8006f2c:	e005      	b.n	8006f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f8cd 	bl	80070ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f000 f8de 	bl	80070f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	691b      	ldr	r3, [r3, #16]
 8006f46:	f003 0308 	and.w	r3, r3, #8
 8006f4a:	2b08      	cmp	r3, #8
 8006f4c:	d122      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d11b      	bne.n	8006f94 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0208 	mvn.w	r2, #8
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8b1 	bl	80070e2 <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f8a3 	bl	80070ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f8b4 	bl	80070f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	f003 0310 	and.w	r3, r3, #16
 8006f9e:	2b10      	cmp	r3, #16
 8006fa0:	d122      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0310 	and.w	r3, r3, #16
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d11b      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f06f 0210 	mvn.w	r2, #16
 8006fb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2208      	movs	r2, #8
 8006fbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	69db      	ldr	r3, [r3, #28]
 8006fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f887 	bl	80070e2 <HAL_TIM_IC_CaptureCallback>
 8006fd4:	e005      	b.n	8006fe2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f879 	bl	80070ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f88a 	bl	80070f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691b      	ldr	r3, [r3, #16]
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b01      	cmp	r3, #1
 8006ff4:	d10e      	bne.n	8007014 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	2b01      	cmp	r3, #1
 8007002:	d107      	bne.n	8007014 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f06f 0201 	mvn.w	r2, #1
 800700c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f7f9 fdec 	bl	8000bec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701e:	2b80      	cmp	r3, #128	; 0x80
 8007020:	d10e      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68db      	ldr	r3, [r3, #12]
 8007028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702c:	2b80      	cmp	r3, #128	; 0x80
 800702e:	d107      	bne.n	8007040 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 f914 	bl	8007268 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800704a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800704e:	d10e      	bne.n	800706e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800705a:	2b80      	cmp	r3, #128	; 0x80
 800705c:	d107      	bne.n	800706e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007066:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f907 	bl	800727c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007078:	2b40      	cmp	r3, #64	; 0x40
 800707a:	d10e      	bne.n	800709a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007086:	2b40      	cmp	r3, #64	; 0x40
 8007088:	d107      	bne.n	800709a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007092:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 f838 	bl	800710a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	f003 0320 	and.w	r3, r3, #32
 80070a4:	2b20      	cmp	r3, #32
 80070a6:	d10e      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d107      	bne.n	80070c6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f06f 0220 	mvn.w	r2, #32
 80070be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 f8c7 	bl	8007254 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80070c6:	bf00      	nop
 80070c8:	3708      	adds	r7, #8
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070ce:	b480      	push	{r7}
 80070d0:	b083      	sub	sp, #12
 80070d2:	af00      	add	r7, sp, #0
 80070d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070d6:	bf00      	nop
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr

080070f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070f6:	b480      	push	{r7}
 80070f8:	b083      	sub	sp, #12
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr

0800710a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800710a:	b480      	push	{r7}
 800710c:	b083      	sub	sp, #12
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007112:	bf00      	nop
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
	...

08007120 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007120:	b480      	push	{r7}
 8007122:	b085      	sub	sp, #20
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a40      	ldr	r2, [pc, #256]	; (8007234 <TIM_Base_SetConfig+0x114>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d013      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713e:	d00f      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a3d      	ldr	r2, [pc, #244]	; (8007238 <TIM_Base_SetConfig+0x118>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00b      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a3c      	ldr	r2, [pc, #240]	; (800723c <TIM_Base_SetConfig+0x11c>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d007      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a3b      	ldr	r2, [pc, #236]	; (8007240 <TIM_Base_SetConfig+0x120>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_Base_SetConfig+0x40>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a3a      	ldr	r2, [pc, #232]	; (8007244 <TIM_Base_SetConfig+0x124>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d108      	bne.n	8007172 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007166:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	685b      	ldr	r3, [r3, #4]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	4313      	orrs	r3, r2
 8007170:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2f      	ldr	r2, [pc, #188]	; (8007234 <TIM_Base_SetConfig+0x114>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d01f      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007180:	d01b      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a2c      	ldr	r2, [pc, #176]	; (8007238 <TIM_Base_SetConfig+0x118>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d017      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a2b      	ldr	r2, [pc, #172]	; (800723c <TIM_Base_SetConfig+0x11c>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d013      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a2a      	ldr	r2, [pc, #168]	; (8007240 <TIM_Base_SetConfig+0x120>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d00f      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a29      	ldr	r2, [pc, #164]	; (8007244 <TIM_Base_SetConfig+0x124>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00b      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a28      	ldr	r2, [pc, #160]	; (8007248 <TIM_Base_SetConfig+0x128>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a27      	ldr	r2, [pc, #156]	; (800724c <TIM_Base_SetConfig+0x12c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d003      	beq.n	80071ba <TIM_Base_SetConfig+0x9a>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a26      	ldr	r2, [pc, #152]	; (8007250 <TIM_Base_SetConfig+0x130>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d108      	bne.n	80071cc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68db      	ldr	r3, [r3, #12]
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	4313      	orrs	r3, r2
 80071ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	689a      	ldr	r2, [r3, #8]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	681a      	ldr	r2, [r3, #0]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a10      	ldr	r2, [pc, #64]	; (8007234 <TIM_Base_SetConfig+0x114>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00f      	beq.n	8007218 <TIM_Base_SetConfig+0xf8>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a12      	ldr	r2, [pc, #72]	; (8007244 <TIM_Base_SetConfig+0x124>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d00b      	beq.n	8007218 <TIM_Base_SetConfig+0xf8>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a11      	ldr	r2, [pc, #68]	; (8007248 <TIM_Base_SetConfig+0x128>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d007      	beq.n	8007218 <TIM_Base_SetConfig+0xf8>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a10      	ldr	r2, [pc, #64]	; (800724c <TIM_Base_SetConfig+0x12c>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d003      	beq.n	8007218 <TIM_Base_SetConfig+0xf8>
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4a0f      	ldr	r2, [pc, #60]	; (8007250 <TIM_Base_SetConfig+0x130>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d103      	bne.n	8007220 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	615a      	str	r2, [r3, #20]
}
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007230:	4770      	bx	lr
 8007232:	bf00      	nop
 8007234:	40012c00 	.word	0x40012c00
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40013400 	.word	0x40013400
 8007248:	40014000 	.word	0x40014000
 800724c:	40014400 	.word	0x40014400
 8007250:	40014800 	.word	0x40014800

08007254 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr

08007268 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007268:	b480      	push	{r7}
 800726a:	b083      	sub	sp, #12
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e040      	b.n	8007324 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f7fb f9ae 	bl	8002614 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2224      	movs	r2, #36	; 0x24
 80072bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f8c0 	bl	8007454 <UART_SetConfig>
 80072d4:	4603      	mov	r3, r0
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80072da:	2301      	movs	r3, #1
 80072dc:	e022      	b.n	8007324 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d002      	beq.n	80072ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fb3e 	bl	8007968 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800730a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fbc5 	bl	8007aac <UART_CheckIdleState>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	; 0x28
 8007330:	af02      	add	r7, sp, #8
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	603b      	str	r3, [r7, #0]
 8007338:	4613      	mov	r3, r2
 800733a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007340:	2b20      	cmp	r3, #32
 8007342:	f040 8082 	bne.w	800744a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <HAL_UART_Transmit+0x26>
 800734c:	88fb      	ldrh	r3, [r7, #6]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d101      	bne.n	8007356 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e07a      	b.n	800744c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800735c:	2b01      	cmp	r3, #1
 800735e:	d101      	bne.n	8007364 <HAL_UART_Transmit+0x38>
 8007360:	2302      	movs	r3, #2
 8007362:	e073      	b.n	800744c <HAL_UART_Transmit+0x120>
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2201      	movs	r2, #1
 8007368:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	2200      	movs	r2, #0
 8007370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2221      	movs	r2, #33	; 0x21
 8007378:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800737a:	f7fb fb25 	bl	80029c8 <HAL_GetTick>
 800737e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	88fa      	ldrh	r2, [r7, #6]
 8007384:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	88fa      	ldrh	r2, [r7, #6]
 800738c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007398:	d108      	bne.n	80073ac <HAL_UART_Transmit+0x80>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d104      	bne.n	80073ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80073a2:	2300      	movs	r3, #0
 80073a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	61bb      	str	r3, [r7, #24]
 80073aa:	e003      	b.n	80073b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2200      	movs	r2, #0
 80073b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80073bc:	e02d      	b.n	800741a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	9300      	str	r3, [sp, #0]
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	2200      	movs	r2, #0
 80073c6:	2180      	movs	r1, #128	; 0x80
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f000 fbb8 	bl	8007b3e <UART_WaitOnFlagUntilTimeout>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e039      	b.n	800744c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10b      	bne.n	80073f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80073ea:	b292      	uxth	r2, r2
 80073ec:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	3302      	adds	r3, #2
 80073f2:	61bb      	str	r3, [r7, #24]
 80073f4:	e008      	b.n	8007408 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	b292      	uxth	r2, r2
 8007400:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	3301      	adds	r3, #1
 8007406:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800740e:	b29b      	uxth	r3, r3
 8007410:	3b01      	subs	r3, #1
 8007412:	b29a      	uxth	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007420:	b29b      	uxth	r3, r3
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1cb      	bne.n	80073be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	9300      	str	r3, [sp, #0]
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2200      	movs	r2, #0
 800742e:	2140      	movs	r1, #64	; 0x40
 8007430:	68f8      	ldr	r0, [r7, #12]
 8007432:	f000 fb84 	bl	8007b3e <UART_WaitOnFlagUntilTimeout>
 8007436:	4603      	mov	r3, r0
 8007438:	2b00      	cmp	r3, #0
 800743a:	d001      	beq.n	8007440 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	e005      	b.n	800744c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	2220      	movs	r2, #32
 8007444:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e000      	b.n	800744c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800744a:	2302      	movs	r3, #2
  }
}
 800744c:	4618      	mov	r0, r3
 800744e:	3720      	adds	r7, #32
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}

08007454 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007454:	b5b0      	push	{r4, r5, r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800745c:	2300      	movs	r3, #0
 800745e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	689a      	ldr	r2, [r3, #8]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	431a      	orrs	r2, r3
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	695b      	ldr	r3, [r3, #20]
 800746e:	431a      	orrs	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	4313      	orrs	r3, r2
 8007476:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	681a      	ldr	r2, [r3, #0]
 800747e:	4bad      	ldr	r3, [pc, #692]	; (8007734 <UART_SetConfig+0x2e0>)
 8007480:	4013      	ands	r3, r2
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	6812      	ldr	r2, [r2, #0]
 8007486:	69f9      	ldr	r1, [r7, #28]
 8007488:	430b      	orrs	r3, r1
 800748a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	685b      	ldr	r3, [r3, #4]
 8007492:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68da      	ldr	r2, [r3, #12]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	699b      	ldr	r3, [r3, #24]
 80074a6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4aa2      	ldr	r2, [pc, #648]	; (8007738 <UART_SetConfig+0x2e4>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d004      	beq.n	80074bc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	69fa      	ldr	r2, [r7, #28]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	689b      	ldr	r3, [r3, #8]
 80074c2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	69fa      	ldr	r2, [r7, #28]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a99      	ldr	r2, [pc, #612]	; (800773c <UART_SetConfig+0x2e8>)
 80074d6:	4293      	cmp	r3, r2
 80074d8:	d121      	bne.n	800751e <UART_SetConfig+0xca>
 80074da:	4b99      	ldr	r3, [pc, #612]	; (8007740 <UART_SetConfig+0x2ec>)
 80074dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074e0:	f003 0303 	and.w	r3, r3, #3
 80074e4:	2b03      	cmp	r3, #3
 80074e6:	d817      	bhi.n	8007518 <UART_SetConfig+0xc4>
 80074e8:	a201      	add	r2, pc, #4	; (adr r2, 80074f0 <UART_SetConfig+0x9c>)
 80074ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ee:	bf00      	nop
 80074f0:	08007501 	.word	0x08007501
 80074f4:	0800750d 	.word	0x0800750d
 80074f8:	08007507 	.word	0x08007507
 80074fc:	08007513 	.word	0x08007513
 8007500:	2301      	movs	r3, #1
 8007502:	76fb      	strb	r3, [r7, #27]
 8007504:	e0e7      	b.n	80076d6 <UART_SetConfig+0x282>
 8007506:	2302      	movs	r3, #2
 8007508:	76fb      	strb	r3, [r7, #27]
 800750a:	e0e4      	b.n	80076d6 <UART_SetConfig+0x282>
 800750c:	2304      	movs	r3, #4
 800750e:	76fb      	strb	r3, [r7, #27]
 8007510:	e0e1      	b.n	80076d6 <UART_SetConfig+0x282>
 8007512:	2308      	movs	r3, #8
 8007514:	76fb      	strb	r3, [r7, #27]
 8007516:	e0de      	b.n	80076d6 <UART_SetConfig+0x282>
 8007518:	2310      	movs	r3, #16
 800751a:	76fb      	strb	r3, [r7, #27]
 800751c:	e0db      	b.n	80076d6 <UART_SetConfig+0x282>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a88      	ldr	r2, [pc, #544]	; (8007744 <UART_SetConfig+0x2f0>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d132      	bne.n	800758e <UART_SetConfig+0x13a>
 8007528:	4b85      	ldr	r3, [pc, #532]	; (8007740 <UART_SetConfig+0x2ec>)
 800752a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752e:	f003 030c 	and.w	r3, r3, #12
 8007532:	2b0c      	cmp	r3, #12
 8007534:	d828      	bhi.n	8007588 <UART_SetConfig+0x134>
 8007536:	a201      	add	r2, pc, #4	; (adr r2, 800753c <UART_SetConfig+0xe8>)
 8007538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753c:	08007571 	.word	0x08007571
 8007540:	08007589 	.word	0x08007589
 8007544:	08007589 	.word	0x08007589
 8007548:	08007589 	.word	0x08007589
 800754c:	0800757d 	.word	0x0800757d
 8007550:	08007589 	.word	0x08007589
 8007554:	08007589 	.word	0x08007589
 8007558:	08007589 	.word	0x08007589
 800755c:	08007577 	.word	0x08007577
 8007560:	08007589 	.word	0x08007589
 8007564:	08007589 	.word	0x08007589
 8007568:	08007589 	.word	0x08007589
 800756c:	08007583 	.word	0x08007583
 8007570:	2300      	movs	r3, #0
 8007572:	76fb      	strb	r3, [r7, #27]
 8007574:	e0af      	b.n	80076d6 <UART_SetConfig+0x282>
 8007576:	2302      	movs	r3, #2
 8007578:	76fb      	strb	r3, [r7, #27]
 800757a:	e0ac      	b.n	80076d6 <UART_SetConfig+0x282>
 800757c:	2304      	movs	r3, #4
 800757e:	76fb      	strb	r3, [r7, #27]
 8007580:	e0a9      	b.n	80076d6 <UART_SetConfig+0x282>
 8007582:	2308      	movs	r3, #8
 8007584:	76fb      	strb	r3, [r7, #27]
 8007586:	e0a6      	b.n	80076d6 <UART_SetConfig+0x282>
 8007588:	2310      	movs	r3, #16
 800758a:	76fb      	strb	r3, [r7, #27]
 800758c:	e0a3      	b.n	80076d6 <UART_SetConfig+0x282>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	4a6d      	ldr	r2, [pc, #436]	; (8007748 <UART_SetConfig+0x2f4>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d120      	bne.n	80075da <UART_SetConfig+0x186>
 8007598:	4b69      	ldr	r3, [pc, #420]	; (8007740 <UART_SetConfig+0x2ec>)
 800759a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800759e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80075a2:	2b30      	cmp	r3, #48	; 0x30
 80075a4:	d013      	beq.n	80075ce <UART_SetConfig+0x17a>
 80075a6:	2b30      	cmp	r3, #48	; 0x30
 80075a8:	d814      	bhi.n	80075d4 <UART_SetConfig+0x180>
 80075aa:	2b20      	cmp	r3, #32
 80075ac:	d009      	beq.n	80075c2 <UART_SetConfig+0x16e>
 80075ae:	2b20      	cmp	r3, #32
 80075b0:	d810      	bhi.n	80075d4 <UART_SetConfig+0x180>
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d002      	beq.n	80075bc <UART_SetConfig+0x168>
 80075b6:	2b10      	cmp	r3, #16
 80075b8:	d006      	beq.n	80075c8 <UART_SetConfig+0x174>
 80075ba:	e00b      	b.n	80075d4 <UART_SetConfig+0x180>
 80075bc:	2300      	movs	r3, #0
 80075be:	76fb      	strb	r3, [r7, #27]
 80075c0:	e089      	b.n	80076d6 <UART_SetConfig+0x282>
 80075c2:	2302      	movs	r3, #2
 80075c4:	76fb      	strb	r3, [r7, #27]
 80075c6:	e086      	b.n	80076d6 <UART_SetConfig+0x282>
 80075c8:	2304      	movs	r3, #4
 80075ca:	76fb      	strb	r3, [r7, #27]
 80075cc:	e083      	b.n	80076d6 <UART_SetConfig+0x282>
 80075ce:	2308      	movs	r3, #8
 80075d0:	76fb      	strb	r3, [r7, #27]
 80075d2:	e080      	b.n	80076d6 <UART_SetConfig+0x282>
 80075d4:	2310      	movs	r3, #16
 80075d6:	76fb      	strb	r3, [r7, #27]
 80075d8:	e07d      	b.n	80076d6 <UART_SetConfig+0x282>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a5b      	ldr	r2, [pc, #364]	; (800774c <UART_SetConfig+0x2f8>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d120      	bne.n	8007626 <UART_SetConfig+0x1d2>
 80075e4:	4b56      	ldr	r3, [pc, #344]	; (8007740 <UART_SetConfig+0x2ec>)
 80075e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80075ee:	2bc0      	cmp	r3, #192	; 0xc0
 80075f0:	d013      	beq.n	800761a <UART_SetConfig+0x1c6>
 80075f2:	2bc0      	cmp	r3, #192	; 0xc0
 80075f4:	d814      	bhi.n	8007620 <UART_SetConfig+0x1cc>
 80075f6:	2b80      	cmp	r3, #128	; 0x80
 80075f8:	d009      	beq.n	800760e <UART_SetConfig+0x1ba>
 80075fa:	2b80      	cmp	r3, #128	; 0x80
 80075fc:	d810      	bhi.n	8007620 <UART_SetConfig+0x1cc>
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d002      	beq.n	8007608 <UART_SetConfig+0x1b4>
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d006      	beq.n	8007614 <UART_SetConfig+0x1c0>
 8007606:	e00b      	b.n	8007620 <UART_SetConfig+0x1cc>
 8007608:	2300      	movs	r3, #0
 800760a:	76fb      	strb	r3, [r7, #27]
 800760c:	e063      	b.n	80076d6 <UART_SetConfig+0x282>
 800760e:	2302      	movs	r3, #2
 8007610:	76fb      	strb	r3, [r7, #27]
 8007612:	e060      	b.n	80076d6 <UART_SetConfig+0x282>
 8007614:	2304      	movs	r3, #4
 8007616:	76fb      	strb	r3, [r7, #27]
 8007618:	e05d      	b.n	80076d6 <UART_SetConfig+0x282>
 800761a:	2308      	movs	r3, #8
 800761c:	76fb      	strb	r3, [r7, #27]
 800761e:	e05a      	b.n	80076d6 <UART_SetConfig+0x282>
 8007620:	2310      	movs	r3, #16
 8007622:	76fb      	strb	r3, [r7, #27]
 8007624:	e057      	b.n	80076d6 <UART_SetConfig+0x282>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a49      	ldr	r2, [pc, #292]	; (8007750 <UART_SetConfig+0x2fc>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d125      	bne.n	800767c <UART_SetConfig+0x228>
 8007630:	4b43      	ldr	r3, [pc, #268]	; (8007740 <UART_SetConfig+0x2ec>)
 8007632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800763a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800763e:	d017      	beq.n	8007670 <UART_SetConfig+0x21c>
 8007640:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007644:	d817      	bhi.n	8007676 <UART_SetConfig+0x222>
 8007646:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800764a:	d00b      	beq.n	8007664 <UART_SetConfig+0x210>
 800764c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007650:	d811      	bhi.n	8007676 <UART_SetConfig+0x222>
 8007652:	2b00      	cmp	r3, #0
 8007654:	d003      	beq.n	800765e <UART_SetConfig+0x20a>
 8007656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800765a:	d006      	beq.n	800766a <UART_SetConfig+0x216>
 800765c:	e00b      	b.n	8007676 <UART_SetConfig+0x222>
 800765e:	2300      	movs	r3, #0
 8007660:	76fb      	strb	r3, [r7, #27]
 8007662:	e038      	b.n	80076d6 <UART_SetConfig+0x282>
 8007664:	2302      	movs	r3, #2
 8007666:	76fb      	strb	r3, [r7, #27]
 8007668:	e035      	b.n	80076d6 <UART_SetConfig+0x282>
 800766a:	2304      	movs	r3, #4
 800766c:	76fb      	strb	r3, [r7, #27]
 800766e:	e032      	b.n	80076d6 <UART_SetConfig+0x282>
 8007670:	2308      	movs	r3, #8
 8007672:	76fb      	strb	r3, [r7, #27]
 8007674:	e02f      	b.n	80076d6 <UART_SetConfig+0x282>
 8007676:	2310      	movs	r3, #16
 8007678:	76fb      	strb	r3, [r7, #27]
 800767a:	e02c      	b.n	80076d6 <UART_SetConfig+0x282>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a2d      	ldr	r2, [pc, #180]	; (8007738 <UART_SetConfig+0x2e4>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d125      	bne.n	80076d2 <UART_SetConfig+0x27e>
 8007686:	4b2e      	ldr	r3, [pc, #184]	; (8007740 <UART_SetConfig+0x2ec>)
 8007688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007694:	d017      	beq.n	80076c6 <UART_SetConfig+0x272>
 8007696:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800769a:	d817      	bhi.n	80076cc <UART_SetConfig+0x278>
 800769c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a0:	d00b      	beq.n	80076ba <UART_SetConfig+0x266>
 80076a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80076a6:	d811      	bhi.n	80076cc <UART_SetConfig+0x278>
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d003      	beq.n	80076b4 <UART_SetConfig+0x260>
 80076ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b0:	d006      	beq.n	80076c0 <UART_SetConfig+0x26c>
 80076b2:	e00b      	b.n	80076cc <UART_SetConfig+0x278>
 80076b4:	2300      	movs	r3, #0
 80076b6:	76fb      	strb	r3, [r7, #27]
 80076b8:	e00d      	b.n	80076d6 <UART_SetConfig+0x282>
 80076ba:	2302      	movs	r3, #2
 80076bc:	76fb      	strb	r3, [r7, #27]
 80076be:	e00a      	b.n	80076d6 <UART_SetConfig+0x282>
 80076c0:	2304      	movs	r3, #4
 80076c2:	76fb      	strb	r3, [r7, #27]
 80076c4:	e007      	b.n	80076d6 <UART_SetConfig+0x282>
 80076c6:	2308      	movs	r3, #8
 80076c8:	76fb      	strb	r3, [r7, #27]
 80076ca:	e004      	b.n	80076d6 <UART_SetConfig+0x282>
 80076cc:	2310      	movs	r3, #16
 80076ce:	76fb      	strb	r3, [r7, #27]
 80076d0:	e001      	b.n	80076d6 <UART_SetConfig+0x282>
 80076d2:	2310      	movs	r3, #16
 80076d4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a17      	ldr	r2, [pc, #92]	; (8007738 <UART_SetConfig+0x2e4>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	f040 8087 	bne.w	80077f0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80076e2:	7efb      	ldrb	r3, [r7, #27]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d837      	bhi.n	8007758 <UART_SetConfig+0x304>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x29c>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007715 	.word	0x08007715
 80076f4:	08007759 	.word	0x08007759
 80076f8:	0800771d 	.word	0x0800771d
 80076fc:	08007759 	.word	0x08007759
 8007700:	08007723 	.word	0x08007723
 8007704:	08007759 	.word	0x08007759
 8007708:	08007759 	.word	0x08007759
 800770c:	08007759 	.word	0x08007759
 8007710:	0800772b 	.word	0x0800772b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007714:	f7fd fc84 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8007718:	6178      	str	r0, [r7, #20]
        break;
 800771a:	e022      	b.n	8007762 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <UART_SetConfig+0x300>)
 800771e:	617b      	str	r3, [r7, #20]
        break;
 8007720:	e01f      	b.n	8007762 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007722:	f7fd fbe5 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 8007726:	6178      	str	r0, [r7, #20]
        break;
 8007728:	e01b      	b.n	8007762 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800772a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800772e:	617b      	str	r3, [r7, #20]
        break;
 8007730:	e017      	b.n	8007762 <UART_SetConfig+0x30e>
 8007732:	bf00      	nop
 8007734:	efff69f3 	.word	0xefff69f3
 8007738:	40008000 	.word	0x40008000
 800773c:	40013800 	.word	0x40013800
 8007740:	40021000 	.word	0x40021000
 8007744:	40004400 	.word	0x40004400
 8007748:	40004800 	.word	0x40004800
 800774c:	40004c00 	.word	0x40004c00
 8007750:	40005000 	.word	0x40005000
 8007754:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007758:	2300      	movs	r3, #0
 800775a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	76bb      	strb	r3, [r7, #26]
        break;
 8007760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	f000 80f1 	beq.w	800794c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	005b      	lsls	r3, r3, #1
 8007772:	4413      	add	r3, r2
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	429a      	cmp	r2, r3
 8007778:	d305      	bcc.n	8007786 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007780:	697a      	ldr	r2, [r7, #20]
 8007782:	429a      	cmp	r2, r3
 8007784:	d902      	bls.n	800778c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	76bb      	strb	r3, [r7, #26]
 800778a:	e0df      	b.n	800794c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	4618      	mov	r0, r3
 8007790:	f04f 0100 	mov.w	r1, #0
 8007794:	f04f 0200 	mov.w	r2, #0
 8007798:	f04f 0300 	mov.w	r3, #0
 800779c:	020b      	lsls	r3, r1, #8
 800779e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80077a2:	0202      	lsls	r2, r0, #8
 80077a4:	6879      	ldr	r1, [r7, #4]
 80077a6:	6849      	ldr	r1, [r1, #4]
 80077a8:	0849      	lsrs	r1, r1, #1
 80077aa:	4608      	mov	r0, r1
 80077ac:	f04f 0100 	mov.w	r1, #0
 80077b0:	1814      	adds	r4, r2, r0
 80077b2:	eb43 0501 	adc.w	r5, r3, r1
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	685b      	ldr	r3, [r3, #4]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	4620      	mov	r0, r4
 80077c2:	4629      	mov	r1, r5
 80077c4:	f7f8 fd64 	bl	8000290 <__aeabi_uldivmod>
 80077c8:	4602      	mov	r2, r0
 80077ca:	460b      	mov	r3, r1
 80077cc:	4613      	mov	r3, r2
 80077ce:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077d6:	d308      	bcc.n	80077ea <UART_SetConfig+0x396>
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077de:	d204      	bcs.n	80077ea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	60da      	str	r2, [r3, #12]
 80077e8:	e0b0      	b.n	800794c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80077ea:	2301      	movs	r3, #1
 80077ec:	76bb      	strb	r3, [r7, #26]
 80077ee:	e0ad      	b.n	800794c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80077f8:	d15b      	bne.n	80078b2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80077fa:	7efb      	ldrb	r3, [r7, #27]
 80077fc:	2b08      	cmp	r3, #8
 80077fe:	d828      	bhi.n	8007852 <UART_SetConfig+0x3fe>
 8007800:	a201      	add	r2, pc, #4	; (adr r2, 8007808 <UART_SetConfig+0x3b4>)
 8007802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007806:	bf00      	nop
 8007808:	0800782d 	.word	0x0800782d
 800780c:	08007835 	.word	0x08007835
 8007810:	0800783d 	.word	0x0800783d
 8007814:	08007853 	.word	0x08007853
 8007818:	08007843 	.word	0x08007843
 800781c:	08007853 	.word	0x08007853
 8007820:	08007853 	.word	0x08007853
 8007824:	08007853 	.word	0x08007853
 8007828:	0800784b 	.word	0x0800784b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800782c:	f7fd fbf8 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 8007830:	6178      	str	r0, [r7, #20]
        break;
 8007832:	e013      	b.n	800785c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007834:	f7fd fc0a 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 8007838:	6178      	str	r0, [r7, #20]
        break;
 800783a:	e00f      	b.n	800785c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800783c:	4b49      	ldr	r3, [pc, #292]	; (8007964 <UART_SetConfig+0x510>)
 800783e:	617b      	str	r3, [r7, #20]
        break;
 8007840:	e00c      	b.n	800785c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007842:	f7fd fb55 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 8007846:	6178      	str	r0, [r7, #20]
        break;
 8007848:	e008      	b.n	800785c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800784a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800784e:	617b      	str	r3, [r7, #20]
        break;
 8007850:	e004      	b.n	800785c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007852:	2300      	movs	r3, #0
 8007854:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007856:	2301      	movs	r3, #1
 8007858:	76bb      	strb	r3, [r7, #26]
        break;
 800785a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800785c:	697b      	ldr	r3, [r7, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d074      	beq.n	800794c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	005a      	lsls	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	085b      	lsrs	r3, r3, #1
 800786c:	441a      	add	r2, r3
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	fbb2 f3f3 	udiv	r3, r2, r3
 8007876:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	2b0f      	cmp	r3, #15
 800787c:	d916      	bls.n	80078ac <UART_SetConfig+0x458>
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007884:	d212      	bcs.n	80078ac <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	b29b      	uxth	r3, r3
 800788a:	f023 030f 	bic.w	r3, r3, #15
 800788e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	085b      	lsrs	r3, r3, #1
 8007894:	b29b      	uxth	r3, r3
 8007896:	f003 0307 	and.w	r3, r3, #7
 800789a:	b29a      	uxth	r2, r3
 800789c:	89fb      	ldrh	r3, [r7, #14]
 800789e:	4313      	orrs	r3, r2
 80078a0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	89fa      	ldrh	r2, [r7, #14]
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	e04f      	b.n	800794c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	76bb      	strb	r3, [r7, #26]
 80078b0:	e04c      	b.n	800794c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80078b2:	7efb      	ldrb	r3, [r7, #27]
 80078b4:	2b08      	cmp	r3, #8
 80078b6:	d828      	bhi.n	800790a <UART_SetConfig+0x4b6>
 80078b8:	a201      	add	r2, pc, #4	; (adr r2, 80078c0 <UART_SetConfig+0x46c>)
 80078ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078be:	bf00      	nop
 80078c0:	080078e5 	.word	0x080078e5
 80078c4:	080078ed 	.word	0x080078ed
 80078c8:	080078f5 	.word	0x080078f5
 80078cc:	0800790b 	.word	0x0800790b
 80078d0:	080078fb 	.word	0x080078fb
 80078d4:	0800790b 	.word	0x0800790b
 80078d8:	0800790b 	.word	0x0800790b
 80078dc:	0800790b 	.word	0x0800790b
 80078e0:	08007903 	.word	0x08007903
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fd fb9c 	bl	8005020 <HAL_RCC_GetPCLK1Freq>
 80078e8:	6178      	str	r0, [r7, #20]
        break;
 80078ea:	e013      	b.n	8007914 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078ec:	f7fd fbae 	bl	800504c <HAL_RCC_GetPCLK2Freq>
 80078f0:	6178      	str	r0, [r7, #20]
        break;
 80078f2:	e00f      	b.n	8007914 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078f4:	4b1b      	ldr	r3, [pc, #108]	; (8007964 <UART_SetConfig+0x510>)
 80078f6:	617b      	str	r3, [r7, #20]
        break;
 80078f8:	e00c      	b.n	8007914 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078fa:	f7fd faf9 	bl	8004ef0 <HAL_RCC_GetSysClockFreq>
 80078fe:	6178      	str	r0, [r7, #20]
        break;
 8007900:	e008      	b.n	8007914 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007902:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007906:	617b      	str	r3, [r7, #20]
        break;
 8007908:	e004      	b.n	8007914 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800790a:	2300      	movs	r3, #0
 800790c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	76bb      	strb	r3, [r7, #26]
        break;
 8007912:	bf00      	nop
    }

    if (pclk != 0U)
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d018      	beq.n	800794c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	085a      	lsrs	r2, r3, #1
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	441a      	add	r2, r3
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	fbb2 f3f3 	udiv	r3, r2, r3
 800792c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	2b0f      	cmp	r3, #15
 8007932:	d909      	bls.n	8007948 <UART_SetConfig+0x4f4>
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800793a:	d205      	bcs.n	8007948 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	b29a      	uxth	r2, r3
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60da      	str	r2, [r3, #12]
 8007946:	e001      	b.n	800794c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007958:	7ebb      	ldrb	r3, [r7, #26]
}
 800795a:	4618      	mov	r0, r3
 800795c:	3720      	adds	r7, #32
 800795e:	46bd      	mov	sp, r7
 8007960:	bdb0      	pop	{r4, r5, r7, pc}
 8007962:	bf00      	nop
 8007964:	00f42400 	.word	0x00f42400

08007968 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007974:	f003 0301 	and.w	r3, r3, #1
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00a      	beq.n	8007992 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	430a      	orrs	r2, r1
 8007990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00a      	beq.n	80079b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	f003 0304 	and.w	r3, r3, #4
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00a      	beq.n	80079d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	430a      	orrs	r2, r1
 80079d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079da:	f003 0308 	and.w	r3, r3, #8
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d00a      	beq.n	80079f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	685b      	ldr	r3, [r3, #4]
 80079e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	430a      	orrs	r2, r1
 80079f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079fc:	f003 0310 	and.w	r3, r3, #16
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00a      	beq.n	8007a1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	430a      	orrs	r2, r1
 8007a18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d00a      	beq.n	8007a3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d01a      	beq.n	8007a7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	685b      	ldr	r3, [r3, #4]
 8007a4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	430a      	orrs	r2, r1
 8007a5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a66:	d10a      	bne.n	8007a7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d00a      	beq.n	8007aa0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	430a      	orrs	r2, r1
 8007a9e:	605a      	str	r2, [r3, #4]
  }
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af02      	add	r7, sp, #8
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007abc:	f7fa ff84 	bl	80029c8 <HAL_GetTick>
 8007ac0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	f003 0308 	and.w	r3, r3, #8
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d10e      	bne.n	8007aee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ad0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f82d 	bl	8007b3e <UART_WaitOnFlagUntilTimeout>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d001      	beq.n	8007aee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e023      	b.n	8007b36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f003 0304 	and.w	r3, r3, #4
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d10e      	bne.n	8007b1a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007afc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b00:	9300      	str	r3, [sp, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2200      	movs	r2, #0
 8007b06:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f817 	bl	8007b3e <UART_WaitOnFlagUntilTimeout>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e00d      	b.n	8007b36 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2220      	movs	r2, #32
 8007b24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007b34:	2300      	movs	r3, #0
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}

08007b3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b3e:	b580      	push	{r7, lr}
 8007b40:	b09c      	sub	sp, #112	; 0x70
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	603b      	str	r3, [r7, #0]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b4e:	e0a5      	b.n	8007c9c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b56:	f000 80a1 	beq.w	8007c9c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b5a:	f7fa ff35 	bl	80029c8 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d302      	bcc.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x32>
 8007b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d13e      	bne.n	8007bee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b78:	e853 3f00 	ldrex	r3, [r3]
 8007b7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b84:	667b      	str	r3, [r7, #100]	; 0x64
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007b9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e6      	bne.n	8007b70 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	3308      	adds	r3, #8
 8007ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bac:	e853 3f00 	ldrex	r3, [r3]
 8007bb0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb4:	f023 0301 	bic.w	r3, r3, #1
 8007bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	3308      	adds	r3, #8
 8007bc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007bc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007bc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007bc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007bca:	e841 2300 	strex	r3, r2, [r1]
 8007bce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d1e5      	bne.n	8007ba2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2220      	movs	r2, #32
 8007be0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2200      	movs	r2, #0
 8007be6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e067      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f003 0304 	and.w	r3, r3, #4
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d04f      	beq.n	8007c9c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c0a:	d147      	bne.n	8007c9c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c14:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c26:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007c2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007c34:	637b      	str	r3, [r7, #52]	; 0x34
 8007c36:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e6      	bne.n	8007c16 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	613b      	str	r3, [r7, #16]
   return(result);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3308      	adds	r3, #8
 8007c66:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007c68:	623a      	str	r2, [r7, #32]
 8007c6a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	69f9      	ldr	r1, [r7, #28]
 8007c6e:	6a3a      	ldr	r2, [r7, #32]
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c76:	69bb      	ldr	r3, [r7, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e5      	bne.n	8007c48 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2220      	movs	r2, #32
 8007c86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2200      	movs	r2, #0
 8007c94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007c98:	2303      	movs	r3, #3
 8007c9a:	e010      	b.n	8007cbe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	69da      	ldr	r2, [r3, #28]
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	68ba      	ldr	r2, [r7, #8]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	bf0c      	ite	eq
 8007cac:	2301      	moveq	r3, #1
 8007cae:	2300      	movne	r3, #0
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	461a      	mov	r2, r3
 8007cb4:	79fb      	ldrb	r3, [r7, #7]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	f43f af4a 	beq.w	8007b50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007cbc:	2300      	movs	r3, #0
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	3770      	adds	r7, #112	; 0x70
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	bd80      	pop	{r7, pc}
	...

08007cc8 <__errno>:
 8007cc8:	4b01      	ldr	r3, [pc, #4]	; (8007cd0 <__errno+0x8>)
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	4770      	bx	lr
 8007cce:	bf00      	nop
 8007cd0:	20000088 	.word	0x20000088

08007cd4 <__libc_init_array>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	4d0d      	ldr	r5, [pc, #52]	; (8007d0c <__libc_init_array+0x38>)
 8007cd8:	4c0d      	ldr	r4, [pc, #52]	; (8007d10 <__libc_init_array+0x3c>)
 8007cda:	1b64      	subs	r4, r4, r5
 8007cdc:	10a4      	asrs	r4, r4, #2
 8007cde:	2600      	movs	r6, #0
 8007ce0:	42a6      	cmp	r6, r4
 8007ce2:	d109      	bne.n	8007cf8 <__libc_init_array+0x24>
 8007ce4:	4d0b      	ldr	r5, [pc, #44]	; (8007d14 <__libc_init_array+0x40>)
 8007ce6:	4c0c      	ldr	r4, [pc, #48]	; (8007d18 <__libc_init_array+0x44>)
 8007ce8:	f000 fc4e 	bl	8008588 <_init>
 8007cec:	1b64      	subs	r4, r4, r5
 8007cee:	10a4      	asrs	r4, r4, #2
 8007cf0:	2600      	movs	r6, #0
 8007cf2:	42a6      	cmp	r6, r4
 8007cf4:	d105      	bne.n	8007d02 <__libc_init_array+0x2e>
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfc:	4798      	blx	r3
 8007cfe:	3601      	adds	r6, #1
 8007d00:	e7ee      	b.n	8007ce0 <__libc_init_array+0xc>
 8007d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d06:	4798      	blx	r3
 8007d08:	3601      	adds	r6, #1
 8007d0a:	e7f2      	b.n	8007cf2 <__libc_init_array+0x1e>
 8007d0c:	08008644 	.word	0x08008644
 8007d10:	08008644 	.word	0x08008644
 8007d14:	08008644 	.word	0x08008644
 8007d18:	08008648 	.word	0x08008648

08007d1c <memset>:
 8007d1c:	4402      	add	r2, r0
 8007d1e:	4603      	mov	r3, r0
 8007d20:	4293      	cmp	r3, r2
 8007d22:	d100      	bne.n	8007d26 <memset+0xa>
 8007d24:	4770      	bx	lr
 8007d26:	f803 1b01 	strb.w	r1, [r3], #1
 8007d2a:	e7f9      	b.n	8007d20 <memset+0x4>

08007d2c <siprintf>:
 8007d2c:	b40e      	push	{r1, r2, r3}
 8007d2e:	b500      	push	{lr}
 8007d30:	b09c      	sub	sp, #112	; 0x70
 8007d32:	ab1d      	add	r3, sp, #116	; 0x74
 8007d34:	9002      	str	r0, [sp, #8]
 8007d36:	9006      	str	r0, [sp, #24]
 8007d38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d3c:	4809      	ldr	r0, [pc, #36]	; (8007d64 <siprintf+0x38>)
 8007d3e:	9107      	str	r1, [sp, #28]
 8007d40:	9104      	str	r1, [sp, #16]
 8007d42:	4909      	ldr	r1, [pc, #36]	; (8007d68 <siprintf+0x3c>)
 8007d44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d48:	9105      	str	r1, [sp, #20]
 8007d4a:	6800      	ldr	r0, [r0, #0]
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	a902      	add	r1, sp, #8
 8007d50:	f000 f868 	bl	8007e24 <_svfiprintf_r>
 8007d54:	9b02      	ldr	r3, [sp, #8]
 8007d56:	2200      	movs	r2, #0
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	b01c      	add	sp, #112	; 0x70
 8007d5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d60:	b003      	add	sp, #12
 8007d62:	4770      	bx	lr
 8007d64:	20000088 	.word	0x20000088
 8007d68:	ffff0208 	.word	0xffff0208

08007d6c <__ssputs_r>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	688e      	ldr	r6, [r1, #8]
 8007d72:	429e      	cmp	r6, r3
 8007d74:	4682      	mov	sl, r0
 8007d76:	460c      	mov	r4, r1
 8007d78:	4690      	mov	r8, r2
 8007d7a:	461f      	mov	r7, r3
 8007d7c:	d838      	bhi.n	8007df0 <__ssputs_r+0x84>
 8007d7e:	898a      	ldrh	r2, [r1, #12]
 8007d80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d84:	d032      	beq.n	8007dec <__ssputs_r+0x80>
 8007d86:	6825      	ldr	r5, [r4, #0]
 8007d88:	6909      	ldr	r1, [r1, #16]
 8007d8a:	eba5 0901 	sub.w	r9, r5, r1
 8007d8e:	6965      	ldr	r5, [r4, #20]
 8007d90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d98:	3301      	adds	r3, #1
 8007d9a:	444b      	add	r3, r9
 8007d9c:	106d      	asrs	r5, r5, #1
 8007d9e:	429d      	cmp	r5, r3
 8007da0:	bf38      	it	cc
 8007da2:	461d      	movcc	r5, r3
 8007da4:	0553      	lsls	r3, r2, #21
 8007da6:	d531      	bpl.n	8007e0c <__ssputs_r+0xa0>
 8007da8:	4629      	mov	r1, r5
 8007daa:	f000 fb47 	bl	800843c <_malloc_r>
 8007dae:	4606      	mov	r6, r0
 8007db0:	b950      	cbnz	r0, 8007dc8 <__ssputs_r+0x5c>
 8007db2:	230c      	movs	r3, #12
 8007db4:	f8ca 3000 	str.w	r3, [sl]
 8007db8:	89a3      	ldrh	r3, [r4, #12]
 8007dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dc8:	6921      	ldr	r1, [r4, #16]
 8007dca:	464a      	mov	r2, r9
 8007dcc:	f000 fabe 	bl	800834c <memcpy>
 8007dd0:	89a3      	ldrh	r3, [r4, #12]
 8007dd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dda:	81a3      	strh	r3, [r4, #12]
 8007ddc:	6126      	str	r6, [r4, #16]
 8007dde:	6165      	str	r5, [r4, #20]
 8007de0:	444e      	add	r6, r9
 8007de2:	eba5 0509 	sub.w	r5, r5, r9
 8007de6:	6026      	str	r6, [r4, #0]
 8007de8:	60a5      	str	r5, [r4, #8]
 8007dea:	463e      	mov	r6, r7
 8007dec:	42be      	cmp	r6, r7
 8007dee:	d900      	bls.n	8007df2 <__ssputs_r+0x86>
 8007df0:	463e      	mov	r6, r7
 8007df2:	4632      	mov	r2, r6
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	4641      	mov	r1, r8
 8007df8:	f000 fab6 	bl	8008368 <memmove>
 8007dfc:	68a3      	ldr	r3, [r4, #8]
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	1b9b      	subs	r3, r3, r6
 8007e02:	4432      	add	r2, r6
 8007e04:	60a3      	str	r3, [r4, #8]
 8007e06:	6022      	str	r2, [r4, #0]
 8007e08:	2000      	movs	r0, #0
 8007e0a:	e7db      	b.n	8007dc4 <__ssputs_r+0x58>
 8007e0c:	462a      	mov	r2, r5
 8007e0e:	f000 fb6f 	bl	80084f0 <_realloc_r>
 8007e12:	4606      	mov	r6, r0
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d1e1      	bne.n	8007ddc <__ssputs_r+0x70>
 8007e18:	6921      	ldr	r1, [r4, #16]
 8007e1a:	4650      	mov	r0, sl
 8007e1c:	f000 fabe 	bl	800839c <_free_r>
 8007e20:	e7c7      	b.n	8007db2 <__ssputs_r+0x46>
	...

08007e24 <_svfiprintf_r>:
 8007e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e28:	4698      	mov	r8, r3
 8007e2a:	898b      	ldrh	r3, [r1, #12]
 8007e2c:	061b      	lsls	r3, r3, #24
 8007e2e:	b09d      	sub	sp, #116	; 0x74
 8007e30:	4607      	mov	r7, r0
 8007e32:	460d      	mov	r5, r1
 8007e34:	4614      	mov	r4, r2
 8007e36:	d50e      	bpl.n	8007e56 <_svfiprintf_r+0x32>
 8007e38:	690b      	ldr	r3, [r1, #16]
 8007e3a:	b963      	cbnz	r3, 8007e56 <_svfiprintf_r+0x32>
 8007e3c:	2140      	movs	r1, #64	; 0x40
 8007e3e:	f000 fafd 	bl	800843c <_malloc_r>
 8007e42:	6028      	str	r0, [r5, #0]
 8007e44:	6128      	str	r0, [r5, #16]
 8007e46:	b920      	cbnz	r0, 8007e52 <_svfiprintf_r+0x2e>
 8007e48:	230c      	movs	r3, #12
 8007e4a:	603b      	str	r3, [r7, #0]
 8007e4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e50:	e0d1      	b.n	8007ff6 <_svfiprintf_r+0x1d2>
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	616b      	str	r3, [r5, #20]
 8007e56:	2300      	movs	r3, #0
 8007e58:	9309      	str	r3, [sp, #36]	; 0x24
 8007e5a:	2320      	movs	r3, #32
 8007e5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e60:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e64:	2330      	movs	r3, #48	; 0x30
 8007e66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008010 <_svfiprintf_r+0x1ec>
 8007e6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e6e:	f04f 0901 	mov.w	r9, #1
 8007e72:	4623      	mov	r3, r4
 8007e74:	469a      	mov	sl, r3
 8007e76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e7a:	b10a      	cbz	r2, 8007e80 <_svfiprintf_r+0x5c>
 8007e7c:	2a25      	cmp	r2, #37	; 0x25
 8007e7e:	d1f9      	bne.n	8007e74 <_svfiprintf_r+0x50>
 8007e80:	ebba 0b04 	subs.w	fp, sl, r4
 8007e84:	d00b      	beq.n	8007e9e <_svfiprintf_r+0x7a>
 8007e86:	465b      	mov	r3, fp
 8007e88:	4622      	mov	r2, r4
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff ff6d 	bl	8007d6c <__ssputs_r>
 8007e92:	3001      	adds	r0, #1
 8007e94:	f000 80aa 	beq.w	8007fec <_svfiprintf_r+0x1c8>
 8007e98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e9a:	445a      	add	r2, fp
 8007e9c:	9209      	str	r2, [sp, #36]	; 0x24
 8007e9e:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f000 80a2 	beq.w	8007fec <_svfiprintf_r+0x1c8>
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007eae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb2:	f10a 0a01 	add.w	sl, sl, #1
 8007eb6:	9304      	str	r3, [sp, #16]
 8007eb8:	9307      	str	r3, [sp, #28]
 8007eba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ebe:	931a      	str	r3, [sp, #104]	; 0x68
 8007ec0:	4654      	mov	r4, sl
 8007ec2:	2205      	movs	r2, #5
 8007ec4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec8:	4851      	ldr	r0, [pc, #324]	; (8008010 <_svfiprintf_r+0x1ec>)
 8007eca:	f7f8 f991 	bl	80001f0 <memchr>
 8007ece:	9a04      	ldr	r2, [sp, #16]
 8007ed0:	b9d8      	cbnz	r0, 8007f0a <_svfiprintf_r+0xe6>
 8007ed2:	06d0      	lsls	r0, r2, #27
 8007ed4:	bf44      	itt	mi
 8007ed6:	2320      	movmi	r3, #32
 8007ed8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007edc:	0711      	lsls	r1, r2, #28
 8007ede:	bf44      	itt	mi
 8007ee0:	232b      	movmi	r3, #43	; 0x2b
 8007ee2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee6:	f89a 3000 	ldrb.w	r3, [sl]
 8007eea:	2b2a      	cmp	r3, #42	; 0x2a
 8007eec:	d015      	beq.n	8007f1a <_svfiprintf_r+0xf6>
 8007eee:	9a07      	ldr	r2, [sp, #28]
 8007ef0:	4654      	mov	r4, sl
 8007ef2:	2000      	movs	r0, #0
 8007ef4:	f04f 0c0a 	mov.w	ip, #10
 8007ef8:	4621      	mov	r1, r4
 8007efa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007efe:	3b30      	subs	r3, #48	; 0x30
 8007f00:	2b09      	cmp	r3, #9
 8007f02:	d94e      	bls.n	8007fa2 <_svfiprintf_r+0x17e>
 8007f04:	b1b0      	cbz	r0, 8007f34 <_svfiprintf_r+0x110>
 8007f06:	9207      	str	r2, [sp, #28]
 8007f08:	e014      	b.n	8007f34 <_svfiprintf_r+0x110>
 8007f0a:	eba0 0308 	sub.w	r3, r0, r8
 8007f0e:	fa09 f303 	lsl.w	r3, r9, r3
 8007f12:	4313      	orrs	r3, r2
 8007f14:	9304      	str	r3, [sp, #16]
 8007f16:	46a2      	mov	sl, r4
 8007f18:	e7d2      	b.n	8007ec0 <_svfiprintf_r+0x9c>
 8007f1a:	9b03      	ldr	r3, [sp, #12]
 8007f1c:	1d19      	adds	r1, r3, #4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	9103      	str	r1, [sp, #12]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	bfbb      	ittet	lt
 8007f26:	425b      	neglt	r3, r3
 8007f28:	f042 0202 	orrlt.w	r2, r2, #2
 8007f2c:	9307      	strge	r3, [sp, #28]
 8007f2e:	9307      	strlt	r3, [sp, #28]
 8007f30:	bfb8      	it	lt
 8007f32:	9204      	strlt	r2, [sp, #16]
 8007f34:	7823      	ldrb	r3, [r4, #0]
 8007f36:	2b2e      	cmp	r3, #46	; 0x2e
 8007f38:	d10c      	bne.n	8007f54 <_svfiprintf_r+0x130>
 8007f3a:	7863      	ldrb	r3, [r4, #1]
 8007f3c:	2b2a      	cmp	r3, #42	; 0x2a
 8007f3e:	d135      	bne.n	8007fac <_svfiprintf_r+0x188>
 8007f40:	9b03      	ldr	r3, [sp, #12]
 8007f42:	1d1a      	adds	r2, r3, #4
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	9203      	str	r2, [sp, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	bfb8      	it	lt
 8007f4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007f50:	3402      	adds	r4, #2
 8007f52:	9305      	str	r3, [sp, #20]
 8007f54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008020 <_svfiprintf_r+0x1fc>
 8007f58:	7821      	ldrb	r1, [r4, #0]
 8007f5a:	2203      	movs	r2, #3
 8007f5c:	4650      	mov	r0, sl
 8007f5e:	f7f8 f947 	bl	80001f0 <memchr>
 8007f62:	b140      	cbz	r0, 8007f76 <_svfiprintf_r+0x152>
 8007f64:	2340      	movs	r3, #64	; 0x40
 8007f66:	eba0 000a 	sub.w	r0, r0, sl
 8007f6a:	fa03 f000 	lsl.w	r0, r3, r0
 8007f6e:	9b04      	ldr	r3, [sp, #16]
 8007f70:	4303      	orrs	r3, r0
 8007f72:	3401      	adds	r4, #1
 8007f74:	9304      	str	r3, [sp, #16]
 8007f76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7a:	4826      	ldr	r0, [pc, #152]	; (8008014 <_svfiprintf_r+0x1f0>)
 8007f7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f80:	2206      	movs	r2, #6
 8007f82:	f7f8 f935 	bl	80001f0 <memchr>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	d038      	beq.n	8007ffc <_svfiprintf_r+0x1d8>
 8007f8a:	4b23      	ldr	r3, [pc, #140]	; (8008018 <_svfiprintf_r+0x1f4>)
 8007f8c:	bb1b      	cbnz	r3, 8007fd6 <_svfiprintf_r+0x1b2>
 8007f8e:	9b03      	ldr	r3, [sp, #12]
 8007f90:	3307      	adds	r3, #7
 8007f92:	f023 0307 	bic.w	r3, r3, #7
 8007f96:	3308      	adds	r3, #8
 8007f98:	9303      	str	r3, [sp, #12]
 8007f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f9c:	4433      	add	r3, r6
 8007f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa0:	e767      	b.n	8007e72 <_svfiprintf_r+0x4e>
 8007fa2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fa6:	460c      	mov	r4, r1
 8007fa8:	2001      	movs	r0, #1
 8007faa:	e7a5      	b.n	8007ef8 <_svfiprintf_r+0xd4>
 8007fac:	2300      	movs	r3, #0
 8007fae:	3401      	adds	r4, #1
 8007fb0:	9305      	str	r3, [sp, #20]
 8007fb2:	4619      	mov	r1, r3
 8007fb4:	f04f 0c0a 	mov.w	ip, #10
 8007fb8:	4620      	mov	r0, r4
 8007fba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fbe:	3a30      	subs	r2, #48	; 0x30
 8007fc0:	2a09      	cmp	r2, #9
 8007fc2:	d903      	bls.n	8007fcc <_svfiprintf_r+0x1a8>
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0c5      	beq.n	8007f54 <_svfiprintf_r+0x130>
 8007fc8:	9105      	str	r1, [sp, #20]
 8007fca:	e7c3      	b.n	8007f54 <_svfiprintf_r+0x130>
 8007fcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd0:	4604      	mov	r4, r0
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e7f0      	b.n	8007fb8 <_svfiprintf_r+0x194>
 8007fd6:	ab03      	add	r3, sp, #12
 8007fd8:	9300      	str	r3, [sp, #0]
 8007fda:	462a      	mov	r2, r5
 8007fdc:	4b0f      	ldr	r3, [pc, #60]	; (800801c <_svfiprintf_r+0x1f8>)
 8007fde:	a904      	add	r1, sp, #16
 8007fe0:	4638      	mov	r0, r7
 8007fe2:	f3af 8000 	nop.w
 8007fe6:	1c42      	adds	r2, r0, #1
 8007fe8:	4606      	mov	r6, r0
 8007fea:	d1d6      	bne.n	8007f9a <_svfiprintf_r+0x176>
 8007fec:	89ab      	ldrh	r3, [r5, #12]
 8007fee:	065b      	lsls	r3, r3, #25
 8007ff0:	f53f af2c 	bmi.w	8007e4c <_svfiprintf_r+0x28>
 8007ff4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ff6:	b01d      	add	sp, #116	; 0x74
 8007ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ffc:	ab03      	add	r3, sp, #12
 8007ffe:	9300      	str	r3, [sp, #0]
 8008000:	462a      	mov	r2, r5
 8008002:	4b06      	ldr	r3, [pc, #24]	; (800801c <_svfiprintf_r+0x1f8>)
 8008004:	a904      	add	r1, sp, #16
 8008006:	4638      	mov	r0, r7
 8008008:	f000 f87a 	bl	8008100 <_printf_i>
 800800c:	e7eb      	b.n	8007fe6 <_svfiprintf_r+0x1c2>
 800800e:	bf00      	nop
 8008010:	08008608 	.word	0x08008608
 8008014:	08008612 	.word	0x08008612
 8008018:	00000000 	.word	0x00000000
 800801c:	08007d6d 	.word	0x08007d6d
 8008020:	0800860e 	.word	0x0800860e

08008024 <_printf_common>:
 8008024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008028:	4616      	mov	r6, r2
 800802a:	4699      	mov	r9, r3
 800802c:	688a      	ldr	r2, [r1, #8]
 800802e:	690b      	ldr	r3, [r1, #16]
 8008030:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008034:	4293      	cmp	r3, r2
 8008036:	bfb8      	it	lt
 8008038:	4613      	movlt	r3, r2
 800803a:	6033      	str	r3, [r6, #0]
 800803c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008040:	4607      	mov	r7, r0
 8008042:	460c      	mov	r4, r1
 8008044:	b10a      	cbz	r2, 800804a <_printf_common+0x26>
 8008046:	3301      	adds	r3, #1
 8008048:	6033      	str	r3, [r6, #0]
 800804a:	6823      	ldr	r3, [r4, #0]
 800804c:	0699      	lsls	r1, r3, #26
 800804e:	bf42      	ittt	mi
 8008050:	6833      	ldrmi	r3, [r6, #0]
 8008052:	3302      	addmi	r3, #2
 8008054:	6033      	strmi	r3, [r6, #0]
 8008056:	6825      	ldr	r5, [r4, #0]
 8008058:	f015 0506 	ands.w	r5, r5, #6
 800805c:	d106      	bne.n	800806c <_printf_common+0x48>
 800805e:	f104 0a19 	add.w	sl, r4, #25
 8008062:	68e3      	ldr	r3, [r4, #12]
 8008064:	6832      	ldr	r2, [r6, #0]
 8008066:	1a9b      	subs	r3, r3, r2
 8008068:	42ab      	cmp	r3, r5
 800806a:	dc26      	bgt.n	80080ba <_printf_common+0x96>
 800806c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008070:	1e13      	subs	r3, r2, #0
 8008072:	6822      	ldr	r2, [r4, #0]
 8008074:	bf18      	it	ne
 8008076:	2301      	movne	r3, #1
 8008078:	0692      	lsls	r2, r2, #26
 800807a:	d42b      	bmi.n	80080d4 <_printf_common+0xb0>
 800807c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008080:	4649      	mov	r1, r9
 8008082:	4638      	mov	r0, r7
 8008084:	47c0      	blx	r8
 8008086:	3001      	adds	r0, #1
 8008088:	d01e      	beq.n	80080c8 <_printf_common+0xa4>
 800808a:	6823      	ldr	r3, [r4, #0]
 800808c:	68e5      	ldr	r5, [r4, #12]
 800808e:	6832      	ldr	r2, [r6, #0]
 8008090:	f003 0306 	and.w	r3, r3, #6
 8008094:	2b04      	cmp	r3, #4
 8008096:	bf08      	it	eq
 8008098:	1aad      	subeq	r5, r5, r2
 800809a:	68a3      	ldr	r3, [r4, #8]
 800809c:	6922      	ldr	r2, [r4, #16]
 800809e:	bf0c      	ite	eq
 80080a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080a4:	2500      	movne	r5, #0
 80080a6:	4293      	cmp	r3, r2
 80080a8:	bfc4      	itt	gt
 80080aa:	1a9b      	subgt	r3, r3, r2
 80080ac:	18ed      	addgt	r5, r5, r3
 80080ae:	2600      	movs	r6, #0
 80080b0:	341a      	adds	r4, #26
 80080b2:	42b5      	cmp	r5, r6
 80080b4:	d11a      	bne.n	80080ec <_printf_common+0xc8>
 80080b6:	2000      	movs	r0, #0
 80080b8:	e008      	b.n	80080cc <_printf_common+0xa8>
 80080ba:	2301      	movs	r3, #1
 80080bc:	4652      	mov	r2, sl
 80080be:	4649      	mov	r1, r9
 80080c0:	4638      	mov	r0, r7
 80080c2:	47c0      	blx	r8
 80080c4:	3001      	adds	r0, #1
 80080c6:	d103      	bne.n	80080d0 <_printf_common+0xac>
 80080c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080d0:	3501      	adds	r5, #1
 80080d2:	e7c6      	b.n	8008062 <_printf_common+0x3e>
 80080d4:	18e1      	adds	r1, r4, r3
 80080d6:	1c5a      	adds	r2, r3, #1
 80080d8:	2030      	movs	r0, #48	; 0x30
 80080da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080de:	4422      	add	r2, r4
 80080e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080e8:	3302      	adds	r3, #2
 80080ea:	e7c7      	b.n	800807c <_printf_common+0x58>
 80080ec:	2301      	movs	r3, #1
 80080ee:	4622      	mov	r2, r4
 80080f0:	4649      	mov	r1, r9
 80080f2:	4638      	mov	r0, r7
 80080f4:	47c0      	blx	r8
 80080f6:	3001      	adds	r0, #1
 80080f8:	d0e6      	beq.n	80080c8 <_printf_common+0xa4>
 80080fa:	3601      	adds	r6, #1
 80080fc:	e7d9      	b.n	80080b2 <_printf_common+0x8e>
	...

08008100 <_printf_i>:
 8008100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008104:	460c      	mov	r4, r1
 8008106:	4691      	mov	r9, r2
 8008108:	7e27      	ldrb	r7, [r4, #24]
 800810a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800810c:	2f78      	cmp	r7, #120	; 0x78
 800810e:	4680      	mov	r8, r0
 8008110:	469a      	mov	sl, r3
 8008112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008116:	d807      	bhi.n	8008128 <_printf_i+0x28>
 8008118:	2f62      	cmp	r7, #98	; 0x62
 800811a:	d80a      	bhi.n	8008132 <_printf_i+0x32>
 800811c:	2f00      	cmp	r7, #0
 800811e:	f000 80d8 	beq.w	80082d2 <_printf_i+0x1d2>
 8008122:	2f58      	cmp	r7, #88	; 0x58
 8008124:	f000 80a3 	beq.w	800826e <_printf_i+0x16e>
 8008128:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800812c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008130:	e03a      	b.n	80081a8 <_printf_i+0xa8>
 8008132:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008136:	2b15      	cmp	r3, #21
 8008138:	d8f6      	bhi.n	8008128 <_printf_i+0x28>
 800813a:	a001      	add	r0, pc, #4	; (adr r0, 8008140 <_printf_i+0x40>)
 800813c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008140:	08008199 	.word	0x08008199
 8008144:	080081ad 	.word	0x080081ad
 8008148:	08008129 	.word	0x08008129
 800814c:	08008129 	.word	0x08008129
 8008150:	08008129 	.word	0x08008129
 8008154:	08008129 	.word	0x08008129
 8008158:	080081ad 	.word	0x080081ad
 800815c:	08008129 	.word	0x08008129
 8008160:	08008129 	.word	0x08008129
 8008164:	08008129 	.word	0x08008129
 8008168:	08008129 	.word	0x08008129
 800816c:	080082b9 	.word	0x080082b9
 8008170:	080081dd 	.word	0x080081dd
 8008174:	0800829b 	.word	0x0800829b
 8008178:	08008129 	.word	0x08008129
 800817c:	08008129 	.word	0x08008129
 8008180:	080082db 	.word	0x080082db
 8008184:	08008129 	.word	0x08008129
 8008188:	080081dd 	.word	0x080081dd
 800818c:	08008129 	.word	0x08008129
 8008190:	08008129 	.word	0x08008129
 8008194:	080082a3 	.word	0x080082a3
 8008198:	680b      	ldr	r3, [r1, #0]
 800819a:	1d1a      	adds	r2, r3, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	600a      	str	r2, [r1, #0]
 80081a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80081a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081a8:	2301      	movs	r3, #1
 80081aa:	e0a3      	b.n	80082f4 <_printf_i+0x1f4>
 80081ac:	6825      	ldr	r5, [r4, #0]
 80081ae:	6808      	ldr	r0, [r1, #0]
 80081b0:	062e      	lsls	r6, r5, #24
 80081b2:	f100 0304 	add.w	r3, r0, #4
 80081b6:	d50a      	bpl.n	80081ce <_printf_i+0xce>
 80081b8:	6805      	ldr	r5, [r0, #0]
 80081ba:	600b      	str	r3, [r1, #0]
 80081bc:	2d00      	cmp	r5, #0
 80081be:	da03      	bge.n	80081c8 <_printf_i+0xc8>
 80081c0:	232d      	movs	r3, #45	; 0x2d
 80081c2:	426d      	negs	r5, r5
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c8:	485e      	ldr	r0, [pc, #376]	; (8008344 <_printf_i+0x244>)
 80081ca:	230a      	movs	r3, #10
 80081cc:	e019      	b.n	8008202 <_printf_i+0x102>
 80081ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80081d2:	6805      	ldr	r5, [r0, #0]
 80081d4:	600b      	str	r3, [r1, #0]
 80081d6:	bf18      	it	ne
 80081d8:	b22d      	sxthne	r5, r5
 80081da:	e7ef      	b.n	80081bc <_printf_i+0xbc>
 80081dc:	680b      	ldr	r3, [r1, #0]
 80081de:	6825      	ldr	r5, [r4, #0]
 80081e0:	1d18      	adds	r0, r3, #4
 80081e2:	6008      	str	r0, [r1, #0]
 80081e4:	0628      	lsls	r0, r5, #24
 80081e6:	d501      	bpl.n	80081ec <_printf_i+0xec>
 80081e8:	681d      	ldr	r5, [r3, #0]
 80081ea:	e002      	b.n	80081f2 <_printf_i+0xf2>
 80081ec:	0669      	lsls	r1, r5, #25
 80081ee:	d5fb      	bpl.n	80081e8 <_printf_i+0xe8>
 80081f0:	881d      	ldrh	r5, [r3, #0]
 80081f2:	4854      	ldr	r0, [pc, #336]	; (8008344 <_printf_i+0x244>)
 80081f4:	2f6f      	cmp	r7, #111	; 0x6f
 80081f6:	bf0c      	ite	eq
 80081f8:	2308      	moveq	r3, #8
 80081fa:	230a      	movne	r3, #10
 80081fc:	2100      	movs	r1, #0
 80081fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008202:	6866      	ldr	r6, [r4, #4]
 8008204:	60a6      	str	r6, [r4, #8]
 8008206:	2e00      	cmp	r6, #0
 8008208:	bfa2      	ittt	ge
 800820a:	6821      	ldrge	r1, [r4, #0]
 800820c:	f021 0104 	bicge.w	r1, r1, #4
 8008210:	6021      	strge	r1, [r4, #0]
 8008212:	b90d      	cbnz	r5, 8008218 <_printf_i+0x118>
 8008214:	2e00      	cmp	r6, #0
 8008216:	d04d      	beq.n	80082b4 <_printf_i+0x1b4>
 8008218:	4616      	mov	r6, r2
 800821a:	fbb5 f1f3 	udiv	r1, r5, r3
 800821e:	fb03 5711 	mls	r7, r3, r1, r5
 8008222:	5dc7      	ldrb	r7, [r0, r7]
 8008224:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008228:	462f      	mov	r7, r5
 800822a:	42bb      	cmp	r3, r7
 800822c:	460d      	mov	r5, r1
 800822e:	d9f4      	bls.n	800821a <_printf_i+0x11a>
 8008230:	2b08      	cmp	r3, #8
 8008232:	d10b      	bne.n	800824c <_printf_i+0x14c>
 8008234:	6823      	ldr	r3, [r4, #0]
 8008236:	07df      	lsls	r7, r3, #31
 8008238:	d508      	bpl.n	800824c <_printf_i+0x14c>
 800823a:	6923      	ldr	r3, [r4, #16]
 800823c:	6861      	ldr	r1, [r4, #4]
 800823e:	4299      	cmp	r1, r3
 8008240:	bfde      	ittt	le
 8008242:	2330      	movle	r3, #48	; 0x30
 8008244:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008248:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 800824c:	1b92      	subs	r2, r2, r6
 800824e:	6122      	str	r2, [r4, #16]
 8008250:	f8cd a000 	str.w	sl, [sp]
 8008254:	464b      	mov	r3, r9
 8008256:	aa03      	add	r2, sp, #12
 8008258:	4621      	mov	r1, r4
 800825a:	4640      	mov	r0, r8
 800825c:	f7ff fee2 	bl	8008024 <_printf_common>
 8008260:	3001      	adds	r0, #1
 8008262:	d14c      	bne.n	80082fe <_printf_i+0x1fe>
 8008264:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008268:	b004      	add	sp, #16
 800826a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800826e:	4835      	ldr	r0, [pc, #212]	; (8008344 <_printf_i+0x244>)
 8008270:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	680e      	ldr	r6, [r1, #0]
 8008278:	061f      	lsls	r7, r3, #24
 800827a:	f856 5b04 	ldr.w	r5, [r6], #4
 800827e:	600e      	str	r6, [r1, #0]
 8008280:	d514      	bpl.n	80082ac <_printf_i+0x1ac>
 8008282:	07d9      	lsls	r1, r3, #31
 8008284:	bf44      	itt	mi
 8008286:	f043 0320 	orrmi.w	r3, r3, #32
 800828a:	6023      	strmi	r3, [r4, #0]
 800828c:	b91d      	cbnz	r5, 8008296 <_printf_i+0x196>
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	f023 0320 	bic.w	r3, r3, #32
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	2310      	movs	r3, #16
 8008298:	e7b0      	b.n	80081fc <_printf_i+0xfc>
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	f043 0320 	orr.w	r3, r3, #32
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	2378      	movs	r3, #120	; 0x78
 80082a4:	4828      	ldr	r0, [pc, #160]	; (8008348 <_printf_i+0x248>)
 80082a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082aa:	e7e3      	b.n	8008274 <_printf_i+0x174>
 80082ac:	065e      	lsls	r6, r3, #25
 80082ae:	bf48      	it	mi
 80082b0:	b2ad      	uxthmi	r5, r5
 80082b2:	e7e6      	b.n	8008282 <_printf_i+0x182>
 80082b4:	4616      	mov	r6, r2
 80082b6:	e7bb      	b.n	8008230 <_printf_i+0x130>
 80082b8:	680b      	ldr	r3, [r1, #0]
 80082ba:	6826      	ldr	r6, [r4, #0]
 80082bc:	6960      	ldr	r0, [r4, #20]
 80082be:	1d1d      	adds	r5, r3, #4
 80082c0:	600d      	str	r5, [r1, #0]
 80082c2:	0635      	lsls	r5, r6, #24
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	d501      	bpl.n	80082cc <_printf_i+0x1cc>
 80082c8:	6018      	str	r0, [r3, #0]
 80082ca:	e002      	b.n	80082d2 <_printf_i+0x1d2>
 80082cc:	0671      	lsls	r1, r6, #25
 80082ce:	d5fb      	bpl.n	80082c8 <_printf_i+0x1c8>
 80082d0:	8018      	strh	r0, [r3, #0]
 80082d2:	2300      	movs	r3, #0
 80082d4:	6123      	str	r3, [r4, #16]
 80082d6:	4616      	mov	r6, r2
 80082d8:	e7ba      	b.n	8008250 <_printf_i+0x150>
 80082da:	680b      	ldr	r3, [r1, #0]
 80082dc:	1d1a      	adds	r2, r3, #4
 80082de:	600a      	str	r2, [r1, #0]
 80082e0:	681e      	ldr	r6, [r3, #0]
 80082e2:	6862      	ldr	r2, [r4, #4]
 80082e4:	2100      	movs	r1, #0
 80082e6:	4630      	mov	r0, r6
 80082e8:	f7f7 ff82 	bl	80001f0 <memchr>
 80082ec:	b108      	cbz	r0, 80082f2 <_printf_i+0x1f2>
 80082ee:	1b80      	subs	r0, r0, r6
 80082f0:	6060      	str	r0, [r4, #4]
 80082f2:	6863      	ldr	r3, [r4, #4]
 80082f4:	6123      	str	r3, [r4, #16]
 80082f6:	2300      	movs	r3, #0
 80082f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80082fc:	e7a8      	b.n	8008250 <_printf_i+0x150>
 80082fe:	6923      	ldr	r3, [r4, #16]
 8008300:	4632      	mov	r2, r6
 8008302:	4649      	mov	r1, r9
 8008304:	4640      	mov	r0, r8
 8008306:	47d0      	blx	sl
 8008308:	3001      	adds	r0, #1
 800830a:	d0ab      	beq.n	8008264 <_printf_i+0x164>
 800830c:	6823      	ldr	r3, [r4, #0]
 800830e:	079b      	lsls	r3, r3, #30
 8008310:	d413      	bmi.n	800833a <_printf_i+0x23a>
 8008312:	68e0      	ldr	r0, [r4, #12]
 8008314:	9b03      	ldr	r3, [sp, #12]
 8008316:	4298      	cmp	r0, r3
 8008318:	bfb8      	it	lt
 800831a:	4618      	movlt	r0, r3
 800831c:	e7a4      	b.n	8008268 <_printf_i+0x168>
 800831e:	2301      	movs	r3, #1
 8008320:	4632      	mov	r2, r6
 8008322:	4649      	mov	r1, r9
 8008324:	4640      	mov	r0, r8
 8008326:	47d0      	blx	sl
 8008328:	3001      	adds	r0, #1
 800832a:	d09b      	beq.n	8008264 <_printf_i+0x164>
 800832c:	3501      	adds	r5, #1
 800832e:	68e3      	ldr	r3, [r4, #12]
 8008330:	9903      	ldr	r1, [sp, #12]
 8008332:	1a5b      	subs	r3, r3, r1
 8008334:	42ab      	cmp	r3, r5
 8008336:	dcf2      	bgt.n	800831e <_printf_i+0x21e>
 8008338:	e7eb      	b.n	8008312 <_printf_i+0x212>
 800833a:	2500      	movs	r5, #0
 800833c:	f104 0619 	add.w	r6, r4, #25
 8008340:	e7f5      	b.n	800832e <_printf_i+0x22e>
 8008342:	bf00      	nop
 8008344:	08008619 	.word	0x08008619
 8008348:	0800862a 	.word	0x0800862a

0800834c <memcpy>:
 800834c:	440a      	add	r2, r1
 800834e:	4291      	cmp	r1, r2
 8008350:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008354:	d100      	bne.n	8008358 <memcpy+0xc>
 8008356:	4770      	bx	lr
 8008358:	b510      	push	{r4, lr}
 800835a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800835e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008362:	4291      	cmp	r1, r2
 8008364:	d1f9      	bne.n	800835a <memcpy+0xe>
 8008366:	bd10      	pop	{r4, pc}

08008368 <memmove>:
 8008368:	4288      	cmp	r0, r1
 800836a:	b510      	push	{r4, lr}
 800836c:	eb01 0402 	add.w	r4, r1, r2
 8008370:	d902      	bls.n	8008378 <memmove+0x10>
 8008372:	4284      	cmp	r4, r0
 8008374:	4623      	mov	r3, r4
 8008376:	d807      	bhi.n	8008388 <memmove+0x20>
 8008378:	1e43      	subs	r3, r0, #1
 800837a:	42a1      	cmp	r1, r4
 800837c:	d008      	beq.n	8008390 <memmove+0x28>
 800837e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008382:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008386:	e7f8      	b.n	800837a <memmove+0x12>
 8008388:	4402      	add	r2, r0
 800838a:	4601      	mov	r1, r0
 800838c:	428a      	cmp	r2, r1
 800838e:	d100      	bne.n	8008392 <memmove+0x2a>
 8008390:	bd10      	pop	{r4, pc}
 8008392:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008396:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800839a:	e7f7      	b.n	800838c <memmove+0x24>

0800839c <_free_r>:
 800839c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800839e:	2900      	cmp	r1, #0
 80083a0:	d048      	beq.n	8008434 <_free_r+0x98>
 80083a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a6:	9001      	str	r0, [sp, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f1a1 0404 	sub.w	r4, r1, #4
 80083ae:	bfb8      	it	lt
 80083b0:	18e4      	addlt	r4, r4, r3
 80083b2:	f000 f8d3 	bl	800855c <__malloc_lock>
 80083b6:	4a20      	ldr	r2, [pc, #128]	; (8008438 <_free_r+0x9c>)
 80083b8:	9801      	ldr	r0, [sp, #4]
 80083ba:	6813      	ldr	r3, [r2, #0]
 80083bc:	4615      	mov	r5, r2
 80083be:	b933      	cbnz	r3, 80083ce <_free_r+0x32>
 80083c0:	6063      	str	r3, [r4, #4]
 80083c2:	6014      	str	r4, [r2, #0]
 80083c4:	b003      	add	sp, #12
 80083c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083ca:	f000 b8cd 	b.w	8008568 <__malloc_unlock>
 80083ce:	42a3      	cmp	r3, r4
 80083d0:	d90b      	bls.n	80083ea <_free_r+0x4e>
 80083d2:	6821      	ldr	r1, [r4, #0]
 80083d4:	1862      	adds	r2, r4, r1
 80083d6:	4293      	cmp	r3, r2
 80083d8:	bf04      	itt	eq
 80083da:	681a      	ldreq	r2, [r3, #0]
 80083dc:	685b      	ldreq	r3, [r3, #4]
 80083de:	6063      	str	r3, [r4, #4]
 80083e0:	bf04      	itt	eq
 80083e2:	1852      	addeq	r2, r2, r1
 80083e4:	6022      	streq	r2, [r4, #0]
 80083e6:	602c      	str	r4, [r5, #0]
 80083e8:	e7ec      	b.n	80083c4 <_free_r+0x28>
 80083ea:	461a      	mov	r2, r3
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	b10b      	cbz	r3, 80083f4 <_free_r+0x58>
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	d9fa      	bls.n	80083ea <_free_r+0x4e>
 80083f4:	6811      	ldr	r1, [r2, #0]
 80083f6:	1855      	adds	r5, r2, r1
 80083f8:	42a5      	cmp	r5, r4
 80083fa:	d10b      	bne.n	8008414 <_free_r+0x78>
 80083fc:	6824      	ldr	r4, [r4, #0]
 80083fe:	4421      	add	r1, r4
 8008400:	1854      	adds	r4, r2, r1
 8008402:	42a3      	cmp	r3, r4
 8008404:	6011      	str	r1, [r2, #0]
 8008406:	d1dd      	bne.n	80083c4 <_free_r+0x28>
 8008408:	681c      	ldr	r4, [r3, #0]
 800840a:	685b      	ldr	r3, [r3, #4]
 800840c:	6053      	str	r3, [r2, #4]
 800840e:	4421      	add	r1, r4
 8008410:	6011      	str	r1, [r2, #0]
 8008412:	e7d7      	b.n	80083c4 <_free_r+0x28>
 8008414:	d902      	bls.n	800841c <_free_r+0x80>
 8008416:	230c      	movs	r3, #12
 8008418:	6003      	str	r3, [r0, #0]
 800841a:	e7d3      	b.n	80083c4 <_free_r+0x28>
 800841c:	6825      	ldr	r5, [r4, #0]
 800841e:	1961      	adds	r1, r4, r5
 8008420:	428b      	cmp	r3, r1
 8008422:	bf04      	itt	eq
 8008424:	6819      	ldreq	r1, [r3, #0]
 8008426:	685b      	ldreq	r3, [r3, #4]
 8008428:	6063      	str	r3, [r4, #4]
 800842a:	bf04      	itt	eq
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	6054      	str	r4, [r2, #4]
 8008432:	e7c7      	b.n	80083c4 <_free_r+0x28>
 8008434:	b003      	add	sp, #12
 8008436:	bd30      	pop	{r4, r5, pc}
 8008438:	20000168 	.word	0x20000168

0800843c <_malloc_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	1ccd      	adds	r5, r1, #3
 8008440:	f025 0503 	bic.w	r5, r5, #3
 8008444:	3508      	adds	r5, #8
 8008446:	2d0c      	cmp	r5, #12
 8008448:	bf38      	it	cc
 800844a:	250c      	movcc	r5, #12
 800844c:	2d00      	cmp	r5, #0
 800844e:	4606      	mov	r6, r0
 8008450:	db01      	blt.n	8008456 <_malloc_r+0x1a>
 8008452:	42a9      	cmp	r1, r5
 8008454:	d903      	bls.n	800845e <_malloc_r+0x22>
 8008456:	230c      	movs	r3, #12
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	2000      	movs	r0, #0
 800845c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845e:	f000 f87d 	bl	800855c <__malloc_lock>
 8008462:	4921      	ldr	r1, [pc, #132]	; (80084e8 <_malloc_r+0xac>)
 8008464:	680a      	ldr	r2, [r1, #0]
 8008466:	4614      	mov	r4, r2
 8008468:	b99c      	cbnz	r4, 8008492 <_malloc_r+0x56>
 800846a:	4f20      	ldr	r7, [pc, #128]	; (80084ec <_malloc_r+0xb0>)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	b923      	cbnz	r3, 800847a <_malloc_r+0x3e>
 8008470:	4621      	mov	r1, r4
 8008472:	4630      	mov	r0, r6
 8008474:	f000 f862 	bl	800853c <_sbrk_r>
 8008478:	6038      	str	r0, [r7, #0]
 800847a:	4629      	mov	r1, r5
 800847c:	4630      	mov	r0, r6
 800847e:	f000 f85d 	bl	800853c <_sbrk_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d123      	bne.n	80084ce <_malloc_r+0x92>
 8008486:	230c      	movs	r3, #12
 8008488:	6033      	str	r3, [r6, #0]
 800848a:	4630      	mov	r0, r6
 800848c:	f000 f86c 	bl	8008568 <__malloc_unlock>
 8008490:	e7e3      	b.n	800845a <_malloc_r+0x1e>
 8008492:	6823      	ldr	r3, [r4, #0]
 8008494:	1b5b      	subs	r3, r3, r5
 8008496:	d417      	bmi.n	80084c8 <_malloc_r+0x8c>
 8008498:	2b0b      	cmp	r3, #11
 800849a:	d903      	bls.n	80084a4 <_malloc_r+0x68>
 800849c:	6023      	str	r3, [r4, #0]
 800849e:	441c      	add	r4, r3
 80084a0:	6025      	str	r5, [r4, #0]
 80084a2:	e004      	b.n	80084ae <_malloc_r+0x72>
 80084a4:	6863      	ldr	r3, [r4, #4]
 80084a6:	42a2      	cmp	r2, r4
 80084a8:	bf0c      	ite	eq
 80084aa:	600b      	streq	r3, [r1, #0]
 80084ac:	6053      	strne	r3, [r2, #4]
 80084ae:	4630      	mov	r0, r6
 80084b0:	f000 f85a 	bl	8008568 <__malloc_unlock>
 80084b4:	f104 000b 	add.w	r0, r4, #11
 80084b8:	1d23      	adds	r3, r4, #4
 80084ba:	f020 0007 	bic.w	r0, r0, #7
 80084be:	1ac2      	subs	r2, r0, r3
 80084c0:	d0cc      	beq.n	800845c <_malloc_r+0x20>
 80084c2:	1a1b      	subs	r3, r3, r0
 80084c4:	50a3      	str	r3, [r4, r2]
 80084c6:	e7c9      	b.n	800845c <_malloc_r+0x20>
 80084c8:	4622      	mov	r2, r4
 80084ca:	6864      	ldr	r4, [r4, #4]
 80084cc:	e7cc      	b.n	8008468 <_malloc_r+0x2c>
 80084ce:	1cc4      	adds	r4, r0, #3
 80084d0:	f024 0403 	bic.w	r4, r4, #3
 80084d4:	42a0      	cmp	r0, r4
 80084d6:	d0e3      	beq.n	80084a0 <_malloc_r+0x64>
 80084d8:	1a21      	subs	r1, r4, r0
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 f82e 	bl	800853c <_sbrk_r>
 80084e0:	3001      	adds	r0, #1
 80084e2:	d1dd      	bne.n	80084a0 <_malloc_r+0x64>
 80084e4:	e7cf      	b.n	8008486 <_malloc_r+0x4a>
 80084e6:	bf00      	nop
 80084e8:	20000168 	.word	0x20000168
 80084ec:	2000016c 	.word	0x2000016c

080084f0 <_realloc_r>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	4607      	mov	r7, r0
 80084f4:	4614      	mov	r4, r2
 80084f6:	460e      	mov	r6, r1
 80084f8:	b921      	cbnz	r1, 8008504 <_realloc_r+0x14>
 80084fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80084fe:	4611      	mov	r1, r2
 8008500:	f7ff bf9c 	b.w	800843c <_malloc_r>
 8008504:	b922      	cbnz	r2, 8008510 <_realloc_r+0x20>
 8008506:	f7ff ff49 	bl	800839c <_free_r>
 800850a:	4625      	mov	r5, r4
 800850c:	4628      	mov	r0, r5
 800850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008510:	f000 f830 	bl	8008574 <_malloc_usable_size_r>
 8008514:	42a0      	cmp	r0, r4
 8008516:	d20f      	bcs.n	8008538 <_realloc_r+0x48>
 8008518:	4621      	mov	r1, r4
 800851a:	4638      	mov	r0, r7
 800851c:	f7ff ff8e 	bl	800843c <_malloc_r>
 8008520:	4605      	mov	r5, r0
 8008522:	2800      	cmp	r0, #0
 8008524:	d0f2      	beq.n	800850c <_realloc_r+0x1c>
 8008526:	4631      	mov	r1, r6
 8008528:	4622      	mov	r2, r4
 800852a:	f7ff ff0f 	bl	800834c <memcpy>
 800852e:	4631      	mov	r1, r6
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff ff33 	bl	800839c <_free_r>
 8008536:	e7e9      	b.n	800850c <_realloc_r+0x1c>
 8008538:	4635      	mov	r5, r6
 800853a:	e7e7      	b.n	800850c <_realloc_r+0x1c>

0800853c <_sbrk_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4d06      	ldr	r5, [pc, #24]	; (8008558 <_sbrk_r+0x1c>)
 8008540:	2300      	movs	r3, #0
 8008542:	4604      	mov	r4, r0
 8008544:	4608      	mov	r0, r1
 8008546:	602b      	str	r3, [r5, #0]
 8008548:	f7fa f9a0 	bl	800288c <_sbrk>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_sbrk_r+0x1a>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_sbrk_r+0x1a>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	2000033c 	.word	0x2000033c

0800855c <__malloc_lock>:
 800855c:	4801      	ldr	r0, [pc, #4]	; (8008564 <__malloc_lock+0x8>)
 800855e:	f000 b811 	b.w	8008584 <__retarget_lock_acquire_recursive>
 8008562:	bf00      	nop
 8008564:	20000344 	.word	0x20000344

08008568 <__malloc_unlock>:
 8008568:	4801      	ldr	r0, [pc, #4]	; (8008570 <__malloc_unlock+0x8>)
 800856a:	f000 b80c 	b.w	8008586 <__retarget_lock_release_recursive>
 800856e:	bf00      	nop
 8008570:	20000344 	.word	0x20000344

08008574 <_malloc_usable_size_r>:
 8008574:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008578:	1f18      	subs	r0, r3, #4
 800857a:	2b00      	cmp	r3, #0
 800857c:	bfbc      	itt	lt
 800857e:	580b      	ldrlt	r3, [r1, r0]
 8008580:	18c0      	addlt	r0, r0, r3
 8008582:	4770      	bx	lr

08008584 <__retarget_lock_acquire_recursive>:
 8008584:	4770      	bx	lr

08008586 <__retarget_lock_release_recursive>:
 8008586:	4770      	bx	lr

08008588 <_init>:
 8008588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800858a:	bf00      	nop
 800858c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800858e:	bc08      	pop	{r3}
 8008590:	469e      	mov	lr, r3
 8008592:	4770      	bx	lr

08008594 <_fini>:
 8008594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008596:	bf00      	nop
 8008598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859a:	bc08      	pop	{r3}
 800859c:	469e      	mov	lr, r3
 800859e:	4770      	bx	lr
